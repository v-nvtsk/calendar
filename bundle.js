/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e,t,n={3059:(e,t,n)=>{"use strict";n.d(t,{A:()=>re});var r=function(){function e(e){var t=this;this._insertTag=function(e){var n;n=0===t.tags.length?t.insertionPoint?t.insertionPoint.nextSibling:t.prepend?t.container.firstChild:t.before:t.tags[t.tags.length-1].nextSibling,t.container.insertBefore(e,n),t.tags.push(e)},this.isSpeedy=void 0===e.speedy||e.speedy,this.tags=[],this.ctr=0,this.nonce=e.nonce,this.key=e.key,this.container=e.container,this.prepend=e.prepend,this.insertionPoint=e.insertionPoint,this.before=null}var t=e.prototype;return t.hydrate=function(e){e.forEach(this._insertTag)},t.insert=function(e){this.ctr%(this.isSpeedy?65e3:1)==0&&this._insertTag(function(e){var t=document.createElement("style");return t.setAttribute("data-emotion",e.key),void 0!==e.nonce&&t.setAttribute("nonce",e.nonce),t.appendChild(document.createTextNode("")),t.setAttribute("data-s",""),t}(this));var t=this.tags[this.tags.length-1];if(this.isSpeedy){var n=function(e){if(e.sheet)return e.sheet;for(var t=0;t<document.styleSheets.length;t++)if(document.styleSheets[t].ownerNode===e)return document.styleSheets[t]}(t);try{n.insertRule(e,n.cssRules.length)}catch(e){}}else t.appendChild(document.createTextNode(e));this.ctr++},t.flush=function(){this.tags.forEach((function(e){var t;return null==(t=e.parentNode)?void 0:t.removeChild(e)})),this.tags=[],this.ctr=0},e}(),a=Math.abs,o=String.fromCharCode,i=Object.assign;function l(e){return e.trim()}function s(e,t,n){return e.replace(t,n)}function u(e,t){return e.indexOf(t)}function c(e,t){return 0|e.charCodeAt(t)}function d(e,t,n){return e.slice(t,n)}function p(e){return e.length}function f(e){return e.length}function m(e,t){return t.push(e),e}var h=1,A=1,g=0,y=0,v=0,b="";function x(e,t,n,r,a,o,i){return{value:e,root:t,parent:n,type:r,props:a,children:o,line:h,column:A,length:i,return:""}}function E(e,t){return i(x("",null,null,"",null,null,0),e,{length:-e.length},t)}function C(){return v=y>0?c(b,--y):0,A--,10===v&&(A=1,h--),v}function w(){return v=y<g?c(b,y++):0,A++,10===v&&(A=1,h++),v}function k(){return c(b,y)}function S(){return y}function _(e,t){return d(b,e,t)}function B(e){switch(e){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function T(e){return h=A=1,g=p(b=e),y=0,[]}function j(e){return b="",e}function N(e){return l(_(y-1,O(91===e?e+2:40===e?e+1:e)))}function R(e){for(;(v=k())&&v<33;)w();return B(e)>2||B(v)>3?"":" "}function P(e,t){for(;--t&&w()&&!(v<48||v>102||v>57&&v<65||v>70&&v<97););return _(e,S()+(t<6&&32==k()&&32==w()))}function O(e){for(;w();)switch(v){case e:return y;case 34:case 39:34!==e&&39!==e&&O(v);break;case 40:41===e&&O(e);break;case 92:w()}return y}function z(e,t){for(;w()&&e+v!==57&&(e+v!==84||47!==k()););return"/*"+_(t,y-1)+"*"+o(47===e?e:w())}function M(e){for(;!B(k());)w();return _(e,y)}var I="-ms-",L="-moz-",F="-webkit-",$="comm",D="rule",W="decl",U="@keyframes";function V(e,t){for(var n="",r=f(e),a=0;a<r;a++)n+=t(e[a],a,e,t)||"";return n}function H(e,t,n,r){switch(e.type){case"@layer":if(e.children.length)break;case"@import":case W:return e.return=e.return||e.value;case $:return"";case U:return e.return=e.value+"{"+V(e.children,r)+"}";case D:e.value=e.props.join(",")}return p(n=V(e.children,r))?e.return=e.value+"{"+n+"}":""}function Y(e){return j(G("",null,null,null,[""],e=T(e),0,[0],e))}function G(e,t,n,r,a,i,l,d,f){for(var h=0,A=0,g=l,y=0,v=0,b=0,x=1,E=1,_=1,B=0,T="",j=a,O=i,I=r,L=T;E;)switch(b=B,B=w()){case 40:if(108!=b&&58==c(L,g-1)){-1!=u(L+=s(N(B),"&","&\f"),"&\f")&&(_=-1);break}case 34:case 39:case 91:L+=N(B);break;case 9:case 10:case 13:case 32:L+=R(b);break;case 92:L+=P(S()-1,7);continue;case 47:switch(k()){case 42:case 47:m(K(z(w(),S()),t,n),f);break;default:L+="/"}break;case 123*x:d[h++]=p(L)*_;case 125*x:case 59:case 0:switch(B){case 0:case 125:E=0;case 59+A:-1==_&&(L=s(L,/\f/g,"")),v>0&&p(L)-g&&m(v>32?X(L+";",r,n,g-1):X(s(L," ","")+";",r,n,g-2),f);break;case 59:L+=";";default:if(m(I=q(L,t,n,h,A,a,d,T,j=[],O=[],g),i),123===B)if(0===A)G(L,t,I,I,j,i,g,d,O);else switch(99===y&&110===c(L,3)?100:y){case 100:case 108:case 109:case 115:G(e,I,I,r&&m(q(e,I,I,0,0,a,d,T,a,j=[],g),O),a,O,g,d,r?j:O);break;default:G(L,I,I,I,[""],O,0,d,O)}}h=A=v=0,x=_=1,T=L="",g=l;break;case 58:g=1+p(L),v=b;default:if(x<1)if(123==B)--x;else if(125==B&&0==x++&&125==C())continue;switch(L+=o(B),B*x){case 38:_=A>0?1:(L+="\f",-1);break;case 44:d[h++]=(p(L)-1)*_,_=1;break;case 64:45===k()&&(L+=N(w())),y=k(),A=g=p(T=L+=M(S())),B++;break;case 45:45===b&&2==p(L)&&(x=0)}}return i}function q(e,t,n,r,o,i,u,c,p,m,h){for(var A=o-1,g=0===o?i:[""],y=f(g),v=0,b=0,E=0;v<r;++v)for(var C=0,w=d(e,A+1,A=a(b=u[v])),k=e;C<y;++C)(k=l(b>0?g[C]+" "+w:s(w,/&\f/g,g[C])))&&(p[E++]=k);return x(e,t,n,0===o?D:c,p,m,h)}function K(e,t,n){return x(e,t,n,$,o(v),d(e,2,-2),0)}function X(e,t,n,r){return x(e,t,n,W,d(e,0,r),d(e,r+1,-1),r)}var Q=function(e,t,n){for(var r=0,a=0;r=a,a=k(),38===r&&12===a&&(t[n]=1),!B(a);)w();return _(e,y)},J=new WeakMap,Z=function(e){if("rule"===e.type&&e.parent&&!(e.length<1)){for(var t=e.value,n=e.parent,r=e.column===n.column&&e.line===n.line;"rule"!==n.type;)if(!(n=n.parent))return;if((1!==e.props.length||58===t.charCodeAt(0)||J.get(n))&&!r){J.set(e,!0);for(var a=[],i=function(e,t){return j(function(e,t){var n=-1,r=44;do{switch(B(r)){case 0:38===r&&12===k()&&(t[n]=1),e[n]+=Q(y-1,t,n);break;case 2:e[n]+=N(r);break;case 4:if(44===r){e[++n]=58===k()?"&\f":"",t[n]=e[n].length;break}default:e[n]+=o(r)}}while(r=w());return e}(T(e),t))}(t,a),l=n.props,s=0,u=0;s<i.length;s++)for(var c=0;c<l.length;c++,u++)e.props[u]=a[s]?i[s].replace(/&\f/g,l[c]):l[c]+" "+i[s]}}},ee=function(e){if("decl"===e.type){var t=e.value;108===t.charCodeAt(0)&&98===t.charCodeAt(2)&&(e.return="",e.value="")}};function te(e,t){switch(function(e,t){return 45^c(e,0)?(((t<<2^c(e,0))<<2^c(e,1))<<2^c(e,2))<<2^c(e,3):0}(e,t)){case 5103:return F+"print-"+e+e;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return F+e+e;case 5349:case 4246:case 4810:case 6968:case 2756:return F+e+L+e+I+e+e;case 6828:case 4268:return F+e+I+e+e;case 6165:return F+e+I+"flex-"+e+e;case 5187:return F+e+s(e,/(\w+).+(:[^]+)/,F+"box-$1$2"+I+"flex-$1$2")+e;case 5443:return F+e+I+"flex-item-"+s(e,/flex-|-self/,"")+e;case 4675:return F+e+I+"flex-line-pack"+s(e,/align-content|flex-|-self/,"")+e;case 5548:return F+e+I+s(e,"shrink","negative")+e;case 5292:return F+e+I+s(e,"basis","preferred-size")+e;case 6060:return F+"box-"+s(e,"-grow","")+F+e+I+s(e,"grow","positive")+e;case 4554:return F+s(e,/([^-])(transform)/g,"$1"+F+"$2")+e;case 6187:return s(s(s(e,/(zoom-|grab)/,F+"$1"),/(image-set)/,F+"$1"),e,"")+e;case 5495:case 3959:return s(e,/(image-set\([^]*)/,F+"$1$`$1");case 4968:return s(s(e,/(.+:)(flex-)?(.*)/,F+"box-pack:$3"+I+"flex-pack:$3"),/s.+-b[^;]+/,"justify")+F+e+e;case 4095:case 3583:case 4068:case 2532:return s(e,/(.+)-inline(.+)/,F+"$1$2")+e;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if(p(e)-1-t>6)switch(c(e,t+1)){case 109:if(45!==c(e,t+4))break;case 102:return s(e,/(.+:)(.+)-([^]+)/,"$1"+F+"$2-$3$1"+L+(108==c(e,t+3)?"$3":"$2-$3"))+e;case 115:return~u(e,"stretch")?te(s(e,"stretch","fill-available"),t)+e:e}break;case 4949:if(115!==c(e,t+1))break;case 6444:switch(c(e,p(e)-3-(~u(e,"!important")&&10))){case 107:return s(e,":",":"+F)+e;case 101:return s(e,/(.+:)([^;!]+)(;|!.+)?/,"$1"+F+(45===c(e,14)?"inline-":"")+"box$3$1"+F+"$2$3$1"+I+"$2box$3")+e}break;case 5936:switch(c(e,t+11)){case 114:return F+e+I+s(e,/[svh]\w+-[tblr]{2}/,"tb")+e;case 108:return F+e+I+s(e,/[svh]\w+-[tblr]{2}/,"tb-rl")+e;case 45:return F+e+I+s(e,/[svh]\w+-[tblr]{2}/,"lr")+e}return F+e+I+e+e}return e}var ne=[function(e,t,n,r){if(e.length>-1&&!e.return)switch(e.type){case W:e.return=te(e.value,e.length);break;case U:return V([E(e,{value:s(e.value,"@","@"+F)})],r);case D:if(e.length)return function(e,t){return e.map(t).join("")}(e.props,(function(t){switch(function(e,t){return(e=/(::plac\w+|:read-\w+)/.exec(e))?e[0]:e}(t)){case":read-only":case":read-write":return V([E(e,{props:[s(t,/:(read-\w+)/,":-moz-$1")]})],r);case"::placeholder":return V([E(e,{props:[s(t,/:(plac\w+)/,":"+F+"input-$1")]}),E(e,{props:[s(t,/:(plac\w+)/,":-moz-$1")]}),E(e,{props:[s(t,/:(plac\w+)/,I+"input-$1")]})],r)}return""}))}}],re=function(e){var t=e.key;if("css"===t){var n=document.querySelectorAll("style[data-emotion]:not([data-s])");Array.prototype.forEach.call(n,(function(e){-1!==e.getAttribute("data-emotion").indexOf(" ")&&(document.head.appendChild(e),e.setAttribute("data-s",""))}))}var a,o,i=e.stylisPlugins||ne,l={},s=[];a=e.container||document.head,Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="'+t+' "]'),(function(e){for(var t=e.getAttribute("data-emotion").split(" "),n=1;n<t.length;n++)l[t[n]]=!0;s.push(e)}));var u,c,d,p,m=[H,(p=function(e){u.insert(e)},function(e){e.root||(e=e.return)&&p(e)})],h=(c=[Z,ee].concat(i,m),d=f(c),function(e,t,n,r){for(var a="",o=0;o<d;o++)a+=c[o](e,t,n,r)||"";return a});o=function(e,t,n,r){u=n,V(Y(e?e+"{"+t.styles+"}":t.styles),h),r&&(A.inserted[t.name]=!0)};var A={key:t,sheet:new r({key:t,container:a,nonce:e.nonce,speedy:e.speedy,prepend:e.prepend,insertionPoint:e.insertionPoint}),nonce:e.nonce,inserted:l,registered:{},insert:o};return A.sheet.hydrate(s),A}},9597:(e,t,n)=>{"use strict";function r(e){var t=Object.create(null);return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}}n.d(t,{A:()=>r})},9842:(e,t,n)=>{"use strict";n.d(t,{C:()=>i,T:()=>s,w:()=>l});var r=n(3696),a=n(3059),o=(n(3114),n(755),r.createContext("undefined"!=typeof HTMLElement?(0,a.A)({key:"css"}):null)),i=o.Provider,l=function(e){return(0,r.forwardRef)((function(t,n){var a=(0,r.useContext)(o);return e(t,a,n)}))},s=r.createContext({})},1785:(e,t,n)=>{"use strict";n.d(t,{AH:()=>u,i7:()=>c,mL:()=>s});var r=n(9842),a=n(3696),o=n(309),i=n(755),l=n(3114),s=(n(3059),n(8486),(0,r.w)((function(e,t){var n=e.styles,s=(0,l.J)([n],void 0,a.useContext(r.T)),u=a.useRef();return(0,i.i)((function(){var e=t.key+"-global",n=new t.sheet.constructor({key:e,nonce:t.sheet.nonce,container:t.sheet.container,speedy:t.sheet.isSpeedy}),r=!1,a=document.querySelector('style[data-emotion="'+e+" "+s.name+'"]');return t.sheet.tags.length&&(n.before=t.sheet.tags[0]),null!==a&&(r=!0,a.setAttribute("data-emotion",e),n.hydrate([a])),u.current=[n,r],function(){n.flush()}}),[t]),(0,i.i)((function(){var e=u.current,n=e[0];if(e[1])e[1]=!1;else{if(void 0!==s.next&&(0,o.sk)(t,s.next,!0),n.tags.length){var r=n.tags[n.tags.length-1].nextElementSibling;n.before=r,n.flush()}t.insert("",s,n,!1)}}),[t,s.name]),null})));function u(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return(0,l.J)(t)}var c=function(){var e=u.apply(void 0,arguments),t="animation-"+e.name;return{name:t,styles:"@keyframes "+t+"{"+e.styles+"}",anim:1,toString:function(){return"_EMO_"+this.name+"_"+this.styles+"_EMO_"}}}},3114:(e,t,n)=>{"use strict";n.d(t,{J:()=>A});var r={animationIterationCount:1,aspectRatio:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1},a=n(9597),o=!1,i=/[A-Z]|^ms/g,l=/_EMO_([^_]+?)_([^]*?)_EMO_/g,s=function(e){return 45===e.charCodeAt(1)},u=function(e){return null!=e&&"boolean"!=typeof e},c=(0,a.A)((function(e){return s(e)?e:e.replace(i,"-$&").toLowerCase()})),d=function(e,t){switch(e){case"animation":case"animationName":if("string"==typeof t)return t.replace(l,(function(e,t,n){return m={name:t,styles:n,next:m},t}))}return 1===r[e]||s(e)||"number"!=typeof t||0===t?t:t+"px"},p="Component selectors can only be used in conjunction with @emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware compiler transform.";function f(e,t,n){if(null==n)return"";var r=n;if(void 0!==r.__emotion_styles)return r;switch(typeof n){case"boolean":return"";case"object":var a=n;if(1===a.anim)return m={name:a.name,styles:a.styles,next:m},a.name;var i=n;if(void 0!==i.styles){var l=i.next;if(void 0!==l)for(;void 0!==l;)m={name:l.name,styles:l.styles,next:m},l=l.next;return i.styles+";"}return function(e,t,n){var r="";if(Array.isArray(n))for(var a=0;a<n.length;a++)r+=f(e,t,n[a])+";";else for(var i in n){var l=n[i];if("object"!=typeof l){var s=l;null!=t&&void 0!==t[s]?r+=i+"{"+t[s]+"}":u(s)&&(r+=c(i)+":"+d(i,s)+";")}else{if("NO_COMPONENT_SELECTOR"===i&&o)throw new Error(p);if(!Array.isArray(l)||"string"!=typeof l[0]||null!=t&&void 0!==t[l[0]]){var m=f(e,t,l);switch(i){case"animation":case"animationName":r+=c(i)+":"+m+";";break;default:r+=i+"{"+m+"}"}}else for(var h=0;h<l.length;h++)u(l[h])&&(r+=c(i)+":"+d(i,l[h])+";")}}return r}(e,t,n);case"function":if(void 0!==e){var s=m,h=n(e);return m=s,f(e,t,h)}}var A=n;if(null==t)return A;var g=t[A];return void 0!==g?g:A}var m,h=/label:\s*([^\s;\n{]+)\s*(;|$)/g;function A(e,t,n){if(1===e.length&&"object"==typeof e[0]&&null!==e[0]&&void 0!==e[0].styles)return e[0];var r=!0,a="";m=void 0;var o=e[0];null==o||void 0===o.raw?(r=!1,a+=f(n,t,o)):a+=o[0];for(var i=1;i<e.length;i++)a+=f(n,t,e[i]),r&&(a+=o[i]);h.lastIndex=0;for(var l,s="";null!==(l=h.exec(a));)s+="-"+l[1];var u=function(e){for(var t,n=0,r=0,a=e.length;a>=4;++r,a-=4)t=1540483477*(65535&(t=255&e.charCodeAt(r)|(255&e.charCodeAt(++r))<<8|(255&e.charCodeAt(++r))<<16|(255&e.charCodeAt(++r))<<24))+(59797*(t>>>16)<<16),n=1540483477*(65535&(t^=t>>>24))+(59797*(t>>>16)<<16)^1540483477*(65535&n)+(59797*(n>>>16)<<16);switch(a){case 3:n^=(255&e.charCodeAt(r+2))<<16;case 2:n^=(255&e.charCodeAt(r+1))<<8;case 1:n=1540483477*(65535&(n^=255&e.charCodeAt(r)))+(59797*(n>>>16)<<16)}return(((n=1540483477*(65535&(n^=n>>>13))+(59797*(n>>>16)<<16))^n>>>15)>>>0).toString(36)}(a)+s;return{name:u,styles:a,next:m}}},755:(e,t,n)=>{"use strict";var r;n.d(t,{i:()=>l,s:()=>i});var a=n(3696),o=!!(r||(r=n.t(a,2))).useInsertionEffect&&(r||(r=n.t(a,2))).useInsertionEffect,i=o||function(e){return e()},l=o||a.useLayoutEffect},309:(e,t,n)=>{"use strict";function r(e,t,n){var r="";return n.split(" ").forEach((function(n){void 0!==e[n]?t.push(e[n]+";"):r+=n+" "})),r}n.d(t,{Rk:()=>r,SF:()=>a,sk:()=>o});var a=function(e,t,n){var r=e.key+"-"+t.name;!1===n&&void 0===e.registered[r]&&(e.registered[r]=t.styles)},o=function(e,t,n){a(e,t,n);var r=e.key+"-"+t.name;if(void 0===e.inserted[t.name]){var o=t;do{e.insert(t===o?"."+r:"",o,e.sheet,!0),o=o.next}while(void 0!==o)}}},6074:(e,t,n)=>{"use strict";var r=n(6784);t.A=void 0;var a=r(n(7044)),o=n(2540);t.A=(0,a.default)((0,o.jsx)("path",{d:"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6z"}),"Add")},7044:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return r.createSvgIcon}});var r=n(8529)},4939:(e,t,n)=>{"use strict";n.d(t,{b:()=>i});var r=n(3696),a=n(2215);n(2540);const o=r.createContext(void 0);function i(e){return function({props:e,name:t}){return function(e){const{theme:t,name:n,props:r}=e;if(!t||!t.components||!t.components[n])return r;const o=t.components[n];return o.defaultProps?(0,a.A)(o.defaultProps,r):o.styleOverrides||o.variants?r:(0,a.A)(o,r)}({props:e,name:t,theme:{components:r.useContext(o)}})}(e)}},8498:(e,t)=>{"use strict";Symbol.for("react.element"),Symbol.for("react.portal"),Symbol.for("react.fragment"),Symbol.for("react.strict_mode"),Symbol.for("react.profiler"),Symbol.for("react.provider"),Symbol.for("react.context"),Symbol.for("react.server_context"),Symbol.for("react.forward_ref"),Symbol.for("react.suspense"),Symbol.for("react.suspense_list"),Symbol.for("react.memo"),Symbol.for("react.lazy"),Symbol.for("react.offscreen");Symbol.for("react.module.reference")},6542:(e,t,n)=>{"use strict";n(8498)},9575:(e,t,n)=>{"use strict";n.d(t,{A:()=>I});var r=n(8102),a=n(9257),o=n(7425),i=n(6121),l=n(8624),s=n(2927),u=n(8953),c=n(495);const d={black:"#000",white:"#fff"},p={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#f5f5f5",A200:"#eeeeee",A400:"#bdbdbd",A700:"#616161"},f={50:"#f3e5f5",100:"#e1bee7",200:"#ce93d8",300:"#ba68c8",400:"#ab47bc",500:"#9c27b0",600:"#8e24aa",700:"#7b1fa2",800:"#6a1b9a",900:"#4a148c",A100:"#ea80fc",A200:"#e040fb",A400:"#d500f9",A700:"#aa00ff"},m={50:"#ffebee",100:"#ffcdd2",200:"#ef9a9a",300:"#e57373",400:"#ef5350",500:"#f44336",600:"#e53935",700:"#d32f2f",800:"#c62828",900:"#b71c1c",A100:"#ff8a80",A200:"#ff5252",A400:"#ff1744",A700:"#d50000"},h={50:"#fff3e0",100:"#ffe0b2",200:"#ffcc80",300:"#ffb74d",400:"#ffa726",500:"#ff9800",600:"#fb8c00",700:"#f57c00",800:"#ef6c00",900:"#e65100",A100:"#ffd180",A200:"#ffab40",A400:"#ff9100",A700:"#ff6d00"},A={50:"#e3f2fd",100:"#bbdefb",200:"#90caf9",300:"#64b5f6",400:"#42a5f5",500:"#2196f3",600:"#1e88e5",700:"#1976d2",800:"#1565c0",900:"#0d47a1",A100:"#82b1ff",A200:"#448aff",A400:"#2979ff",A700:"#2962ff"},g={50:"#e1f5fe",100:"#b3e5fc",200:"#81d4fa",300:"#4fc3f7",400:"#29b6f6",500:"#03a9f4",600:"#039be5",700:"#0288d1",800:"#0277bd",900:"#01579b",A100:"#80d8ff",A200:"#40c4ff",A400:"#00b0ff",A700:"#0091ea"},y={50:"#e8f5e9",100:"#c8e6c9",200:"#a5d6a7",300:"#81c784",400:"#66bb6a",500:"#4caf50",600:"#43a047",700:"#388e3c",800:"#2e7d32",900:"#1b5e20",A100:"#b9f6ca",A200:"#69f0ae",A400:"#00e676",A700:"#00c853"},v=["mode","contrastThreshold","tonalOffset"],b={text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.6)",disabled:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:d.white,default:d.white},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.04)",hoverOpacity:.04,selected:"rgba(0, 0, 0, 0.08)",selectedOpacity:.08,disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)",disabledOpacity:.38,focus:"rgba(0, 0, 0, 0.12)",focusOpacity:.12,activatedOpacity:.12}},x={text:{primary:d.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:"#121212",default:"#121212"},action:{active:d.white,hover:"rgba(255, 255, 255, 0.08)",hoverOpacity:.08,selected:"rgba(255, 255, 255, 0.16)",selectedOpacity:.16,disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)",disabledOpacity:.38,focus:"rgba(255, 255, 255, 0.12)",focusOpacity:.12,activatedOpacity:.24}};function E(e,t,n,r){const a=r.light||r,o=r.dark||1.5*r;e[t]||(e.hasOwnProperty(n)?e[t]=e[n]:"light"===t?e.light=(0,c.a)(e.main,a):"dark"===t&&(e.dark=(0,c.e$)(e.main,o)))}const C=["fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","fontWeightBold","htmlFontSize","allVariants","pxToRem"],w={textTransform:"uppercase"},k='"Roboto", "Helvetica", "Arial", sans-serif';function S(e,t){const n="function"==typeof t?t(e):t,{fontFamily:o=k,fontSize:l=14,fontWeightLight:s=300,fontWeightRegular:u=400,fontWeightMedium:c=500,fontWeightBold:d=700,htmlFontSize:p=16,allVariants:f,pxToRem:m}=n,h=(0,a.A)(n,C),A=l/14,g=m||(e=>e/p*A+"rem"),y=(e,t,n,a,i)=>{return(0,r.A)({fontFamily:o,fontWeight:e,fontSize:g(t),lineHeight:n},o===k?{letterSpacing:(l=a/t,Math.round(1e5*l)/1e5+"em")}:{},i,f);var l},v={h1:y(s,96,1.167,-1.5),h2:y(s,60,1.2,-.5),h3:y(u,48,1.167,0),h4:y(u,34,1.235,.25),h5:y(u,24,1.334,0),h6:y(c,20,1.6,.15),subtitle1:y(u,16,1.75,.15),subtitle2:y(c,14,1.57,.1),body1:y(u,16,1.5,.15),body2:y(u,14,1.43,.15),button:y(c,14,1.75,.4,w),caption:y(u,12,1.66,.4),overline:y(u,12,2.66,1,w),inherit:{fontFamily:"inherit",fontWeight:"inherit",fontSize:"inherit",lineHeight:"inherit",letterSpacing:"inherit"}};return(0,i.A)((0,r.A)({htmlFontSize:p,pxToRem:g,fontFamily:o,fontSize:l,fontWeightLight:s,fontWeightRegular:u,fontWeightMedium:c,fontWeightBold:d},v),h,{clone:!1})}function _(...e){return[`${e[0]}px ${e[1]}px ${e[2]}px ${e[3]}px rgba(0,0,0,0.2)`,`${e[4]}px ${e[5]}px ${e[6]}px ${e[7]}px rgba(0,0,0,0.14)`,`${e[8]}px ${e[9]}px ${e[10]}px ${e[11]}px rgba(0,0,0,0.12)`].join(",")}const B=["none",_(0,2,1,-1,0,1,1,0,0,1,3,0),_(0,3,1,-2,0,2,2,0,0,1,5,0),_(0,3,3,-2,0,3,4,0,0,1,8,0),_(0,2,4,-1,0,4,5,0,0,1,10,0),_(0,3,5,-1,0,5,8,0,0,1,14,0),_(0,3,5,-1,0,6,10,0,0,1,18,0),_(0,4,5,-2,0,7,10,1,0,2,16,1),_(0,5,5,-3,0,8,10,1,0,3,14,2),_(0,5,6,-3,0,9,12,1,0,3,16,2),_(0,6,6,-3,0,10,14,1,0,4,18,3),_(0,6,7,-4,0,11,15,1,0,4,20,3),_(0,7,8,-4,0,12,17,2,0,5,22,4),_(0,7,8,-4,0,13,19,2,0,5,24,4),_(0,7,9,-4,0,14,21,2,0,5,26,4),_(0,8,9,-5,0,15,22,2,0,6,28,5),_(0,8,10,-5,0,16,24,2,0,6,30,5),_(0,8,11,-5,0,17,26,2,0,6,32,5),_(0,9,11,-5,0,18,28,2,0,7,34,6),_(0,9,12,-6,0,19,29,2,0,7,36,6),_(0,10,13,-6,0,20,31,3,0,8,38,7),_(0,10,13,-6,0,21,33,3,0,8,40,7),_(0,10,14,-6,0,22,35,3,0,8,42,7),_(0,11,14,-7,0,23,36,3,0,9,44,8),_(0,11,15,-7,0,24,38,3,0,9,46,8)],T=["duration","easing","delay"],j={easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"},N={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195};function R(e){return`${Math.round(e)}ms`}function P(e){if(!e)return 0;const t=e/36;return Math.round(10*(4+15*t**.25+t/5))}function O(e){const t=(0,r.A)({},j,e.easing),n=(0,r.A)({},N,e.duration);return(0,r.A)({getAutoHeightDuration:P,create:(e=["all"],r={})=>{const{duration:o=n.standard,easing:i=t.easeInOut,delay:l=0}=r;return(0,a.A)(r,T),(Array.isArray(e)?e:[e]).map((e=>`${e} ${"string"==typeof o?o:R(o)} ${i} ${"string"==typeof l?l:R(l)}`)).join(",")}},e,{easing:t,duration:n})}const z={mobileStepper:1e3,fab:1050,speedDial:1050,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500},M=["breakpoints","mixins","spacing","palette","transitions","typography","shape"];const I=function(e={},...t){const{mixins:n={},palette:C={},transitions:w={},typography:k={}}=e,_=(0,a.A)(e,M);if(e.vars)throw new Error((0,o.A)(18));const T=function(e){const{mode:t="light",contrastThreshold:n=3,tonalOffset:l=.2}=e,s=(0,a.A)(e,v),u=e.primary||function(e="light"){return"dark"===e?{main:A[200],light:A[50],dark:A[400]}:{main:A[700],light:A[400],dark:A[800]}}(t),C=e.secondary||function(e="light"){return"dark"===e?{main:f[200],light:f[50],dark:f[400]}:{main:f[500],light:f[300],dark:f[700]}}(t),w=e.error||function(e="light"){return"dark"===e?{main:m[500],light:m[300],dark:m[700]}:{main:m[700],light:m[400],dark:m[800]}}(t),k=e.info||function(e="light"){return"dark"===e?{main:g[400],light:g[300],dark:g[700]}:{main:g[700],light:g[500],dark:g[900]}}(t),S=e.success||function(e="light"){return"dark"===e?{main:y[400],light:y[300],dark:y[700]}:{main:y[800],light:y[500],dark:y[900]}}(t),_=e.warning||function(e="light"){return"dark"===e?{main:h[400],light:h[300],dark:h[700]}:{main:"#ed6c02",light:h[500],dark:h[900]}}(t);function B(e){return(0,c.eM)(e,x.text.primary)>=n?x.text.primary:b.text.primary}const T=({color:e,name:t,mainShade:n=500,lightShade:a=300,darkShade:i=700})=>{if(!(e=(0,r.A)({},e)).main&&e[n]&&(e.main=e[n]),!e.hasOwnProperty("main"))throw new Error((0,o.A)(11,t?` (${t})`:"",n));if("string"!=typeof e.main)throw new Error((0,o.A)(12,t?` (${t})`:"",JSON.stringify(e.main)));return E(e,"light",a,l),E(e,"dark",i,l),e.contrastText||(e.contrastText=B(e.main)),e},j={dark:x,light:b};return(0,i.A)((0,r.A)({common:(0,r.A)({},d),mode:t,primary:T({color:u,name:"primary"}),secondary:T({color:C,name:"secondary",mainShade:"A400",lightShade:"A200",darkShade:"A700"}),error:T({color:w,name:"error"}),warning:T({color:_,name:"warning"}),info:T({color:k,name:"info"}),success:T({color:S,name:"success"}),grey:p,contrastThreshold:n,getContrastText:B,augmentColor:T,tonalOffset:l},j[t]),s)}(C),j=(0,u.A)(e);let N=(0,i.A)(j,{mixins:(R=j.breakpoints,P=n,(0,r.A)({toolbar:{minHeight:56,[R.up("xs")]:{"@media (orientation: landscape)":{minHeight:48}},[R.up("sm")]:{minHeight:64}}},P)),palette:T,shadows:B.slice(),typography:S(T,k),transitions:O(w),zIndex:(0,r.A)({},z)});var R,P;return N=(0,i.A)(N,_),N=t.reduce(((e,t)=>(0,i.A)(e,t)),N),N.unstable_sxConfig=(0,r.A)({},l.A,null==_?void 0:_.unstable_sxConfig),N.unstable_sx=function(e){return(0,s.A)({sx:e,theme:this})},N}()},3724:(e,t,n)=>{"use strict";n.d(t,{A:()=>r});const r="$$material"},3926:(e,t,n)=>{"use strict";n.d(t,{A:()=>a});var r=n(4738);const a=e=>(0,r.A)(e)&&"classes"!==e},4738:(e,t,n)=>{"use strict";n.d(t,{A:()=>r});const r=function(e){return"ownerState"!==e&&"theme"!==e&&"sx"!==e&&"as"!==e}},7308:(e,t,n)=>{"use strict";n.d(t,{Ay:()=>l});var r=n(7593),a=n(9575),o=n(3724),i=n(3926);const l=(0,r.Ay)({themeId:o.A,defaultTheme:a.A,rootShouldForwardProp:i.A})},4726:(e,t,n)=>{"use strict";n.d(t,{A:()=>r});const r=n(5235).A},4487:(e,t,n)=>{"use strict";n.d(t,{A:()=>v});var r=n(8102),a=n(3696),o=n(9257),i=n(1750),l=n(1023),s=n(4726),u=n(4939),c=n(7308),d=n(9009),p=n(6733);function f(e){return(0,p.Ay)("MuiSvgIcon",e)}(0,d.A)("MuiSvgIcon",["root","colorPrimary","colorSecondary","colorAction","colorError","colorDisabled","fontSizeInherit","fontSizeSmall","fontSizeMedium","fontSizeLarge"]);var m=n(2540);const h=["children","className","color","component","fontSize","htmlColor","inheritViewBox","titleAccess","viewBox"],A=(0,c.Ay)("svg",{name:"MuiSvgIcon",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,"inherit"!==n.color&&t[`color${(0,s.A)(n.color)}`],t[`fontSize${(0,s.A)(n.fontSize)}`]]}})((({theme:e,ownerState:t})=>{var n,r,a,o,i,l,s,u,c,d,p,f,m;return{userSelect:"none",width:"1em",height:"1em",display:"inline-block",fill:t.hasSvgAsChild?void 0:"currentColor",flexShrink:0,transition:null==(n=e.transitions)||null==(r=n.create)?void 0:r.call(n,"fill",{duration:null==(a=e.transitions)||null==(a=a.duration)?void 0:a.shorter}),fontSize:{inherit:"inherit",small:(null==(o=e.typography)||null==(i=o.pxToRem)?void 0:i.call(o,20))||"1.25rem",medium:(null==(l=e.typography)||null==(s=l.pxToRem)?void 0:s.call(l,24))||"1.5rem",large:(null==(u=e.typography)||null==(c=u.pxToRem)?void 0:c.call(u,35))||"2.1875rem"}[t.fontSize],color:null!=(d=null==(p=(e.vars||e).palette)||null==(p=p[t.color])?void 0:p.main)?d:{action:null==(f=(e.vars||e).palette)||null==(f=f.action)?void 0:f.active,disabled:null==(m=(e.vars||e).palette)||null==(m=m.action)?void 0:m.disabled,inherit:void 0}[t.color]}})),g=a.forwardRef((function(e,t){const n=(0,u.b)({props:e,name:"MuiSvgIcon"}),{children:c,className:d,color:p="inherit",component:g="svg",fontSize:y="medium",htmlColor:v,inheritViewBox:b=!1,titleAccess:x,viewBox:E="0 0 24 24"}=n,C=(0,o.A)(n,h),w=a.isValidElement(c)&&"svg"===c.type,k=(0,r.A)({},n,{color:p,component:g,fontSize:y,instanceFontSize:e.fontSize,inheritViewBox:b,viewBox:E,hasSvgAsChild:w}),S={};b||(S.viewBox=E);const _=(e=>{const{color:t,fontSize:n,classes:r}=e,a={root:["root","inherit"!==t&&`color${(0,s.A)(t)}`,`fontSize${(0,s.A)(n)}`]};return(0,l.A)(a,f,r)})(k);return(0,m.jsxs)(A,(0,r.A)({as:g,className:(0,i.A)(_.root,d),focusable:"false",color:v,"aria-hidden":!x||void 0,role:x?"img":void 0,ref:t},S,C,w&&c.props,{ownerState:k,children:[w?c.props.children:c,x?(0,m.jsx)("title",{children:x}):null]}))}));g.muiName="SvgIcon";const y=g;function v(e,t){function n(n,a){return(0,m.jsx)(y,(0,r.A)({"data-testid":`${t}Icon`,ref:a},n,{children:e}))}return n.muiName=y.muiName,a.memo(a.forwardRef(n))}},5403:(e,t,n)=>{"use strict";n.d(t,{A:()=>r});const r=n(1493).A},8529:(e,t,n)=>{"use strict";n.r(t),n.d(t,{capitalize:()=>a.A,createChainedFunction:()=>o,createSvgIcon:()=>i.A,debounce:()=>l.A,deprecatedPropType:()=>s,isMuiElement:()=>u.A,ownerDocument:()=>c.A,ownerWindow:()=>d.A,requirePropFactory:()=>p,setRef:()=>f,unstable_ClassNameGenerator:()=>x,unstable_useEnhancedEffect:()=>m.A,unstable_useId:()=>h,unsupportedProp:()=>A,useControlled:()=>g.A,useEventCallback:()=>y.A,useForkRef:()=>v.A,useIsFocusVisible:()=>b.A});var r=n(1027),a=n(4726);const o=n(7605).A;var i=n(4487),l=n(5403);const s=function(e,t){return()=>null};var u=n(6421),c=n(1092),d=n(3025);n(8102);const p=function(e,t){return()=>null},f=n(1849).A;var m=n(4382);const h=n(4553).A,A=function(e,t,n,r,a){return null};var g=n(1681),y=n(2398),v=n(9424),b=n(7900);const x={configure:e=>{r.A.configure(e)}}},6421:(e,t,n)=>{"use strict";n.d(t,{A:()=>a});var r=n(3696);const a=function(e,t){var n,a;return r.isValidElement(e)&&-1!==t.indexOf(null!=(n=e.type.muiName)?n:null==(a=e.type)||null==(a=a._payload)||null==(a=a.value)?void 0:a.muiName)}},1092:(e,t,n)=>{"use strict";n.d(t,{A:()=>r});const r=n(713).A},3025:(e,t,n)=>{"use strict";n.d(t,{A:()=>r});const r=n(2097).A},1681:(e,t,n)=>{"use strict";n.d(t,{A:()=>a});var r=n(3696);const a=function({controlled:e,default:t,name:n,state:a="value"}){const{current:o}=r.useRef(void 0!==e),[i,l]=r.useState(t);return[o?e:i,r.useCallback((e=>{o||l(e)}),[])]}},4382:(e,t,n)=>{"use strict";n.d(t,{A:()=>r});const r=n(1789).A},2398:(e,t,n)=>{"use strict";n.d(t,{A:()=>r});const r=n(3183).A},9424:(e,t,n)=>{"use strict";n.d(t,{A:()=>r});const r=n(5591).A},7900:(e,t,n)=>{"use strict";n.d(t,{A:()=>p});var r=n(3696),a=n(8016);let o=!0,i=!1;const l=new a.E,s={text:!0,search:!0,url:!0,tel:!0,email:!0,password:!0,number:!0,date:!0,month:!0,week:!0,time:!0,datetime:!0,"datetime-local":!0};function u(e){e.metaKey||e.altKey||e.ctrlKey||(o=!0)}function c(){o=!1}function d(){"hidden"===this.visibilityState&&i&&(o=!0)}const p=function(){const e=r.useCallback((e=>{var t;null!=e&&((t=e.ownerDocument).addEventListener("keydown",u,!0),t.addEventListener("mousedown",c,!0),t.addEventListener("pointerdown",c,!0),t.addEventListener("touchstart",c,!0),t.addEventListener("visibilitychange",d,!0))}),[]),t=r.useRef(!1);return{isFocusVisibleRef:t,onFocus:function(e){return!!function(e){const{target:t}=e;try{return t.matches(":focus-visible")}catch(e){}return o||function(e){const{type:t,tagName:n}=e;return!("INPUT"!==n||!s[t]||e.readOnly)||"TEXTAREA"===n&&!e.readOnly||!!e.isContentEditable}(t)}(e)&&(t.current=!0,!0)},onBlur:function(){return!!t.current&&(i=!0,l.start(100,(()=>{i=!1})),t.current=!1,!0)},ref:e}}},1928:(e,t,n)=>{"use strict";n.d(t,{A:()=>o}),n(3696);var r=n(1785),a=n(2540);function o(e){const{styles:t,defaultTheme:n={}}=e,o="function"==typeof t?e=>{return t(null==(r=e)||0===Object.keys(r).length?n:e);var r}:t;return(0,a.jsx)(r.mL,{styles:o})}},976:(e,t,n)=>{"use strict";n.r(t),n.d(t,{GlobalStyles:()=>C.A,StyledEngineProvider:()=>E,ThemeContext:()=>s.T,css:()=>y.AH,default:()=>w,internal_processStyles:()=>k,keyframes:()=>y.i7});var r=n(8102),a=n(3696),o=n(9597),i=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|disableRemotePlayback|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/,l=(0,o.A)((function(e){return i.test(e)||111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)<91})),s=n(9842),u=n(309),c=n(3114),d=n(755),p=l,f=function(e){return"theme"!==e},m=function(e){return"string"==typeof e&&e.charCodeAt(0)>96?p:f},h=function(e,t,n){var r;if(t){var a=t.shouldForwardProp;r=e.__emotion_forwardProp&&a?function(t){return e.__emotion_forwardProp(t)&&a(t)}:a}return"function"!=typeof r&&n&&(r=e.__emotion_forwardProp),r},A=function(e){var t=e.cache,n=e.serialized,r=e.isStringTag;return(0,u.SF)(t,n,r),(0,d.s)((function(){return(0,u.sk)(t,n,r)})),null},g=function e(t,n){var o,i,l=t.__emotion_real===t,d=l&&t.__emotion_base||t;void 0!==n&&(o=n.label,i=n.target);var p=h(t,n,l),f=p||m(d),g=!f("as");return function(){var y=arguments,v=l&&void 0!==t.__emotion_styles?t.__emotion_styles.slice(0):[];if(void 0!==o&&v.push("label:"+o+";"),null==y[0]||void 0===y[0].raw)v.push.apply(v,y);else{v.push(y[0][0]);for(var b=y.length,x=1;x<b;x++)v.push(y[x],y[0][x])}var E=(0,s.w)((function(e,t,n){var r=g&&e.as||d,o="",l=[],h=e;if(null==e.theme){for(var y in h={},e)h[y]=e[y];h.theme=a.useContext(s.T)}"string"==typeof e.className?o=(0,u.Rk)(t.registered,l,e.className):null!=e.className&&(o=e.className+" ");var b=(0,c.J)(v.concat(l),t.registered,h);o+=t.key+"-"+b.name,void 0!==i&&(o+=" "+i);var x=g&&void 0===p?m(r):f,E={};for(var C in e)g&&"as"===C||x(C)&&(E[C]=e[C]);return E.className=o,n&&(E.ref=n),a.createElement(a.Fragment,null,a.createElement(A,{cache:t,serialized:b,isStringTag:"string"==typeof r}),a.createElement(r,E))}));return E.displayName=void 0!==o?o:"Styled("+("string"==typeof d?d:d.displayName||d.name||"Component")+")",E.defaultProps=t.defaultProps,E.__emotion_real=E,E.__emotion_base=d,E.__emotion_styles=v,E.__emotion_forwardProp=p,Object.defineProperty(E,"toString",{value:function(){return"."+i}}),E.withComponent=function(t,a){return e(t,(0,r.A)({},n,a,{shouldForwardProp:h(E,a,!0)})).apply(void 0,v)},E}}.bind();["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"].forEach((function(e){g[e]=g(e)}));var y=n(1785),v=n(3059),b=n(2540);let x;function E(e){const{injectFirst:t,children:n}=e;return t&&x?(0,b.jsx)(s.C,{value:x,children:n}):n}"object"==typeof document&&(x=(0,v.A)({key:"css",prepend:!0}));var C=n(1928);function w(e,t){return g(e,t)}const k=(e,t)=>{Array.isArray(e.__emotion_styles)&&(e.__emotion_styles=t(e.__emotion_styles))}},495:(e,t,n)=>{"use strict";var r=n(6784);t.X4=function(e,t){return e=l(e),t=i(t),"rgb"!==e.type&&"hsl"!==e.type||(e.type+="a"),"color"===e.type?e.values[3]=`/${t}`:e.values[3]=t,s(e)},t.e$=c,t.eM=function(e,t){const n=u(e),r=u(t);return(Math.max(n,r)+.05)/(Math.min(n,r)+.05)},t.a=d;var a=r(n(6284)),o=r(n(8859));function i(e,t=0,n=1){return(0,o.default)(e,t,n)}function l(e){if(e.type)return e;if("#"===e.charAt(0))return l(function(e){e=e.slice(1);const t=new RegExp(`.{1,${e.length>=6?2:1}}`,"g");let n=e.match(t);return n&&1===n[0].length&&(n=n.map((e=>e+e))),n?`rgb${4===n.length?"a":""}(${n.map(((e,t)=>t<3?parseInt(e,16):Math.round(parseInt(e,16)/255*1e3)/1e3)).join(", ")})`:""}(e));const t=e.indexOf("("),n=e.substring(0,t);if(-1===["rgb","rgba","hsl","hsla","color"].indexOf(n))throw new Error((0,a.default)(9,e));let r,o=e.substring(t+1,e.length-1);if("color"===n){if(o=o.split(" "),r=o.shift(),4===o.length&&"/"===o[3].charAt(0)&&(o[3]=o[3].slice(1)),-1===["srgb","display-p3","a98-rgb","prophoto-rgb","rec-2020"].indexOf(r))throw new Error((0,a.default)(10,r))}else o=o.split(",");return o=o.map((e=>parseFloat(e))),{type:n,values:o,colorSpace:r}}function s(e){const{type:t,colorSpace:n}=e;let{values:r}=e;return-1!==t.indexOf("rgb")?r=r.map(((e,t)=>t<3?parseInt(e,10):e)):-1!==t.indexOf("hsl")&&(r[1]=`${r[1]}%`,r[2]=`${r[2]}%`),r=-1!==t.indexOf("color")?`${n} ${r.join(" ")}`:`${r.join(", ")}`,`${t}(${r})`}function u(e){let t="hsl"===(e=l(e)).type||"hsla"===e.type?l(function(e){e=l(e);const{values:t}=e,n=t[0],r=t[1]/100,a=t[2]/100,o=r*Math.min(a,1-a),i=(e,t=(e+n/30)%12)=>a-o*Math.max(Math.min(t-3,9-t,1),-1);let u="rgb";const c=[Math.round(255*i(0)),Math.round(255*i(8)),Math.round(255*i(4))];return"hsla"===e.type&&(u+="a",c.push(t[3])),s({type:u,values:c})}(e)).values:e.values;return t=t.map((t=>("color"!==e.type&&(t/=255),t<=.03928?t/12.92:((t+.055)/1.055)**2.4))),Number((.2126*t[0]+.7152*t[1]+.0722*t[2]).toFixed(3))}function c(e,t){if(e=l(e),t=i(t),-1!==e.type.indexOf("hsl"))e.values[2]*=1-t;else if(-1!==e.type.indexOf("rgb")||-1!==e.type.indexOf("color"))for(let n=0;n<3;n+=1)e.values[n]*=1-t;return s(e)}function d(e,t){if(e=l(e),t=i(t),-1!==e.type.indexOf("hsl"))e.values[2]+=(100-e.values[2])*t;else if(-1!==e.type.indexOf("rgb"))for(let n=0;n<3;n+=1)e.values[n]+=(255-e.values[n])*t;else if(-1!==e.type.indexOf("color"))for(let n=0;n<3;n+=1)e.values[n]+=(1-e.values[n])*t;return s(e)}},7593:(e,t,n)=>{"use strict";var r=n(6784);t.Ay=function(e={}){const{themeId:t,defaultTheme:n=h,rootShouldForwardProp:r=m,slotShouldForwardProp:s=m}=e,c=e=>(0,u.default)((0,a.default)({},e,{theme:g((0,a.default)({},e,{defaultTheme:n,themeId:t}))}));return c.__mui_systemSx=!0,(e,u={})=>{(0,i.internal_processStyles)(e,(e=>e.filter((e=>!(null!=e&&e.__mui_systemSx)))));const{name:d,slot:f,skipVariantsResolver:h,skipSx:b,overridesResolver:x=y(A(f))}=u,E=(0,o.default)(u,p),C=void 0!==h?h:f&&"Root"!==f&&"root"!==f||!1,w=b||!1;let k=m;"Root"===f||"root"===f?k=r:f?k=s:function(e){return"string"==typeof e&&e.charCodeAt(0)>96}(e)&&(k=void 0);const S=(0,i.default)(e,(0,a.default)({shouldForwardProp:k,label:void 0},E)),_=e=>"function"==typeof e&&e.__emotion_real!==e||(0,l.isPlainObject)(e)?r=>v(e,(0,a.default)({},r,{theme:g({theme:r.theme,defaultTheme:n,themeId:t})})):e,B=(r,...o)=>{let i=_(r);const l=o?o.map(_):[];d&&x&&l.push((e=>{const r=g((0,a.default)({},e,{defaultTheme:n,themeId:t}));if(!r.components||!r.components[d]||!r.components[d].styleOverrides)return null;const o=r.components[d].styleOverrides,i={};return Object.entries(o).forEach((([t,n])=>{i[t]=v(n,(0,a.default)({},e,{theme:r}))})),x(e,i)})),d&&!C&&l.push((e=>{var r;const o=g((0,a.default)({},e,{defaultTheme:n,themeId:t}));return v({variants:null==o||null==(r=o.components)||null==(r=r[d])?void 0:r.variants},(0,a.default)({},e,{theme:o}))})),w||l.push(c);const s=l.length-o.length;if(Array.isArray(r)&&s>0){const e=new Array(s).fill("");i=[...r,...e],i.raw=[...r.raw,...e]}const u=S(i,...l);return e.muiName&&(u.muiName=e.muiName),u};return S.withConfig&&(B.withConfig=S.withConfig),B}};var a=r(n(8304)),o=r(n(739)),i=function(e,t){if(e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var n=f(t);if(n&&n.has(e))return n.get(e);var r={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if("default"!==o&&Object.prototype.hasOwnProperty.call(e,o)){var i=a?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(r,o,i):r[o]=e[o]}return r.default=e,n&&n.set(e,r),r}(n(976)),l=n(5267),s=(r(n(8153)),r(n(1172)),r(n(82))),u=r(n(3581));const c=["ownerState"],d=["variants"],p=["name","slot","skipVariantsResolver","skipSx","overridesResolver"];function f(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,n=new WeakMap;return(f=function(e){return e?n:t})(e)}function m(e){return"ownerState"!==e&&"theme"!==e&&"sx"!==e&&"as"!==e}const h=(0,s.default)(),A=e=>e?e.charAt(0).toLowerCase()+e.slice(1):e;function g({defaultTheme:e,theme:t,themeId:n}){return r=t,0===Object.keys(r).length?e:t[n]||t;var r}function y(e){return e?(t,n)=>n[e]:null}function v(e,t){let{ownerState:n}=t,r=(0,o.default)(t,c);const i="function"==typeof e?e((0,a.default)({ownerState:n},r)):e;if(Array.isArray(i))return i.flatMap((e=>v(e,(0,a.default)({ownerState:n},r))));if(i&&"object"==typeof i&&Array.isArray(i.variants)){const{variants:e=[]}=i;let t=(0,o.default)(i,d);return e.forEach((e=>{let o=!0;"function"==typeof e.props?o=e.props((0,a.default)({ownerState:n},r,n)):Object.keys(e.props).forEach((t=>{(null==n?void 0:n[t])!==e.props[t]&&r[t]!==e.props[t]&&(o=!1)})),o&&(Array.isArray(t)||(t=[t]),t.push("function"==typeof e.style?e.style((0,a.default)({ownerState:n},r,n)):e.style))})),t}return i}},2736:(e,t,n)=>{"use strict";n.d(t,{EU:()=>i,NI:()=>o,vf:()=>l,zu:()=>r});const r={xs:0,sm:600,md:900,lg:1200,xl:1536},a={keys:["xs","sm","md","lg","xl"],up:e=>`@media (min-width:${r[e]}px)`};function o(e,t,n){const o=e.theme||{};if(Array.isArray(t)){const e=o.breakpoints||a;return t.reduce(((r,a,o)=>(r[e.up(e.keys[o])]=n(t[o]),r)),{})}if("object"==typeof t){const e=o.breakpoints||a;return Object.keys(t).reduce(((a,o)=>{if(-1!==Object.keys(e.values||r).indexOf(o))a[e.up(o)]=n(t[o],o);else{const e=o;a[e]=t[e]}return a}),{})}return n(t)}function i(e={}){var t;return(null==(t=e.keys)?void 0:t.reduce(((t,n)=>(t[e.up(n)]={},t)),{}))||{}}function l(e,t){return e.reduce(((e,t)=>{const n=e[t];return(!n||0===Object.keys(n).length)&&delete e[t],e}),t)}},6196:(e,t,n)=>{"use strict";function r(e,t){const n=this;if(n.vars&&"function"==typeof n.getColorSchemeSelector){const r=n.getColorSchemeSelector(e).replace(/(\[[^\]]+\])/,"*:where($1)");return{[r]:t}}return n.palette.mode===e?t:{}}n.d(t,{A:()=>r})},9898:(e,t,n)=>{"use strict";n.d(t,{A:()=>l});var r=n(9257),a=n(8102);const o=["values","unit","step"],i=e=>{const t=Object.keys(e).map((t=>({key:t,val:e[t]})))||[];return t.sort(((e,t)=>e.val-t.val)),t.reduce(((e,t)=>(0,a.A)({},e,{[t.key]:t.val})),{})};function l(e){const{values:t={xs:0,sm:600,md:900,lg:1200,xl:1536},unit:n="px",step:l=5}=e,s=(0,r.A)(e,o),u=i(t),c=Object.keys(u);function d(e){return`@media (min-width:${"number"==typeof t[e]?t[e]:e}${n})`}function p(e){return`@media (max-width:${("number"==typeof t[e]?t[e]:e)-l/100}${n})`}function f(e,r){const a=c.indexOf(r);return`@media (min-width:${"number"==typeof t[e]?t[e]:e}${n}) and (max-width:${(-1!==a&&"number"==typeof t[c[a]]?t[c[a]]:r)-l/100}${n})`}return(0,a.A)({keys:c,values:u,up:d,down:p,between:f,only:function(e){return c.indexOf(e)+1<c.length?f(e,c[c.indexOf(e)+1]):d(e)},not:function(e){const t=c.indexOf(e);return 0===t?d(c[1]):t===c.length-1?p(c[t]):f(e,c[c.indexOf(e)+1]).replace("@media","@media not all and")},unit:n},s)}},8953:(e,t,n)=>{"use strict";n.d(t,{A:()=>f});var r=n(8102),a=n(9257),o=n(6121),i=n(9898);const l={borderRadius:4};var s=n(4612),u=n(2927),c=n(8624),d=n(6196);const p=["breakpoints","palette","spacing","shape"],f=function(e={},...t){const{breakpoints:n={},palette:f={},spacing:m,shape:h={}}=e,A=(0,a.A)(e,p),g=(0,i.A)(n),y=function(e=8){if(e.mui)return e;const t=(0,s.LX)({spacing:e}),n=(...e)=>(0===e.length?[1]:e).map((e=>{const n=t(e);return"number"==typeof n?`${n}px`:n})).join(" ");return n.mui=!0,n}(m);let v=(0,o.A)({breakpoints:g,direction:"ltr",components:{},palette:(0,r.A)({mode:"light"},f),spacing:y,shape:(0,r.A)({},l,h)},A);return v.applyStyles=d.A,v=t.reduce(((e,t)=>(0,o.A)(e,t)),v),v.unstable_sxConfig=(0,r.A)({},c.A,null==A?void 0:A.unstable_sxConfig),v.unstable_sx=function(e){return(0,u.A)({sx:e,theme:this})},v}},82:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r.A,private_createBreakpoints:()=>a.A,unstable_applyStyles:()=>o.A});var r=n(8953),a=n(9898),o=n(6196)},1251:(e,t,n)=>{"use strict";n.d(t,{A:()=>a});var r=n(6121);const a=function(e,t){return t?(0,r.A)(e,t,{clone:!1}):e}},4612:(e,t,n)=>{"use strict";n.d(t,{LX:()=>m,MA:()=>f,_W:()=>h,Lc:()=>g,Ms:()=>y});var r=n(2736),a=n(1421),o=n(1251);const i={m:"margin",p:"padding"},l={t:"Top",r:"Right",b:"Bottom",l:"Left",x:["Left","Right"],y:["Top","Bottom"]},s={marginX:"mx",marginY:"my",paddingX:"px",paddingY:"py"},u=function(e){const t={};return e=>(void 0===t[e]&&(t[e]=(e=>{if(e.length>2){if(!s[e])return[e];e=s[e]}const[t,n]=e.split(""),r=i[t],a=l[n]||"";return Array.isArray(a)?a.map((e=>r+e)):[r+a]})(e)),t[e])}(),c=["m","mt","mr","mb","ml","mx","my","margin","marginTop","marginRight","marginBottom","marginLeft","marginX","marginY","marginInline","marginInlineStart","marginInlineEnd","marginBlock","marginBlockStart","marginBlockEnd"],d=["p","pt","pr","pb","pl","px","py","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","paddingX","paddingY","paddingInline","paddingInlineStart","paddingInlineEnd","paddingBlock","paddingBlockStart","paddingBlockEnd"],p=[...c,...d];function f(e,t,n,r){var o;const i=null!=(o=(0,a.Yn)(e,t,!1))?o:n;return"number"==typeof i?e=>"string"==typeof e?e:i*e:Array.isArray(i)?e=>"string"==typeof e?e:i[e]:"function"==typeof i?i:()=>{}}function m(e){return f(e,"spacing",8)}function h(e,t){if("string"==typeof t||null==t)return t;const n=e(Math.abs(t));return t>=0?n:"number"==typeof n?-n:`-${n}`}function A(e,t){const n=m(e.theme);return Object.keys(e).map((a=>function(e,t,n,a){if(-1===t.indexOf(n))return null;const o=function(e,t){return n=>e.reduce(((e,r)=>(e[r]=h(t,n),e)),{})}(u(n),a),i=e[n];return(0,r.NI)(e,i,o)}(e,t,a,n))).reduce(o.A,{})}function g(e){return A(e,c)}function y(e){return A(e,d)}function v(e){return A(e,p)}g.propTypes={},g.filterProps=c,y.propTypes={},y.filterProps=d,v.propTypes={},v.filterProps=p},1421:(e,t,n)=>{"use strict";n.d(t,{Ay:()=>l,BO:()=>i,Yn:()=>o});var r=n(5235),a=n(2736);function o(e,t,n=!0){if(!t||"string"!=typeof t)return null;if(e&&e.vars&&n){const n=`vars.${t}`.split(".").reduce(((e,t)=>e&&e[t]?e[t]:null),e);if(null!=n)return n}return t.split(".").reduce(((e,t)=>e&&null!=e[t]?e[t]:null),e)}function i(e,t,n,r=n){let a;return a="function"==typeof e?e(n):Array.isArray(e)?e[n]||r:o(e,n)||r,t&&(a=t(a,r,e)),a}const l=function(e){const{prop:t,cssProperty:n=e.prop,themeKey:l,transform:s}=e,u=e=>{if(null==e[t])return null;const u=e[t],c=o(e.theme,l)||{};return(0,a.NI)(e,u,(e=>{let a=i(c,s,e);return e===a&&"string"==typeof e&&(a=i(c,s,`${t}${"default"===e?"":(0,r.A)(e)}`,e)),!1===n?a:{[n]:a}}))};return u.propTypes={},u.filterProps=[t],u}},8624:(e,t,n)=>{"use strict";n.d(t,{A:()=>O});var r=n(4612),a=n(1421),o=n(1251);const i=function(...e){const t=e.reduce(((e,t)=>(t.filterProps.forEach((n=>{e[n]=t})),e)),{}),n=e=>Object.keys(e).reduce(((n,r)=>t[r]?(0,o.A)(n,t[r](e)):n),{});return n.propTypes={},n.filterProps=e.reduce(((e,t)=>e.concat(t.filterProps)),[]),n};var l=n(2736);function s(e){return"number"!=typeof e?e:`${e}px solid`}function u(e,t){return(0,a.Ay)({prop:e,themeKey:"borders",transform:t})}const c=u("border",s),d=u("borderTop",s),p=u("borderRight",s),f=u("borderBottom",s),m=u("borderLeft",s),h=u("borderColor"),A=u("borderTopColor"),g=u("borderRightColor"),y=u("borderBottomColor"),v=u("borderLeftColor"),b=u("outline",s),x=u("outlineColor"),E=e=>{if(void 0!==e.borderRadius&&null!==e.borderRadius){const t=(0,r.MA)(e.theme,"shape.borderRadius",4,"borderRadius"),n=e=>({borderRadius:(0,r._W)(t,e)});return(0,l.NI)(e,e.borderRadius,n)}return null};E.propTypes={},E.filterProps=["borderRadius"],i(c,d,p,f,m,h,A,g,y,v,E,b,x);const C=e=>{if(void 0!==e.gap&&null!==e.gap){const t=(0,r.MA)(e.theme,"spacing",8,"gap"),n=e=>({gap:(0,r._W)(t,e)});return(0,l.NI)(e,e.gap,n)}return null};C.propTypes={},C.filterProps=["gap"];const w=e=>{if(void 0!==e.columnGap&&null!==e.columnGap){const t=(0,r.MA)(e.theme,"spacing",8,"columnGap"),n=e=>({columnGap:(0,r._W)(t,e)});return(0,l.NI)(e,e.columnGap,n)}return null};w.propTypes={},w.filterProps=["columnGap"];const k=e=>{if(void 0!==e.rowGap&&null!==e.rowGap){const t=(0,r.MA)(e.theme,"spacing",8,"rowGap"),n=e=>({rowGap:(0,r._W)(t,e)});return(0,l.NI)(e,e.rowGap,n)}return null};function S(e,t){return"grey"===t?t:e}function _(e){return e<=1&&0!==e?100*e+"%":e}k.propTypes={},k.filterProps=["rowGap"],i(C,w,k,(0,a.Ay)({prop:"gridColumn"}),(0,a.Ay)({prop:"gridRow"}),(0,a.Ay)({prop:"gridAutoFlow"}),(0,a.Ay)({prop:"gridAutoColumns"}),(0,a.Ay)({prop:"gridAutoRows"}),(0,a.Ay)({prop:"gridTemplateColumns"}),(0,a.Ay)({prop:"gridTemplateRows"}),(0,a.Ay)({prop:"gridTemplateAreas"}),(0,a.Ay)({prop:"gridArea"})),i((0,a.Ay)({prop:"color",themeKey:"palette",transform:S}),(0,a.Ay)({prop:"bgcolor",cssProperty:"backgroundColor",themeKey:"palette",transform:S}),(0,a.Ay)({prop:"backgroundColor",themeKey:"palette",transform:S}));const B=(0,a.Ay)({prop:"width",transform:_}),T=e=>{if(void 0!==e.maxWidth&&null!==e.maxWidth){const t=t=>{var n,r;const a=(null==(n=e.theme)||null==(n=n.breakpoints)||null==(n=n.values)?void 0:n[t])||l.zu[t];return a?"px"!==(null==(r=e.theme)||null==(r=r.breakpoints)?void 0:r.unit)?{maxWidth:`${a}${e.theme.breakpoints.unit}`}:{maxWidth:a}:{maxWidth:_(t)}};return(0,l.NI)(e,e.maxWidth,t)}return null};T.filterProps=["maxWidth"];const j=(0,a.Ay)({prop:"minWidth",transform:_}),N=(0,a.Ay)({prop:"height",transform:_}),R=(0,a.Ay)({prop:"maxHeight",transform:_}),P=(0,a.Ay)({prop:"minHeight",transform:_}),O=((0,a.Ay)({prop:"size",cssProperty:"width",transform:_}),(0,a.Ay)({prop:"size",cssProperty:"height",transform:_}),i(B,T,j,N,R,P,(0,a.Ay)({prop:"boxSizing"})),{border:{themeKey:"borders",transform:s},borderTop:{themeKey:"borders",transform:s},borderRight:{themeKey:"borders",transform:s},borderBottom:{themeKey:"borders",transform:s},borderLeft:{themeKey:"borders",transform:s},borderColor:{themeKey:"palette"},borderTopColor:{themeKey:"palette"},borderRightColor:{themeKey:"palette"},borderBottomColor:{themeKey:"palette"},borderLeftColor:{themeKey:"palette"},outline:{themeKey:"borders",transform:s},outlineColor:{themeKey:"palette"},borderRadius:{themeKey:"shape.borderRadius",style:E},color:{themeKey:"palette",transform:S},bgcolor:{themeKey:"palette",cssProperty:"backgroundColor",transform:S},backgroundColor:{themeKey:"palette",transform:S},p:{style:r.Ms},pt:{style:r.Ms},pr:{style:r.Ms},pb:{style:r.Ms},pl:{style:r.Ms},px:{style:r.Ms},py:{style:r.Ms},padding:{style:r.Ms},paddingTop:{style:r.Ms},paddingRight:{style:r.Ms},paddingBottom:{style:r.Ms},paddingLeft:{style:r.Ms},paddingX:{style:r.Ms},paddingY:{style:r.Ms},paddingInline:{style:r.Ms},paddingInlineStart:{style:r.Ms},paddingInlineEnd:{style:r.Ms},paddingBlock:{style:r.Ms},paddingBlockStart:{style:r.Ms},paddingBlockEnd:{style:r.Ms},m:{style:r.Lc},mt:{style:r.Lc},mr:{style:r.Lc},mb:{style:r.Lc},ml:{style:r.Lc},mx:{style:r.Lc},my:{style:r.Lc},margin:{style:r.Lc},marginTop:{style:r.Lc},marginRight:{style:r.Lc},marginBottom:{style:r.Lc},marginLeft:{style:r.Lc},marginX:{style:r.Lc},marginY:{style:r.Lc},marginInline:{style:r.Lc},marginInlineStart:{style:r.Lc},marginInlineEnd:{style:r.Lc},marginBlock:{style:r.Lc},marginBlockStart:{style:r.Lc},marginBlockEnd:{style:r.Lc},displayPrint:{cssProperty:!1,transform:e=>({"@media print":{display:e}})},display:{},overflow:{},textOverflow:{},visibility:{},whiteSpace:{},flexBasis:{},flexDirection:{},flexWrap:{},justifyContent:{},alignItems:{},alignContent:{},order:{},flex:{},flexGrow:{},flexShrink:{},alignSelf:{},justifyItems:{},justifySelf:{},gap:{style:C},rowGap:{style:k},columnGap:{style:w},gridColumn:{},gridRow:{},gridAutoFlow:{},gridAutoColumns:{},gridAutoRows:{},gridTemplateColumns:{},gridTemplateRows:{},gridTemplateAreas:{},gridArea:{},position:{},zIndex:{themeKey:"zIndex"},top:{},right:{},bottom:{},left:{},boxShadow:{themeKey:"shadows"},width:{transform:_},maxWidth:{style:T},minWidth:{transform:_},height:{transform:_},maxHeight:{transform:_},minHeight:{transform:_},boxSizing:{},fontFamily:{themeKey:"typography"},fontSize:{themeKey:"typography"},fontStyle:{themeKey:"typography"},fontWeight:{themeKey:"typography"},letterSpacing:{},textTransform:{},lineHeight:{},textAlign:{},typography:{cssProperty:!1,themeKey:"typography"}})},523:(e,t,n)=>{"use strict";n.d(t,{A:()=>u});var r=n(8102),a=n(9257),o=n(6121),i=n(8624);const l=["sx"],s=e=>{var t,n;const r={systemProps:{},otherProps:{}},a=null!=(t=null==e||null==(n=e.theme)?void 0:n.unstable_sxConfig)?t:i.A;return Object.keys(e).forEach((t=>{a[t]?r.systemProps[t]=e[t]:r.otherProps[t]=e[t]})),r};function u(e){const{sx:t}=e,n=(0,a.A)(e,l),{systemProps:i,otherProps:u}=s(n);let c;return c=Array.isArray(t)?[i,...t]:"function"==typeof t?(...e)=>{const n=t(...e);return(0,o.Q)(n)?(0,r.A)({},i,n):i}:(0,r.A)({},i,t),(0,r.A)({},u,{sx:c})}},3581:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r.A,extendSxProp:()=>a.A,unstable_createStyleFunctionSx:()=>r.k,unstable_defaultSxConfig:()=>o.A});var r=n(2927),a=n(523),o=n(8624)},2927:(e,t,n)=>{"use strict";n.d(t,{A:()=>c,k:()=>s});var r=n(5235),a=n(1251),o=n(1421),i=n(2736),l=n(8624);function s(){function e(e,t,n,a){const l={[e]:t,theme:n},s=a[e];if(!s)return{[e]:t};const{cssProperty:u=e,themeKey:c,transform:d,style:p}=s;if(null==t)return null;if("typography"===c&&"inherit"===t)return{[e]:t};const f=(0,o.Yn)(n,c)||{};return p?p(l):(0,i.NI)(l,t,(t=>{let n=(0,o.BO)(f,d,t);return t===n&&"string"==typeof t&&(n=(0,o.BO)(f,d,`${e}${"default"===t?"":(0,r.A)(t)}`,t)),!1===u?n:{[u]:n}}))}return function t(n){var r;const{sx:o,theme:s={}}=n||{};if(!o)return null;const u=null!=(r=s.unstable_sxConfig)?r:l.A;function c(n){let r=n;if("function"==typeof n)r=n(s);else if("object"!=typeof n)return n;if(!r)return null;const o=(0,i.EU)(s.breakpoints),l=Object.keys(o);let c=o;return Object.keys(r).forEach((n=>{const o="function"==typeof(l=r[n])?l(s):l;var l;if(null!=o)if("object"==typeof o)if(u[n])c=(0,a.A)(c,e(n,o,s,u));else{const e=(0,i.NI)({theme:s},o,(e=>({[n]:e})));!function(...e){const t=e.reduce(((e,t)=>e.concat(Object.keys(t))),[]),n=new Set(t);return e.every((e=>n.size===Object.keys(e).length))}(e,o)?c=(0,a.A)(c,e):c[n]=t({sx:o,theme:s})}else c=(0,a.A)(c,e(n,o,s,u))})),(0,i.vf)(l,c)}return Array.isArray(o)?o.map(c):c(o)}}const u=s();u.filterProps=["sx"];const c=u},1027:(e,t,n)=>{"use strict";n.d(t,{A:()=>a});const r=e=>e,a=(()=>{let e=r;return{configure(t){e=t},generate:t=>e(t),reset(){e=r}}})()},5235:(e,t,n)=>{"use strict";n.d(t,{A:()=>a});var r=n(7425);function a(e){if("string"!=typeof e)throw new Error((0,r.A)(7));return e.charAt(0).toUpperCase()+e.slice(1)}},8153:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r.A});var r=n(5235)},8859:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});const r=function(e,t=Number.MIN_SAFE_INTEGER,n=Number.MAX_SAFE_INTEGER){return Math.max(t,Math.min(e,n))}},1023:(e,t,n)=>{"use strict";function r(e,t,n=void 0){const r={};return Object.keys(e).forEach((a=>{r[a]=e[a].reduce(((e,r)=>{if(r){const a=t(r);""!==a&&e.push(a),n&&n[r]&&e.push(n[r])}return e}),[]).join(" ")})),r}n.d(t,{A:()=>r})},7605:(e,t,n)=>{"use strict";function r(...e){return e.reduce(((e,t)=>null==t?e:function(...n){e.apply(this,n),t.apply(this,n)}),(()=>{}))}n.d(t,{A:()=>r})},1493:(e,t,n)=>{"use strict";function r(e,t=166){let n;function r(...r){clearTimeout(n),n=setTimeout((()=>{e.apply(this,r)}),t)}return r.clear=()=>{clearTimeout(n)},r}n.d(t,{A:()=>r})},6121:(e,t,n)=>{"use strict";n.d(t,{A:()=>i,Q:()=>a});var r=n(8102);function a(e){if("object"!=typeof e||null===e)return!1;const t=Object.getPrototypeOf(e);return!(null!==t&&t!==Object.prototype&&null!==Object.getPrototypeOf(t)||Symbol.toStringTag in e||Symbol.iterator in e)}function o(e){if(!a(e))return e;const t={};return Object.keys(e).forEach((n=>{t[n]=o(e[n])})),t}function i(e,t,n={clone:!0}){const l=n.clone?(0,r.A)({},e):e;return a(e)&&a(t)&&Object.keys(t).forEach((r=>{a(t[r])&&Object.prototype.hasOwnProperty.call(e,r)&&a(e[r])?l[r]=i(e[r],t[r],n):n.clone?l[r]=a(t[r])?o(t[r]):t[r]:l[r]=t[r]})),l}},5267:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r.A,isPlainObject:()=>r.Q});var r=n(6121)},7425:(e,t,n)=>{"use strict";function r(e){let t="https://mui.com/production-error/?code="+e;for(let e=1;e<arguments.length;e+=1)t+="&args[]="+encodeURIComponent(arguments[e]);return"Minified MUI error #"+e+"; visit "+t+" for the full message."}n.d(t,{A:()=>r})},6284:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r.A});var r=n(7425)},6733:(e,t,n)=>{"use strict";n.d(t,{Ay:()=>o});var r=n(1027);const a={active:"active",checked:"checked",completed:"completed",disabled:"disabled",error:"error",expanded:"expanded",focused:"focused",focusVisible:"focusVisible",open:"open",readOnly:"readOnly",required:"required",selected:"selected"};function o(e,t,n="Mui"){const o=a[t];return o?`${n}-${o}`:`${r.A.generate(e)}-${t}`}},9009:(e,t,n)=>{"use strict";n.d(t,{A:()=>a});var r=n(6733);function a(e,t,n="Mui"){const a={};return t.forEach((t=>{a[t]=(0,r.Ay)(e,t,n)})),a}},1172:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s,getFunctionName:()=>o});var r=n(6707);const a=/^\s*function(?:\s|\s*\/\*.*\*\/\s*)+([^(\s/]*)\s*/;function o(e){const t=`${e}`.match(a);return t&&t[1]||""}function i(e,t=""){return e.displayName||e.name||o(e)||t}function l(e,t,n){const r=i(t);return e.displayName||(""!==r?`${n}(${r})`:n)}function s(e){if(null!=e){if("string"==typeof e)return e;if("function"==typeof e)return i(e,"Component");if("object"==typeof e)switch(e.$$typeof){case r.ForwardRef:return l(e,e.render,"ForwardRef");case r.Memo:return l(e,e.type,"memo");default:return}}}},713:(e,t,n)=>{"use strict";function r(e){return e&&e.ownerDocument||document}n.d(t,{A:()=>r})},2097:(e,t,n)=>{"use strict";n.d(t,{A:()=>a});var r=n(713);function a(e){return(0,r.A)(e).defaultView||window}},2215:(e,t,n)=>{"use strict";n.d(t,{A:()=>a});var r=n(8102);function a(e,t){const n=(0,r.A)({},t);return Object.keys(e).forEach((o=>{if(o.toString().match(/^(components|slots)$/))n[o]=(0,r.A)({},e[o],n[o]);else if(o.toString().match(/^(componentsProps|slotProps)$/)){const i=e[o]||{},l=t[o];n[o]={},l&&Object.keys(l)?i&&Object.keys(i)?(n[o]=(0,r.A)({},l),Object.keys(i).forEach((e=>{n[o][e]=a(i[e],l[e])}))):n[o]=l:n[o]=i}else void 0===n[o]&&(n[o]=e[o])})),n}},1849:(e,t,n)=>{"use strict";function r(e,t){"function"==typeof e?e(t):e&&(e.current=t)}n.d(t,{A:()=>r})},1789:(e,t,n)=>{"use strict";n.d(t,{A:()=>a});var r=n(3696);const a="undefined"!=typeof window?r.useLayoutEffect:r.useEffect},3183:(e,t,n)=>{"use strict";n.d(t,{A:()=>o});var r=n(3696),a=n(1789);const o=function(e){const t=r.useRef(e);return(0,a.A)((()=>{t.current=e})),r.useRef(((...e)=>(0,t.current)(...e))).current}},5591:(e,t,n)=>{"use strict";n.d(t,{A:()=>o});var r=n(3696),a=n(1849);function o(...e){return r.useMemo((()=>e.every((e=>null==e))?null:t=>{e.forEach((e=>{(0,a.A)(e,t)}))}),e)}},4553:(e,t,n)=>{"use strict";var r;n.d(t,{A:()=>l});var a=n(3696);let o=0;const i=(r||(r=n.t(a,2)))["useId".toString()];function l(e){if(void 0!==i){const t=i();return null!=e?e:t}return function(e){const[t,n]=a.useState(e),r=e||t;return a.useEffect((()=>{null==t&&(o+=1,n(`mui-${o}`))}),[t]),r}(e)}},8016:(e,t,n)=>{"use strict";n.d(t,{E:()=>i,A:()=>l});var r=n(3696);const a={},o=[];class i{constructor(){this.currentId=null,this.clear=()=>{null!==this.currentId&&(clearTimeout(this.currentId),this.currentId=null)},this.disposeEffect=()=>this.clear}static create(){return new i}start(e,t){this.clear(),this.currentId=setTimeout((()=>{this.currentId=null,t()}),e)}}function l(){const e=function(e,t){const n=r.useRef(a);return n.current===a&&(n.current=e(void 0)),n}(i.create).current;var t;return t=e.disposeEffect,r.useEffect(t,o),e}},108:(e,t)=>{"use strict";Symbol.for("react.element"),Symbol.for("react.portal"),Symbol.for("react.fragment"),Symbol.for("react.strict_mode"),Symbol.for("react.profiler"),Symbol.for("react.provider"),Symbol.for("react.context"),Symbol.for("react.server_context");var n=Symbol.for("react.forward_ref"),r=(Symbol.for("react.suspense"),Symbol.for("react.suspense_list"),Symbol.for("react.memo"));Symbol.for("react.lazy"),Symbol.for("react.offscreen");Symbol.for("react.module.reference"),t.ForwardRef=n,t.Memo=r},6707:(e,t,n)=>{"use strict";e.exports=n(108)},8301:(e,t,n)=>{"use strict";n.d(t,{A:()=>l});var r=n(4942),a=n.n(r),o=n(278),i=n.n(o)()(a());i.push([e.id,".page__home {\n  margin-top: 100px;\n  padding: 20px 40px;\n}\n\n.page__home .home__wrapper {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n}\n\n.content-frame {\n  line-height: 1.75;\n}\n\n.image-frame {\n  max-height: 500px;\n}\n\n.home-image {\n  object-fit: contain;\n  width: 100%;\n  height: 100%;\n}\n","",{version:3,sources:["webpack://./app/about/style.css"],names:[],mappings:"AAAA;EACE,iBAAiB;EACjB,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,8BAA8B;AAChC;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,mBAAmB;EACnB,WAAW;EACX,YAAY;AACd",sourcesContent:[".page__home {\n  margin-top: 100px;\n  padding: 20px 40px;\n}\n\n.page__home .home__wrapper {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n}\n\n.content-frame {\n  line-height: 1.75;\n}\n\n.image-frame {\n  max-height: 500px;\n}\n\n.home-image {\n  object-fit: contain;\n  width: 100%;\n  height: 100%;\n}\n"],sourceRoot:""}]);const l=i},7774:(e,t,n)=>{"use strict";n.d(t,{A:()=>u});var r=n(4942),a=n.n(r),o=n(278),i=n.n(o),l=n(3632),s=i()(a());s.i(l.A),s.push([e.id,".page__auth {\n  display: flex;\n  place-content: center;\n  height: calc(100vh - var(--header-height));\n}\n","",{version:3,sources:["webpack://./app/auth/style.css"],names:[],mappings:"AAEA;EACE,aAAa;EACb,qBAAqB;EACrB,0CAA0C;AAC5C",sourcesContent:['@import "../vars.css";\n\n.page__auth {\n  display: flex;\n  place-content: center;\n  height: calc(100vh - var(--header-height));\n}\n'],sourceRoot:""}]);const u=s},6130:(e,t,n)=>{"use strict";n.d(t,{A:()=>u});var r=n(4942),a=n.n(r),o=n(278),i=n.n(o),l=n(3632),s=i()(a());s.i(l.A),s.push([e.id,'.page__calendar {\n  border: 1px solid black;\n  padding: 10px;\n  padding-top: 20px;\n  min-height: calc(100vh - var(--header-height));\n  display: grid;\n  grid-template-areas:\n    "sidebar controls"\n    "sidebar content";\n  grid-template-columns: 300px 1fr;\n  grid-template-rows: auto 1fr;\n  background-color: rgba(255, 255, 255, 0.7);\n}\n\n/* .page__calendar.loading {\n  background-color: rgba(255, 255, 255, 0.5);\n  pointer-events: none;\n} */\n\n.calendar__forms {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 10px;\n}\n\n.calendar__controls {\n  grid-area: controls;\n}\n\n.calendar__content {\n  grid-area: content;\n}\n',"",{version:3,sources:["webpack://./app/calendar/style.css"],names:[],mappings:"AAEA;EACE,uBAAuB;EACvB,aAAa;EACb,iBAAiB;EACjB,8CAA8C;EAC9C,aAAa;EACb;;qBAEmB;EACnB,gCAAgC;EAChC,4BAA4B;EAC5B,0CAA0C;AAC5C;;AAEA;;;GAGG;;AAEH;EACE,aAAa;EACb,8BAA8B;EAC9B,SAAS;AACX;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,kBAAkB;AACpB",sourcesContent:['@import "../vars.css";\n\n.page__calendar {\n  border: 1px solid black;\n  padding: 10px;\n  padding-top: 20px;\n  min-height: calc(100vh - var(--header-height));\n  display: grid;\n  grid-template-areas:\n    "sidebar controls"\n    "sidebar content";\n  grid-template-columns: 300px 1fr;\n  grid-template-rows: auto 1fr;\n  background-color: rgba(255, 255, 255, 0.7);\n}\n\n/* .page__calendar.loading {\n  background-color: rgba(255, 255, 255, 0.5);\n  pointer-events: none;\n} */\n\n.calendar__forms {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 10px;\n}\n\n.calendar__controls {\n  grid-area: controls;\n}\n\n.calendar__content {\n  grid-area: content;\n}\n'],sourceRoot:""}]);const u=s},35:(e,t,n)=>{"use strict";n.d(t,{A:()=>l});var r=n(4942),a=n.n(r),o=n(278),i=n.n(o)()(a());i.push([e.id,".page__home {\n  margin-top: 100px;\n  padding: 20px 40px;\n}\n\n.page__home .home__wrapper {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n}\n\n.content-frame {\n  line-height: 1.75;\n}\n\n.image-frame {\n  max-height: 500px;\n}\n\n.home-image {\n  object-fit: contain;\n  width: 100%;\n  height: 100%;\n}\n","",{version:3,sources:["webpack://./app/main/style.css"],names:[],mappings:"AAAA;EACE,iBAAiB;EACjB,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,8BAA8B;AAChC;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,mBAAmB;EACnB,WAAW;EACX,YAAY;AACd",sourcesContent:[".page__home {\n  margin-top: 100px;\n  padding: 20px 40px;\n}\n\n.page__home .home__wrapper {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n}\n\n.content-frame {\n  line-height: 1.75;\n}\n\n.image-frame {\n  max-height: 500px;\n}\n\n.home-image {\n  object-fit: contain;\n  width: 100%;\n  height: 100%;\n}\n"],sourceRoot:""}]);const l=i},3632:(e,t,n)=>{"use strict";n.d(t,{A:()=>l});var r=n(4942),a=n.n(r),o=n(278),i=n.n(o)()(a());i.push([e.id,":root {\n  --header-height: 80px;\n}\n","",{version:3,sources:["webpack://./app/vars.css"],names:[],mappings:"AAAA;EACE,qBAAqB;AACvB",sourcesContent:[":root {\n  --header-height: 80px;\n}\n"],sourceRoot:""}]);const l=i},4086:(e,t,n)=>{"use strict";n.d(t,{A:()=>u});var r=n(4942),a=n.n(r),o=n(278),i=n.n(o),l=n(3632),s=i()(a());s.i(l.A),s.push([e.id,'.page__header {\n  background-color: rgba(101, 158, 237, 0.868);\n}\n\n.page__header .container {\n  display: grid;\n  grid-template-columns: 200px 1fr;\n  align-items: center;\n  justify-content: flex-start;\n  height: var(--header-height);\n  padding: 5px;\n}\n\n.header__logo_text {\n  font-size: 30px;\n  font-weight: 700;\n}\n\n.header__logo_text a:link,\n.header__logo_text a:visited {\n  text-decoration: none;\n  color: white;\n}\n\n.header__nav,\n.nav__list {\n  height: 100%;\n  margin-left: auto;\n}\n\n.nav__list {\n  display: flex;\n  flex-wrap: wrap;\n  list-style: none;\n  gap: 20px;\n  align-items: center;\n  padding-right: 40px;\n}\n\n.nav__link,\n.nav__link:link,\n.nav__link:visited {\n  color: white;\n  font-size: 1.25rem;\n  text-decoration: none;\n  position: relative;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-self: center;\n}\n\n.header__logo-link.active,\n.nav__link.active {\n  pointer-events: none;\n  cursor: default;\n}\n\n.nav__list-item {\n  display: flex;\n  align-items: center;\n  overflow: hidden;\n  height: 100%;\n}\n\n.nav__list-item:last-of-type {\n  justify-self: end;\n  margin-left: auto;\n}\n\n.nav__link::after {\n  content: "";\n  position: absolute;\n  left: -100%;\n  top: 70%;\n  width: 100%;\n  height: 2px;\n  transition: transform 0.3s ease;\n  border-bottom: 2px solid white;\n}\n\n.nav__list-item:hover .nav__link::after {\n  transform: translateX(100%);\n  transition: transform 0.3 ease;\n}\n\n.nav__link.active::after {\n  transform: translateX(100%);\n}\n',"",{version:3,sources:["webpack://./components/header/style.css"],names:[],mappings:"AAEA;EACE,4CAA4C;AAC9C;;AAEA;EACE,aAAa;EACb,gCAAgC;EAChC,mBAAmB;EACnB,2BAA2B;EAC3B,4BAA4B;EAC5B,YAAY;AACd;;AAEA;EACE,eAAe;EACf,gBAAgB;AAClB;;AAEA;;EAEE,qBAAqB;EACrB,YAAY;AACd;;AAEA;;EAEE,YAAY;EACZ,iBAAiB;AACnB;;AAEA;EACE,aAAa;EACb,eAAe;EACf,gBAAgB;EAChB,SAAS;EACT,mBAAmB;EACnB,mBAAmB;AACrB;;AAEA;;;EAGE,YAAY;EACZ,kBAAkB;EAClB,qBAAqB;EACrB,kBAAkB;EAClB,YAAY;EACZ,aAAa;EACb,mBAAmB;EACnB,oBAAoB;AACtB;;AAEA;;EAEE,oBAAoB;EACpB,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,gBAAgB;EAChB,YAAY;AACd;;AAEA;EACE,iBAAiB;EACjB,iBAAiB;AACnB;;AAEA;EACE,WAAW;EACX,kBAAkB;EAClB,WAAW;EACX,QAAQ;EACR,WAAW;EACX,WAAW;EACX,+BAA+B;EAC/B,8BAA8B;AAChC;;AAEA;EACE,2BAA2B;EAC3B,8BAA8B;AAChC;;AAEA;EACE,2BAA2B;AAC7B",sourcesContent:['@import "../../app/vars.css";\n\n.page__header {\n  background-color: rgba(101, 158, 237, 0.868);\n}\n\n.page__header .container {\n  display: grid;\n  grid-template-columns: 200px 1fr;\n  align-items: center;\n  justify-content: flex-start;\n  height: var(--header-height);\n  padding: 5px;\n}\n\n.header__logo_text {\n  font-size: 30px;\n  font-weight: 700;\n}\n\n.header__logo_text a:link,\n.header__logo_text a:visited {\n  text-decoration: none;\n  color: white;\n}\n\n.header__nav,\n.nav__list {\n  height: 100%;\n  margin-left: auto;\n}\n\n.nav__list {\n  display: flex;\n  flex-wrap: wrap;\n  list-style: none;\n  gap: 20px;\n  align-items: center;\n  padding-right: 40px;\n}\n\n.nav__link,\n.nav__link:link,\n.nav__link:visited {\n  color: white;\n  font-size: 1.25rem;\n  text-decoration: none;\n  position: relative;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-self: center;\n}\n\n.header__logo-link.active,\n.nav__link.active {\n  pointer-events: none;\n  cursor: default;\n}\n\n.nav__list-item {\n  display: flex;\n  align-items: center;\n  overflow: hidden;\n  height: 100%;\n}\n\n.nav__list-item:last-of-type {\n  justify-self: end;\n  margin-left: auto;\n}\n\n.nav__link::after {\n  content: "";\n  position: absolute;\n  left: -100%;\n  top: 70%;\n  width: 100%;\n  height: 2px;\n  transition: transform 0.3s ease;\n  border-bottom: 2px solid white;\n}\n\n.nav__list-item:hover .nav__link::after {\n  transform: translateX(100%);\n  transition: transform 0.3 ease;\n}\n\n.nav__link.active::after {\n  transform: translateX(100%);\n}\n'],sourceRoot:""}]);const u=s},9055:(e,t,n)=>{"use strict";n.d(t,{A:()=>l});var r=n(4942),a=n.n(r),o=n(278),i=n.n(o)()(a());i.push([e.id,'.month {\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  gap: 5px;\n  background-color: rgba(255, 255, 255, 0.9);\n  padding-top: 5px;\n}\n\n.date {\n  padding: 5px;\n  aspect-ratio: 9 / 7;\n  background-color: white;\n  border: 1px solid black;\n  border-radius: 3px;\n  overflow: hidden;\n}\n\n.date[data-tasks="0"] {\n  background-color: transparent;\n}\n\n.date:hover {\n  background-color: rgba(100 100 100 / 0.1);\n}\n\n.date__value {\n  font-weight: 700;\n}\n\n.date__link:link {\n  display: block;\n  color: black;\n  text-decoration: none;\n  border-bottom: 1px solid black;\n}\n\n.date.date_current {\n  font-weight: 600;\n  color: black;\n  border: 3px solid rgba(237, 126, 101, 0.868);\n}\n\n.date__task {\n  list-style-type: none;\n  padding: 5px;\n  border: 1px solid black;\n  border-radius: 3px;\n  background-color: rgba(61, 151, 53, 0.308);\n}\n\n.year__month-day_prev-month,\n.year__month-day_next-month {\n  filter: grayscale(1);\n  opacity: 0.5;\n}\n\n.task__link {\n  display: block;\n  height: 100%;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n}\n',"",{version:3,sources:["webpack://./components/month/style.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,qCAAqC;EACrC,QAAQ;EACR,0CAA0C;EAC1C,gBAAgB;AAClB;;AAEA;EACE,YAAY;EACZ,mBAAmB;EACnB,uBAAuB;EACvB,uBAAuB;EACvB,kBAAkB;EAClB,gBAAgB;AAClB;;AAEA;EACE,6BAA6B;AAC/B;;AAEA;EACE,yCAAyC;AAC3C;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,cAAc;EACd,YAAY;EACZ,qBAAqB;EACrB,8BAA8B;AAChC;;AAEA;EACE,gBAAgB;EAChB,YAAY;EACZ,4CAA4C;AAC9C;;AAEA;EACE,qBAAqB;EACrB,YAAY;EACZ,uBAAuB;EACvB,kBAAkB;EAClB,0CAA0C;AAC5C;;AAEA;;EAEE,oBAAoB;EACpB,YAAY;AACd;;AAEA;EACE,cAAc;EACd,YAAY;EACZ,gBAAgB;EAChB,mBAAmB;EACnB,uBAAuB;AACzB",sourcesContent:['.month {\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  gap: 5px;\n  background-color: rgba(255, 255, 255, 0.9);\n  padding-top: 5px;\n}\n\n.date {\n  padding: 5px;\n  aspect-ratio: 9 / 7;\n  background-color: white;\n  border: 1px solid black;\n  border-radius: 3px;\n  overflow: hidden;\n}\n\n.date[data-tasks="0"] {\n  background-color: transparent;\n}\n\n.date:hover {\n  background-color: rgba(100 100 100 / 0.1);\n}\n\n.date__value {\n  font-weight: 700;\n}\n\n.date__link:link {\n  display: block;\n  color: black;\n  text-decoration: none;\n  border-bottom: 1px solid black;\n}\n\n.date.date_current {\n  font-weight: 600;\n  color: black;\n  border: 3px solid rgba(237, 126, 101, 0.868);\n}\n\n.date__task {\n  list-style-type: none;\n  padding: 5px;\n  border: 1px solid black;\n  border-radius: 3px;\n  background-color: rgba(61, 151, 53, 0.308);\n}\n\n.year__month-day_prev-month,\n.year__month-day_next-month {\n  filter: grayscale(1);\n  opacity: 0.5;\n}\n\n.task__link {\n  display: block;\n  height: 100%;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n}\n'],sourceRoot:""}]);const l=i},2913:(e,t,n)=>{"use strict";n.d(t,{A:()=>l});var r=n(4942),a=n.n(r),o=n(278),i=n.n(o)()(a());i.push([e.id,".task-add {\n  padding-bottom: 5px;\n}\n\n.task-add__fieldset {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n  padding: 5px;\n  border-radius: 5px;\n}\n\n.task-add__group {\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: end;\n}\n\n.task-add__group:has(.task-add__input-text),\n.task-add__group:has(.task-add__input-tags) {\n  flex-grow: 2;\n}\n\n.task-add__input-text {\n  width: 100%;\n}\n\n.task-add__input-description {\n  resize: vertical;\n}\n\n#task-add-form input,\n#task-add-form textarea {\n  padding: 5px;\n  font-size: 16px;\n}\n\n.task-add__btn-add {\n  margin: 0 auto;\n  max-width: 50%;\n  width: 100px;\n  padding: 5px 10px;\n}\n","",{version:3,sources:["webpack://./components/task-add-form/style.css"],names:[],mappings:"AAAA;EACE,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,eAAe;EACf,SAAS;EACT,YAAY;EACZ,kBAAkB;AACpB;;AAEA;EACE,WAAW;EACX,aAAa;EACb,sBAAsB;EACtB,oBAAoB;AACtB;;AAEA;;EAEE,YAAY;AACd;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,gBAAgB;AAClB;;AAEA;;EAEE,YAAY;EACZ,eAAe;AACjB;;AAEA;EACE,cAAc;EACd,cAAc;EACd,YAAY;EACZ,iBAAiB;AACnB",sourcesContent:[".task-add {\n  padding-bottom: 5px;\n}\n\n.task-add__fieldset {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n  padding: 5px;\n  border-radius: 5px;\n}\n\n.task-add__group {\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: end;\n}\n\n.task-add__group:has(.task-add__input-text),\n.task-add__group:has(.task-add__input-tags) {\n  flex-grow: 2;\n}\n\n.task-add__input-text {\n  width: 100%;\n}\n\n.task-add__input-description {\n  resize: vertical;\n}\n\n#task-add-form input,\n#task-add-form textarea {\n  padding: 5px;\n  font-size: 16px;\n}\n\n.task-add__btn-add {\n  margin: 0 auto;\n  max-width: 50%;\n  width: 100px;\n  padding: 5px 10px;\n}\n"],sourceRoot:""}]);const l=i},7581:(e,t,n)=>{"use strict";n.d(t,{A:()=>l});var r=n(4942),a=n.n(r),o=n(278),i=n.n(o)()(a());i.push([e.id,"/* reset styling */\n\n.task-list {\n  max-width: 100%;\n  margin: 0 auto;\n  padding: 0px;\n  list-style-type: none;\n  background-color: rgba(255, 255, 255, 0.8);\n}\n\ninput,\nbutton {\n  outline: none;\n}\n\n.empty-list {\n  margin: 0 auto;\n  font-size: 30px;\n  text-align: center;\n}\n\n.task-list:has(.list__item) .empty-list {\n  display: none;\n}\n\n@media screen and (max-width: 768px) {\n  .empty-list {\n    font-size: 16px;\n  }\n}\n","",{version:3,sources:["webpack://./components/task-list/style.css"],names:[],mappings:"AAAA,kBAAkB;;AAElB;EACE,eAAe;EACf,cAAc;EACd,YAAY;EACZ,qBAAqB;EACrB,0CAA0C;AAC5C;;AAEA;;EAEE,aAAa;AACf;;AAEA;EACE,cAAc;EACd,eAAe;EACf,kBAAkB;AACpB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE;IACE,eAAe;EACjB;AACF",sourcesContent:["/* reset styling */\n\n.task-list {\n  max-width: 100%;\n  margin: 0 auto;\n  padding: 0px;\n  list-style-type: none;\n  background-color: rgba(255, 255, 255, 0.8);\n}\n\ninput,\nbutton {\n  outline: none;\n}\n\n.empty-list {\n  margin: 0 auto;\n  font-size: 30px;\n  text-align: center;\n}\n\n.task-list:has(.list__item) .empty-list {\n  display: none;\n}\n\n@media screen and (max-width: 768px) {\n  .empty-list {\n    font-size: 16px;\n  }\n}\n"],sourceRoot:""}]);const l=i},1850:(e,t,n)=>{"use strict";n.d(t,{A:()=>l});var r=n(4942),a=n.n(r),o=n(278),i=n.n(o)()(a());i.push([e.id,'.year {\n  padding: 20px;\n  display: grid;\n  grid-template-columns: repeat(4, minmax(180px, 200px));\n  justify-content: space-evenly;\n  align-items: stretch;\n  /* column-gap: calc(25% - 250px); */\n  column-gap: 20px;\n\n  row-gap: 40px;\n  grid-auto-rows: 1fr;\n\n  background: rgba(255, 255, 255, 0.8);\n  font-size: 14px;\n}\n\n@media (width < 1200px) {\n  .year {\n    grid-template-columns: repeat(auto-fill, minmax(180px, 200px));\n  }\n}\n\n.year__month {\n  padding: 5px 15px;\n  box-shadow: 0px 0px 5px 1px rgba(0, 0, 0, 0.2);\n}\n\n.year__month[data-tasks="0"] {\n  background-color: white;\n}\n\n.year__month-title {\n  display: block;\n  /* font-size: 1.25rem; */\n  font-weight: 500;\n  padding-bottom: 5px;\n  position: relative;\n}\n\n.year__month-title.current:after {\n  content: "";\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  height: 4px;\n  width: 100%;\n  border-bottom: 4px rgba(237, 126, 101, 0.868) solid;\n}\n\n.year__month-weekdays,\n.year__month-days {\n  margin-top: 5px;\n\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  /* gap: 5px; */\n  justify-items: center;\n}\n\n.year__month-weekdays {\n  padding: 3px 0;\n  border-bottom: 1px solid black;\n}\n\n.year__month-weekday {\n  font-weight: 500;\n}\n\n.year__month-day {\n  width: 100%;\n  border-radius: 50%;\n  aspect-ratio: 1 / 1;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.year__month-day.year__month-day_current {\n  background-color: rgba(1, 1, 255, 0.518);\n  color: white;\n}\n\n.year__month-day:hover {\n  cursor: pointer;\n  box-shadow: 0px 0px 10px 5px rgba(0, 0, 0, 0.2);\n}\n\n.year .year__month-day.year__month-day_prev-month,\n.year .year__month-day.year__month-day_next-month {\n  color: rgba(0, 0, 0, 0.2);\n}\n\n.year__month-day.year__month-day_has-tasks {\n  background-color: rgba(112, 54, 54, 0.518);\n  color: white;\n}\n\n.year__month-day.year__month-day_current.year__month-day_has-tasks {\n  border: 3px solid blue;\n}\n\n.year a:link,\n.year a:visited {\n  color: black;\n  text-decoration: none;\n}\n\n.year a:link:hover {\n  text-decoration: underline;\n}\n',"",{version:3,sources:["webpack://./components/year/style.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,aAAa;EACb,sDAAsD;EACtD,6BAA6B;EAC7B,oBAAoB;EACpB,mCAAmC;EACnC,gBAAgB;;EAEhB,aAAa;EACb,mBAAmB;;EAEnB,oCAAoC;EACpC,eAAe;AACjB;;AAEA;EACE;IACE,8DAA8D;EAChE;AACF;;AAEA;EACE,iBAAiB;EACjB,8CAA8C;AAChD;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,cAAc;EACd,wBAAwB;EACxB,gBAAgB;EAChB,mBAAmB;EACnB,kBAAkB;AACpB;;AAEA;EACE,WAAW;EACX,kBAAkB;EAClB,SAAS;EACT,OAAO;EACP,WAAW;EACX,WAAW;EACX,mDAAmD;AACrD;;AAEA;;EAEE,eAAe;;EAEf,aAAa;EACb,qCAAqC;EACrC,cAAc;EACd,qBAAqB;AACvB;;AAEA;EACE,cAAc;EACd,8BAA8B;AAChC;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,WAAW;EACX,kBAAkB;EAClB,mBAAmB;EACnB,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,wCAAwC;EACxC,YAAY;AACd;;AAEA;EACE,eAAe;EACf,+CAA+C;AACjD;;AAEA;;EAEE,yBAAyB;AAC3B;;AAEA;EACE,0CAA0C;EAC1C,YAAY;AACd;;AAEA;EACE,sBAAsB;AACxB;;AAEA;;EAEE,YAAY;EACZ,qBAAqB;AACvB;;AAEA;EACE,0BAA0B;AAC5B",sourcesContent:['.year {\n  padding: 20px;\n  display: grid;\n  grid-template-columns: repeat(4, minmax(180px, 200px));\n  justify-content: space-evenly;\n  align-items: stretch;\n  /* column-gap: calc(25% - 250px); */\n  column-gap: 20px;\n\n  row-gap: 40px;\n  grid-auto-rows: 1fr;\n\n  background: rgba(255, 255, 255, 0.8);\n  font-size: 14px;\n}\n\n@media (width < 1200px) {\n  .year {\n    grid-template-columns: repeat(auto-fill, minmax(180px, 200px));\n  }\n}\n\n.year__month {\n  padding: 5px 15px;\n  box-shadow: 0px 0px 5px 1px rgba(0, 0, 0, 0.2);\n}\n\n.year__month[data-tasks="0"] {\n  background-color: white;\n}\n\n.year__month-title {\n  display: block;\n  /* font-size: 1.25rem; */\n  font-weight: 500;\n  padding-bottom: 5px;\n  position: relative;\n}\n\n.year__month-title.current:after {\n  content: "";\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  height: 4px;\n  width: 100%;\n  border-bottom: 4px rgba(237, 126, 101, 0.868) solid;\n}\n\n.year__month-weekdays,\n.year__month-days {\n  margin-top: 5px;\n\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  /* gap: 5px; */\n  justify-items: center;\n}\n\n.year__month-weekdays {\n  padding: 3px 0;\n  border-bottom: 1px solid black;\n}\n\n.year__month-weekday {\n  font-weight: 500;\n}\n\n.year__month-day {\n  width: 100%;\n  border-radius: 50%;\n  aspect-ratio: 1 / 1;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.year__month-day.year__month-day_current {\n  background-color: rgba(1, 1, 255, 0.518);\n  color: white;\n}\n\n.year__month-day:hover {\n  cursor: pointer;\n  box-shadow: 0px 0px 10px 5px rgba(0, 0, 0, 0.2);\n}\n\n.year .year__month-day.year__month-day_prev-month,\n.year .year__month-day.year__month-day_next-month {\n  color: rgba(0, 0, 0, 0.2);\n}\n\n.year__month-day.year__month-day_has-tasks {\n  background-color: rgba(112, 54, 54, 0.518);\n  color: white;\n}\n\n.year__month-day.year__month-day_current.year__month-day_has-tasks {\n  border: 3px solid blue;\n}\n\n.year a:link,\n.year a:visited {\n  color: black;\n  text-decoration: none;\n}\n\n.year a:link:hover {\n  text-decoration: underline;\n}\n'],sourceRoot:""}]);const l=i},2791:(e,t,n)=>{"use strict";n.d(t,{A:()=>p});var r=n(4942),a=n.n(r),o=n(278),i=n.n(o),l=n(3021),s=n.n(l),u=new URL(n(2473),n.b),c=i()(a()),d=s()(u);c.push([e.id,`*,\nbody {\n  box-sizing: border-box;\n  font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;\n  padding: 0;\n  margin: 0;\n}\n\n#root {\n  margin: 0 auto;\n  min-height: 100vh;\n  background:\n    linear-gradient(rgba(255, 255, 255, 1), rgba(255, 255, 255, 0.4)),\n    url(${d}) center center/cover no-repeat;\n}\n\n.container {\n  max-width: 1440px;\n  margin: 0 auto;\n}\n\n.loading {\n  filter: blur(1px);\n  opacity: 0.8;\n  pointer-events: none;\n}\n`,"",{version:3,sources:["webpack://./style.css"],names:[],mappings:"AAAA;;EAEE,sBAAsB;EACtB,4DAA4D;EAC5D,UAAU;EACV,SAAS;AACX;;AAEA;EACE,cAAc;EACd,iBAAiB;EACjB;;yEAEyD;AAC3D;;AAEA;EACE,iBAAiB;EACjB,cAAc;AAChB;;AAEA;EACE,iBAAiB;EACjB,YAAY;EACZ,oBAAoB;AACtB",sourcesContent:['*,\nbody {\n  box-sizing: border-box;\n  font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;\n  padding: 0;\n  margin: 0;\n}\n\n#root {\n  margin: 0 auto;\n  min-height: 100vh;\n  background:\n    linear-gradient(rgba(255, 255, 255, 1), rgba(255, 255, 255, 0.4)),\n    url("assets/main-bg.jpg") center center/cover no-repeat;\n}\n\n.container {\n  max-width: 1440px;\n  margin: 0 auto;\n}\n\n.loading {\n  filter: blur(1px);\n  opacity: 0.8;\n  pointer-events: none;\n}\n'],sourceRoot:""}]);const p=c},6046:(e,t,n)=>{"use strict";n.d(t,{A:()=>l});var r=n(4942),a=n.n(r),o=n(278),i=n.n(o)()(a());i.push([e.id,'.container_XmF0N {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.accordion__cWe2 {\n  background-color: #eee;\n  color: #444;\n  cursor: pointer;\n  padding: 18px;\n  width: 100%;\n  border: none;\n  text-align: left;\n  outline: none;\n  font-size: 15px;\n  transition: 0.4s;\n}\n\n.active_tST5t,\n.accordion__cWe2:hover {\n  background-color: #ccc;\n}\n\n.accordion__cWe2:after {\n  content: "\\002B";\n  color: #777;\n  font-weight: bold;\n  float: right;\n  margin-left: 5px;\n}\n\n.active_tST5t:after {\n  content: "\\2212";\n}\n\n.panel_y8CF1 {\n  /* padding: 0 18px; */\n  background-color: white;\n  max-height: 0;\n  overflow: hidden;\n  transition: max-height 0.2s ease-out;\n}\n\n.active_tST5t ~ .panel_y8CF1 {\n  max-height: 1000px;\n}\n',"",{version:3,sources:["webpack://./UI/accordion/style.module.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,sBAAsB;EACtB,SAAS;AACX;;AAEA;EACE,sBAAsB;EACtB,WAAW;EACX,eAAe;EACf,aAAa;EACb,WAAW;EACX,YAAY;EACZ,gBAAgB;EAChB,aAAa;EACb,eAAe;EACf,gBAAgB;AAClB;;AAEA;;EAEE,sBAAsB;AACxB;;AAEA;EACE,gBAAgB;EAChB,WAAW;EACX,iBAAiB;EACjB,YAAY;EACZ,gBAAgB;AAClB;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,qBAAqB;EACrB,uBAAuB;EACvB,aAAa;EACb,gBAAgB;EAChB,oCAAoC;AACtC;;AAEA;EACE,kBAAkB;AACpB",sourcesContent:['.container {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.accordion {\n  background-color: #eee;\n  color: #444;\n  cursor: pointer;\n  padding: 18px;\n  width: 100%;\n  border: none;\n  text-align: left;\n  outline: none;\n  font-size: 15px;\n  transition: 0.4s;\n}\n\n.active,\n.accordion:hover {\n  background-color: #ccc;\n}\n\n.accordion:after {\n  content: "\\002B";\n  color: #777;\n  font-weight: bold;\n  float: right;\n  margin-left: 5px;\n}\n\n.active:after {\n  content: "\\2212";\n}\n\n.panel {\n  /* padding: 0 18px; */\n  background-color: white;\n  max-height: 0;\n  overflow: hidden;\n  transition: max-height 0.2s ease-out;\n}\n\n.active ~ .panel {\n  max-height: 1000px;\n}\n'],sourceRoot:""}]),i.locals={container:"container_XmF0N",accordion:"accordion__cWe2",active:"active_tST5t",panel:"panel_y8CF1"};const l=i},1889:(e,t,n)=>{"use strict";n.d(t,{A:()=>l});var r=n(4942),a=n.n(r),o=n(278),i=n.n(o)()(a());i.push([e.id,".searchForm_T6Wx8 {\n  display: flex;\n  align-items: stretch;\n}\n\n.input_l57i3 {\n  padding: 5px;\n  flex-grow: 1;\n  max-width: 500px;\n}\n\n.btn_miR29 {\n  width: 40px;\n}\n","",{version:3,sources:["webpack://./UI/search-form/style.module.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,oBAAoB;AACtB;;AAEA;EACE,YAAY;EACZ,YAAY;EACZ,gBAAgB;AAClB;;AAEA;EACE,WAAW;AACb",sourcesContent:[".searchForm {\n  display: flex;\n  align-items: stretch;\n}\n\n.input {\n  padding: 5px;\n  flex-grow: 1;\n  max-width: 500px;\n}\n\n.btn {\n  width: 40px;\n}\n"],sourceRoot:""}]),i.locals={searchForm:"searchForm_T6Wx8",input:"input_l57i3",btn:"btn_miR29"};const l=i},3040:(e,t,n)=>{"use strict";n.d(t,{A:()=>l});var r=n(4942),a=n.n(r),o=n(278),i=n.n(o)()(a());i.push([e.id,".page__profile_pwgnE {\n  /* stylelint-disable-next-line  css-modules/css-variables */\n  min-height: calc(100vh - var(--header-height));\n  padding: 20px 40px;\n  height: 100%;\n}\n\n.form_Mzjbm {\n  margin-top: 50px;\n  padding: 20px;\n  max-width: 500px;\n  border: 1px solid black;\n  border-radius: 5px;\n}\n\n.inputGroup_DJYdK {\n  display: grid;\n  grid-template-columns: 150px 200px;\n  padding-bottom: 20px;\n}\n\n.inputGroup_DJYdK input {\n  padding: 5px;\n}\n\n.btn_l31ze {\n  padding: 5px;\n}\n","",{version:3,sources:["webpack://./app/profile/style.module.css"],names:[],mappings:"AAAA;EACE,2DAA2D;EAC3D,8CAA8C;EAC9C,kBAAkB;EAClB,YAAY;AACd;;AAEA;EACE,gBAAgB;EAChB,aAAa;EACb,gBAAgB;EAChB,uBAAuB;EACvB,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,kCAAkC;EAClC,oBAAoB;AACtB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,YAAY;AACd",sourcesContent:[".page__profile {\n  /* stylelint-disable-next-line  css-modules/css-variables */\n  min-height: calc(100vh - var(--header-height));\n  padding: 20px 40px;\n  height: 100%;\n}\n\n.form {\n  margin-top: 50px;\n  padding: 20px;\n  max-width: 500px;\n  border: 1px solid black;\n  border-radius: 5px;\n}\n\n.inputGroup {\n  display: grid;\n  grid-template-columns: 150px 200px;\n  padding-bottom: 20px;\n}\n\n.inputGroup input {\n  padding: 5px;\n}\n\n.btn {\n  padding: 5px;\n}\n"],sourceRoot:""}]),i.locals={page__profile:"page__profile_pwgnE",form:"form_Mzjbm",inputGroup:"inputGroup_DJYdK",btn:"btn_l31ze"};const l=i},2304:(e,t,n)=>{"use strict";n.d(t,{A:()=>l});var r=n(4942),a=n.n(r),o=n(278),i=n.n(o)()(a());i.push([e.id,".task_COR2Y {\n  padding: 50px;\n  font-size: 20px;\n}\n","",{version:3,sources:["webpack://./app/task/style.module.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,eAAe;AACjB",sourcesContent:[".task {\n  padding: 50px;\n  font-size: 20px;\n}\n"],sourceRoot:""}]),i.locals={task:"task_COR2Y"};const l=i},5449:(e,t,n)=>{"use strict";n.d(t,{A:()=>l});var r=n(4942),a=n.n(r),o=n(278),i=n.n(o)()(a());i.push([e.id,'.auth_vt_hI {\n  width: 100%;\n  display: flex;\n  gap: 20px;\n  flex-wrap: no-wrap;\n  justify-content: center;\n  align-items: center;\n  overflow: hidden;\n}\n\n.form_XkxVV {\n  padding: 20px;\n  max-width: 400px;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  box-shadow: 0px 0px 15px 2px rgba(0, 0, 0, 0.2);\n  background-color: white;\n}\n\n.title_oNbJb {\n  margin-bottom: 20px;\n}\n\n.inputField_kgJrh {\n  flex-grow: 1;\n  gap: 10px;\n}\n\n.inputField_kgJrh:user-invalid {\n  border: 2px solid red;\n}\n\n.inputField_kgJrh:user-invalid + .validity-icon_QWb2m::before {\n  content: "✖";\n  color: red;\n}\n\n.inputField_kgJrh:valid + .validity-icon_QWb2m::before {\n  content: "✓";\n  color: green;\n}\n\n[type="checkbox"]:user-invalid {\n  outline: 2px solid red;\n  outline-offset: 2px;\n}\n\n.inputGroup_rARxj {\n  display: flex;\n  gap: 10px;\n}\n\n.label_z_Sbs {\n  width: 80px;\n}\n\n.btnGroup_RddSB {\n  margin-top: 10px;\n  display: flex;\n  justify-content: center;\n  gap: 10px;\n}\n.btn_KIC07 {\n  padding: 5px;\n  min-width: 60px;\n}\n\n.recover_QwXw0:link,\n.change_ACL01:link {\n  color: inherit;\n  text-decoration: none;\n}\n\n.error_mteqZ {\n  color: red;\n}\n\n.linkGroup_SzBff {\n  margin-top: 20px;\n  display: flex;\n  justify-content: space-around;\n  gap: 10px;\n}\n\n@media screen and (width < 500px) {\n  .auth_vt_hI {\n    width: 90%;\n  }\n  .inputGroup_rARxj {\n    flex-direction: column;\n  }\n}\n',"",{version:3,sources:["webpack://./components/auth-form/style.module.css"],names:[],mappings:"AAAA;EACE,WAAW;EACX,aAAa;EACb,SAAS;EACT,kBAAkB;EAClB,uBAAuB;EACvB,mBAAmB;EACnB,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,gBAAgB;EAChB,WAAW;EACX,aAAa;EACb,sBAAsB;EACtB,SAAS;EACT,+CAA+C;EAC/C,uBAAuB;AACzB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,YAAY;EACZ,SAAS;AACX;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,YAAY;EACZ,UAAU;AACZ;;AAEA;EACE,YAAY;EACZ,YAAY;AACd;;AAEA;EACE,sBAAsB;EACtB,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,SAAS;AACX;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,gBAAgB;EAChB,aAAa;EACb,uBAAuB;EACvB,SAAS;AACX;AACA;EACE,YAAY;EACZ,eAAe;AACjB;;AAEA;;EAEE,cAAc;EACd,qBAAqB;AACvB;;AAEA;EACE,UAAU;AACZ;;AAEA;EACE,gBAAgB;EAChB,aAAa;EACb,6BAA6B;EAC7B,SAAS;AACX;;AAEA;EACE;IACE,UAAU;EACZ;EACA;IACE,sBAAsB;EACxB;AACF",sourcesContent:['.auth {\n  width: 100%;\n  display: flex;\n  gap: 20px;\n  flex-wrap: no-wrap;\n  justify-content: center;\n  align-items: center;\n  overflow: hidden;\n}\n\n.form {\n  padding: 20px;\n  max-width: 400px;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  box-shadow: 0px 0px 15px 2px rgba(0, 0, 0, 0.2);\n  background-color: white;\n}\n\n.title {\n  margin-bottom: 20px;\n}\n\n.inputField {\n  flex-grow: 1;\n  gap: 10px;\n}\n\n.inputField:user-invalid {\n  border: 2px solid red;\n}\n\n.inputField:user-invalid + .validity-icon::before {\n  content: "✖";\n  color: red;\n}\n\n.inputField:valid + .validity-icon::before {\n  content: "✓";\n  color: green;\n}\n\n[type="checkbox"]:user-invalid {\n  outline: 2px solid red;\n  outline-offset: 2px;\n}\n\n.inputGroup {\n  display: flex;\n  gap: 10px;\n}\n\n.label {\n  width: 80px;\n}\n\n.btnGroup {\n  margin-top: 10px;\n  display: flex;\n  justify-content: center;\n  gap: 10px;\n}\n.btn {\n  padding: 5px;\n  min-width: 60px;\n}\n\n.recover:link,\n.change:link {\n  color: inherit;\n  text-decoration: none;\n}\n\n.error {\n  color: red;\n}\n\n.linkGroup {\n  margin-top: 20px;\n  display: flex;\n  justify-content: space-around;\n  gap: 10px;\n}\n\n@media screen and (width < 500px) {\n  .auth {\n    width: 90%;\n  }\n  .inputGroup {\n    flex-direction: column;\n  }\n}\n'],sourceRoot:""}]),i.locals={auth:"auth_vt_hI",form:"form_XkxVV",title:"title_oNbJb",inputField:"inputField_kgJrh","validity-icon":"validity-icon_QWb2m",inputGroup:"inputGroup_rARxj",label:"label_z_Sbs",btnGroup:"btnGroup_RddSB",btn:"btn_KIC07",recover:"recover_QwXw0",change:"change_ACL01",error:"error_mteqZ",linkGroup:"linkGroup_SzBff"};const l=i},4753:(e,t,n)=>{"use strict";n.d(t,{A:()=>l});var r=n(4942),a=n.n(r),o=n(278),i=n.n(o)()(a());i.push([e.id,".controls_jlU88 {\n  --controls-height: 40px;\n\n  padding: 5px;\n  border-bottom: 1px solid black;\n  display: flex;\n  gap: 20px;\n  height: calc(var(--controls-height) + 10px);\n  width: 100%;\n}\n\n.btn_iE6gi {\n  padding: 5px;\n  border: 1px solid black;\n  cursor: pointer;\n  height: var(--controls-height);\n  appearance: none;\n}\n\n.btnToday_qxqq7 {\n  background-color: transparent;\n  padding: 10px;\n}\n\n.btnToday_qxqq7:hover {\n  background-color: lightgray;\n}\n\n.btnGroup_f40Hn {\n  display: flex;\n  gap: 5px;\n}\n\n.btnPrev_htAea,\n.btnNext_MmvvD {\n  width: var(--controls-height);\n  outline: none;\n  border: none;\n  background-color: transparent;\n  border-radius: 50%;\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.btnPrev_htAea:hover,\n.btnNext_MmvvD:hover {\n  background-color: lightgray;\n}\n\n.textContent_O_J0h {\n  font-size: 30px;\n}\n\n.separator_EVcdJ {\n  margin-left: auto;\n}\n","",{version:3,sources:["webpack://./components/calendar-controls/style.module.css"],names:[],mappings:"AAAA;EACE,uBAAuB;;EAEvB,YAAY;EACZ,8BAA8B;EAC9B,aAAa;EACb,SAAS;EACT,2CAA2C;EAC3C,WAAW;AACb;;AAEA;EACE,YAAY;EACZ,uBAAuB;EACvB,eAAe;EACf,8BAA8B;EAC9B,gBAAgB;AAClB;;AAEA;EACE,6BAA6B;EAC7B,aAAa;AACf;;AAEA;EACE,2BAA2B;AAC7B;;AAEA;EACE,aAAa;EACb,QAAQ;AACV;;AAEA;;EAEE,6BAA6B;EAC7B,aAAa;EACb,YAAY;EACZ,6BAA6B;EAC7B,kBAAkB;EAClB,oBAAoB;EACpB,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;;EAEE,2BAA2B;AAC7B;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,iBAAiB;AACnB",sourcesContent:[".controls {\n  --controls-height: 40px;\n\n  padding: 5px;\n  border-bottom: 1px solid black;\n  display: flex;\n  gap: 20px;\n  height: calc(var(--controls-height) + 10px);\n  width: 100%;\n}\n\n.btn {\n  padding: 5px;\n  border: 1px solid black;\n  cursor: pointer;\n  height: var(--controls-height);\n  appearance: none;\n}\n\n.btnToday {\n  background-color: transparent;\n  padding: 10px;\n}\n\n.btnToday:hover {\n  background-color: lightgray;\n}\n\n.btnGroup {\n  display: flex;\n  gap: 5px;\n}\n\n.btnPrev,\n.btnNext {\n  width: var(--controls-height);\n  outline: none;\n  border: none;\n  background-color: transparent;\n  border-radius: 50%;\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.btnPrev:hover,\n.btnNext:hover {\n  background-color: lightgray;\n}\n\n.textContent {\n  font-size: 30px;\n}\n\n.separator {\n  margin-left: auto;\n}\n"],sourceRoot:""}]),i.locals={controls:"controls_jlU88",btn:"btn_iE6gi",btnToday:"btnToday_qxqq7",btnGroup:"btnGroup_f40Hn",btnPrev:"btnPrev_htAea",btnNext:"btnNext_MmvvD",textContent:"textContent_O_J0h",separator:"separator_EVcdJ"};const l=i},8752:(e,t,n)=>{"use strict";n.d(t,{A:()=>l});var r=n(4942),a=n.n(r),o=n(278),i=n.n(o)()(a());i.push([e.id,".day_oItC7 {\n  padding: 20px;\n  background-color: rgba(255, 255, 255, 0.8);\n}\n","",{version:3,sources:["webpack://./components/day/style.module.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,0CAA0C;AAC5C",sourcesContent:[".day {\n  padding: 20px;\n  background-color: rgba(255, 255, 255, 0.8);\n}\n"],sourceRoot:""}]),i.locals={day:"day_oItC7"};const l=i},9301:(e,t,n)=>{"use strict";n.d(t,{A:()=>l});var r=n(4942),a=n.n(r),o=n(278),i=n.n(o)()(a());i.push([e.id,'.filter-controls_vJMBS {\n  padding-bottom: 10px;\n}\n\n.filter__fieldset_l5kj8 {\n  gap: 10px;\n  flex-wrap: wrap;\n  padding: 5px;\n  border-radius: 5px;\n\n  display: grid;\n  grid-template-areas:\n    "dateFrom dateTo"\n    "status status"\n    "text text"\n    "tags tags"\n    "btn btn";\n}\n\n.dateFromGroup_jKper,\n.dateToGroup__r4CJ,\n.textGroup_cGXmN,\n.statusGroup_bVxBi,\n.tagsGroup_indwR,\n.btnGroup_DJnqk {\n  display: flex;\n  flex-direction: column;\n  place-content: end;\n}\n\n.dateFromGroup_jKper {\n  grid-area: dateFrom;\n}\n\n.dateToGroup__r4CJ {\n  grid-area: dateTo;\n}\n\n.textGroup_cGXmN {\n  grid-area: text;\n}\n\n.statusGroup_bVxBi {\n  grid-area: status;\n}\n\n.tagsGroup_indwR {\n  grid-area: tags;\n}\n\n.btnGroup_DJnqk {\n  grid-area: btn;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  gap: 20px;\n}\n\n.btn_RVcg9 {\n  outline: none;\n  max-width: 40%;\n  padding: 5px 10px;\n}\n',"",{version:3,sources:["webpack://./components/filter-controls/style.module.css"],names:[],mappings:"AAAA;EACE,oBAAoB;AACtB;;AAEA;EACE,SAAS;EACT,eAAe;EACf,YAAY;EACZ,kBAAkB;;EAElB,aAAa;EACb;;;;;aAKW;AACb;;AAEA;;;;;;EAME,aAAa;EACb,sBAAsB;EACtB,kBAAkB;AACpB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,cAAc;EACd,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,SAAS;AACX;;AAEA;EACE,aAAa;EACb,cAAc;EACd,iBAAiB;AACnB",sourcesContent:['.filter-controls {\n  padding-bottom: 10px;\n}\n\n.filter__fieldset {\n  gap: 10px;\n  flex-wrap: wrap;\n  padding: 5px;\n  border-radius: 5px;\n\n  display: grid;\n  grid-template-areas:\n    "dateFrom dateTo"\n    "status status"\n    "text text"\n    "tags tags"\n    "btn btn";\n}\n\n.dateFromGroup,\n.dateToGroup,\n.textGroup,\n.statusGroup,\n.tagsGroup,\n.btnGroup {\n  display: flex;\n  flex-direction: column;\n  place-content: end;\n}\n\n.dateFromGroup {\n  grid-area: dateFrom;\n}\n\n.dateToGroup {\n  grid-area: dateTo;\n}\n\n.textGroup {\n  grid-area: text;\n}\n\n.statusGroup {\n  grid-area: status;\n}\n\n.tagsGroup {\n  grid-area: tags;\n}\n\n.btnGroup {\n  grid-area: btn;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  gap: 20px;\n}\n\n.btn {\n  outline: none;\n  max-width: 40%;\n  padding: 5px 10px;\n}\n'],sourceRoot:""}]),i.locals={"filter-controls":"filter-controls_vJMBS",filter__fieldset:"filter__fieldset_l5kj8",dateFromGroup:"dateFromGroup_jKper",dateToGroup:"dateToGroup__r4CJ",textGroup:"textGroup_cGXmN",statusGroup:"statusGroup_bVxBi",tagsGroup:"tagsGroup_indwR",btnGroup:"btnGroup_DJnqk",btn:"btn_RVcg9"};const l=i},5994:(e,t,n)=>{"use strict";n.d(t,{A:()=>l});var r=n(4942),a=n.n(r),o=n(278),i=n.n(o)()(a());i.push([e.id,".hours_Ulni7 {\n  list-style-type: none;\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  --color: rgba(101, 158, 237, 0.868);\n  --current-color: rgba(237, 126, 101, 0.868);\n}\n\n.hour_ThPTx {\n  display: grid;\n  grid-template-columns: auto 1fr;\n  column-gap: 20px;\n  box-shadow: inset 80px 1px var(--color);\n  padding: 5px;\n}\n\n.hourTitle_B_U0l {\n  /* background-color: var(--color); */\n  width: 70px;\n\n  color: white;\n}\n\n.currentHour_ayW38 {\n  box-shadow: inset 80px 1px var(--current-color);\n}\n\n.currentHour_ayW38 .hourTitle_B_U0l {\n  background-color: var(--current-color);\n  color: black;\n  font-weight: 700;\n}\n\n.tasks_RCZcp {\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  list-style-type: none;\n}\n\n.task_ByzAz {\n  border-bottom: 1px solid #ccc;\n  padding-bottom: 5px;\n}\n.taskTitle_qHJCC {\n  font-size: 1.25rem;\n}\n\n.taskDescription_brOmf {\n  font-size: 0.75rem;\n}\n","",{version:3,sources:["webpack://./components/hours-list/style.module.css"],names:[],mappings:"AAAA;EACE,qBAAqB;EACrB,aAAa;EACb,sBAAsB;EACtB,QAAQ;EACR,mCAAmC;EACnC,2CAA2C;AAC7C;;AAEA;EACE,aAAa;EACb,+BAA+B;EAC/B,gBAAgB;EAChB,uCAAuC;EACvC,YAAY;AACd;;AAEA;EACE,oCAAoC;EACpC,WAAW;;EAEX,YAAY;AACd;;AAEA;EACE,+CAA+C;AACjD;;AAEA;EACE,sCAAsC;EACtC,YAAY;EACZ,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,QAAQ;EACR,qBAAqB;AACvB;;AAEA;EACE,6BAA6B;EAC7B,mBAAmB;AACrB;AACA;EACE,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;AACpB",sourcesContent:[".hours {\n  list-style-type: none;\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  --color: rgba(101, 158, 237, 0.868);\n  --current-color: rgba(237, 126, 101, 0.868);\n}\n\n.hour {\n  display: grid;\n  grid-template-columns: auto 1fr;\n  column-gap: 20px;\n  box-shadow: inset 80px 1px var(--color);\n  padding: 5px;\n}\n\n.hourTitle {\n  /* background-color: var(--color); */\n  width: 70px;\n\n  color: white;\n}\n\n.currentHour {\n  box-shadow: inset 80px 1px var(--current-color);\n}\n\n.currentHour .hourTitle {\n  background-color: var(--current-color);\n  color: black;\n  font-weight: 700;\n}\n\n.tasks {\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  list-style-type: none;\n}\n\n.task {\n  border-bottom: 1px solid #ccc;\n  padding-bottom: 5px;\n}\n.taskTitle {\n  font-size: 1.25rem;\n}\n\n.taskDescription {\n  font-size: 0.75rem;\n}\n"],sourceRoot:""}]),i.locals={hours:"hours_Ulni7",hour:"hour_ThPTx",hourTitle:"hourTitle_B_U0l",currentHour:"currentHour_ayW38",tasks:"tasks_RCZcp",task:"task_ByzAz",taskTitle:"taskTitle_qHJCC",taskDescription:"taskDescription_brOmf"};const l=i},9142:(e,t,n)=>{"use strict";n.d(t,{A:()=>l});var r=n(4942),a=n.n(r),o=n(278),i=n.n(o)()(a());i.push([e.id,".sidebar_mmrbZ {\n  grid-area: sidebar;\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  padding: 10px 10px 0 0;\n}\n\n.active_upc1j {\n  width: 300px;\n}\n\n.title_rN9j6 {\n  font-size: 20px;\n  font-weight: 600;\n}\n\n.header_EIvmu {\n  display: flex;\n  gap: 10px;\n}\n","",{version:3,sources:["webpack://./components/sidebar/style.module.css"],names:[],mappings:"AAAA;EACE,kBAAkB;EAClB,aAAa;EACb,sBAAsB;EACtB,SAAS;EACT,sBAAsB;AACxB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,eAAe;EACf,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,SAAS;AACX",sourcesContent:[".sidebar {\n  grid-area: sidebar;\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  padding: 10px 10px 0 0;\n}\n\n.active {\n  width: 300px;\n}\n\n.title {\n  font-size: 20px;\n  font-weight: 600;\n}\n\n.header {\n  display: flex;\n  gap: 10px;\n}\n"],sourceRoot:""}]),i.locals={sidebar:"sidebar_mmrbZ",active:"active_upc1j",title:"title_rN9j6",header:"header_EIvmu"};const l=i},9972:(e,t,n)=>{"use strict";n.d(t,{A:()=>l});var r=n(4942),a=n.n(r),o=n(278),i=n.n(o)()(a());i.push([e.id,".editGroup_mYXWW {\n  display: grid;\n  grid-template-columns: 150px auto;\n  gap: 20px;\n  padding-bottom: 20px;\n}\n\n.label_JrdmV {\n  font-weight: bold;\n}\n.input_nPBZU {\n  font-size: 20px;\n}\n\n.btn_SvpMl {\n  padding: 5px;\n}\n","",{version:3,sources:["webpack://./components/task-edit-form/styles.module.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,iCAAiC;EACjC,SAAS;EACT,oBAAoB;AACtB;;AAEA;EACE,iBAAiB;AACnB;AACA;EACE,eAAe;AACjB;;AAEA;EACE,YAAY;AACd",sourcesContent:[".editGroup {\n  display: grid;\n  grid-template-columns: 150px auto;\n  gap: 20px;\n  padding-bottom: 20px;\n}\n\n.label {\n  font-weight: bold;\n}\n.input {\n  font-size: 20px;\n}\n\n.btn {\n  padding: 5px;\n}\n"],sourceRoot:""}]),i.locals={editGroup:"editGroup_mYXWW",label:"label_JrdmV",input:"input_nPBZU",btn:"btn_SvpMl"};const l=i},3665:(e,t,n)=>{"use strict";n.d(t,{A:()=>l});var r=n(4942),a=n.n(r),o=n(278),i=n.n(o)()(a());i.push([e.id,'.item_R1Jmu {\n  display: grid;\n  grid-template-columns: 80px 1fr 50px;\n  grid-template-areas:\n    "checkbox title btn"\n    "checkbox dates btn"\n    "checkbox tags btn";\n  padding: 10px;\n  column-gap: 10px;\n  row-gap: 5px;\n  border-bottom: 1px solid #ccc;\n}\n\n.item_R1Jmu:last-of-type {\n  border-bottom: none;\n}\n\n.item_R1Jmu.edit-mode_hLLB6 .item__title_LLZWo {\n  display: none;\n}\n\n.item_R1Jmu:has(.checkbox_eZhuT:checked) .item__title_LLZWo {\n  text-decoration: line-through;\n}\n\n.item_R1Jmu:hover {\n  background-color: #f5f5f5;\n}\n\n.checkboxBlock_aFcYL {\n  grid-area: checkbox;\n  place-self: center;\n}\n\n.checkbox_eZhuT {\n  cursor: pointer;\n  transform: scale(2);\n}\n\n.titleGroup_hmtBT {\n  grid-area: title;\n  padding: 5px;\n}\n\n.title_PtHEj {\n  font-size: 1.5rem;\n  color: black;\n}\n\n.title_PtHEj:link {\n  text-decoration: none;\n  color: black;\n}\n\n.title_PtHEj:hover {\n  text-decoration: underline;\n}\n\n.description_u2K7S {\n  line-height: 1rem;\n  display: -webkit-box;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  -webkit-line-clamp: 2;\n  max-height: 2em;\n}\n\n.datesGroup_KkR4l {\n  margin-top: 5px;\n  padding: 5px;\n\n  grid-area: dates;\n  font-size: 10px;\n  display: flex;\n  gap: 20px;\n}\n\n.btnGroup_r3sNi {\n  grid-area: btn;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  /* align-items: center; */\n  /* align-content: center; */\n}\n\n.tagsGroup_j7Yrk {\n  list-style-type: none;\n  margin-top: 5px;\n  grid-area: tags;\n  display: flex;\n  gap: 20px;\n  align-items: center;\n}\n\n.tagItem_grG5_::before {\n  content: "#";\n  font-size: 1.5rem;\n  margin-right: 5px;\n}\n\n.tag_JA04E:link,\n.tag_JA04E:visited {\n  text-decoration: none;\n  color: black;\n}\n\n.tag_JA04E:hover {\n  text-decoration: underline;\n}\n\n.btn_x0yXh {\n  font-size: 1rem;\n  padding: 5px;\n  bottom: 1px;\n}\n\n@media screen and (max-width: 768px) {\n  .item_R1Jmu {\n    grid-template-columns: auto 1fr auto;\n    padding: 5px;\n  }\n\n  .checkbox_eZhuT {\n    transform: scale(1);\n  }\n\n  .titleGroup_hmtBT {\n    font-size: 16px;\n  }\n\n  .datesGroup_KkR4l {\n    flex-direction: column;\n    gap: 2px;\n  }\n\n  .tagsGroup_j7Yrk,\n  .tagsGroup_j7Yrk::before {\n    font-size: 10px;\n  }\n\n  .btnGroup_r3sNi .btn_x0yXh {\n    font-size: 10px;\n    padding: 2px;\n    bottom: 1px;\n  }\n}\n',"",{version:3,sources:["webpack://./components/task-item/style.module.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,oCAAoC;EACpC;;;uBAGqB;EACrB,aAAa;EACb,gBAAgB;EAChB,YAAY;EACZ,6BAA6B;AAC/B;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,6BAA6B;AAC/B;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,mBAAmB;EACnB,kBAAkB;AACpB;;AAEA;EACE,eAAe;EACf,mBAAmB;AACrB;;AAEA;EACE,gBAAgB;EAChB,YAAY;AACd;;AAEA;EACE,iBAAiB;EACjB,YAAY;AACd;;AAEA;EACE,qBAAqB;EACrB,YAAY;AACd;;AAEA;EACE,0BAA0B;AAC5B;;AAEA;EACE,iBAAiB;EACjB,oBAAoB;EACpB,4BAA4B;EAC5B,gBAAgB;EAChB,uBAAuB;EACvB,qBAAqB;EACrB,eAAe;AACjB;;AAEA;EACE,eAAe;EACf,YAAY;;EAEZ,gBAAgB;EAChB,eAAe;EACf,aAAa;EACb,SAAS;AACX;;AAEA;EACE,cAAc;EACd,aAAa;EACb,sBAAsB;EACtB,8BAA8B;EAC9B,yBAAyB;EACzB,2BAA2B;AAC7B;;AAEA;EACE,qBAAqB;EACrB,eAAe;EACf,eAAe;EACf,aAAa;EACb,SAAS;EACT,mBAAmB;AACrB;;AAEA;EACE,YAAY;EACZ,iBAAiB;EACjB,iBAAiB;AACnB;;AAEA;;EAEE,qBAAqB;EACrB,YAAY;AACd;;AAEA;EACE,0BAA0B;AAC5B;;AAEA;EACE,eAAe;EACf,YAAY;EACZ,WAAW;AACb;;AAEA;EACE;IACE,oCAAoC;IACpC,YAAY;EACd;;EAEA;IACE,mBAAmB;EACrB;;EAEA;IACE,eAAe;EACjB;;EAEA;IACE,sBAAsB;IACtB,QAAQ;EACV;;EAEA;;IAEE,eAAe;EACjB;;EAEA;IACE,eAAe;IACf,YAAY;IACZ,WAAW;EACb;AACF",sourcesContent:['.item {\n  display: grid;\n  grid-template-columns: 80px 1fr 50px;\n  grid-template-areas:\n    "checkbox title btn"\n    "checkbox dates btn"\n    "checkbox tags btn";\n  padding: 10px;\n  column-gap: 10px;\n  row-gap: 5px;\n  border-bottom: 1px solid #ccc;\n}\n\n.item:last-of-type {\n  border-bottom: none;\n}\n\n.item.edit-mode .item__title {\n  display: none;\n}\n\n.item:has(.checkbox:checked) .item__title {\n  text-decoration: line-through;\n}\n\n.item:hover {\n  background-color: #f5f5f5;\n}\n\n.checkboxBlock {\n  grid-area: checkbox;\n  place-self: center;\n}\n\n.checkbox {\n  cursor: pointer;\n  transform: scale(2);\n}\n\n.titleGroup {\n  grid-area: title;\n  padding: 5px;\n}\n\n.title {\n  font-size: 1.5rem;\n  color: black;\n}\n\n.title:link {\n  text-decoration: none;\n  color: black;\n}\n\n.title:hover {\n  text-decoration: underline;\n}\n\n.description {\n  line-height: 1rem;\n  display: -webkit-box;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  -webkit-line-clamp: 2;\n  max-height: 2em;\n}\n\n.datesGroup {\n  margin-top: 5px;\n  padding: 5px;\n\n  grid-area: dates;\n  font-size: 10px;\n  display: flex;\n  gap: 20px;\n}\n\n.btnGroup {\n  grid-area: btn;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  /* align-items: center; */\n  /* align-content: center; */\n}\n\n.tagsGroup {\n  list-style-type: none;\n  margin-top: 5px;\n  grid-area: tags;\n  display: flex;\n  gap: 20px;\n  align-items: center;\n}\n\n.tagItem::before {\n  content: "#";\n  font-size: 1.5rem;\n  margin-right: 5px;\n}\n\n.tag:link,\n.tag:visited {\n  text-decoration: none;\n  color: black;\n}\n\n.tag:hover {\n  text-decoration: underline;\n}\n\n.btn {\n  font-size: 1rem;\n  padding: 5px;\n  bottom: 1px;\n}\n\n@media screen and (max-width: 768px) {\n  .item {\n    grid-template-columns: auto 1fr auto;\n    padding: 5px;\n  }\n\n  .checkbox {\n    transform: scale(1);\n  }\n\n  .titleGroup {\n    font-size: 16px;\n  }\n\n  .datesGroup {\n    flex-direction: column;\n    gap: 2px;\n  }\n\n  .tagsGroup,\n  .tagsGroup::before {\n    font-size: 10px;\n  }\n\n  .btnGroup .btn {\n    font-size: 10px;\n    padding: 2px;\n    bottom: 1px;\n  }\n}\n'],sourceRoot:""}]),i.locals={item:"item_R1Jmu","edit-mode":"edit-mode_hLLB6",item__title:"item__title_LLZWo",checkbox:"checkbox_eZhuT",checkboxBlock:"checkboxBlock_aFcYL",titleGroup:"titleGroup_hmtBT",title:"title_PtHEj",description:"description_u2K7S",datesGroup:"datesGroup_KkR4l",btnGroup:"btnGroup_r3sNi",tagsGroup:"tagsGroup_j7Yrk",tagItem:"tagItem_grG5_",tag:"tag_JA04E",btn:"btn_x0yXh"};const l=i},1067:(e,t,n)=>{"use strict";n.d(t,{A:()=>l});var r=n(4942),a=n.n(r),o=n(278),i=n.n(o)()(a());i.push([e.id,'.task_JeFyY {\n  padding: 50px;\n  font-size: 20px;\n}\n\n.taskGroup_kY9pD {\n  display: flex;\n  gap: 20px;\n}\n\n.checkbox_Weozx {\n  transform: scale(2);\n  cursor: pointer;\n}\n\n.taskField_TpE8n {\n  display: grid;\n  grid-template-columns: 150px auto;\n}\n\n.fieldName_bGvmW {\n  font-weight: bold;\n}\n\n.taskNoTags_zlN2G {\n  font-weight: bold;\n}\n\n.tagsList_uAyXD {\n  list-style-type: none;\n  display: flex;\n  gap: 20px;\n}\n\n.tag_xY8qp::before {\n  content: "#";\n}\n',"",{version:3,sources:["webpack://./components/task-view/style.module.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,SAAS;AACX;;AAEA;EACE,mBAAmB;EACnB,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,iCAAiC;AACnC;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,qBAAqB;EACrB,aAAa;EACb,SAAS;AACX;;AAEA;EACE,YAAY;AACd",sourcesContent:['.task {\n  padding: 50px;\n  font-size: 20px;\n}\n\n.taskGroup {\n  display: flex;\n  gap: 20px;\n}\n\n.checkbox {\n  transform: scale(2);\n  cursor: pointer;\n}\n\n.taskField {\n  display: grid;\n  grid-template-columns: 150px auto;\n}\n\n.fieldName {\n  font-weight: bold;\n}\n\n.taskNoTags {\n  font-weight: bold;\n}\n\n.tagsList {\n  list-style-type: none;\n  display: flex;\n  gap: 20px;\n}\n\n.tag::before {\n  content: "#";\n}\n'],sourceRoot:""}]),i.locals={task:"task_JeFyY",taskGroup:"taskGroup_kY9pD",checkbox:"checkbox_Weozx",taskField:"taskField_TpE8n",fieldName:"fieldName_bGvmW",taskNoTags:"taskNoTags_zlN2G",tagsList:"tagsList_uAyXD",tag:"tag_xY8qp"};const l=i},2107:(e,t,n)=>{"use strict";n.d(t,{A:()=>l});var r=n(4942),a=n.n(r),o=n(278),i=n.n(o)()(a());i.push([e.id,'.week_AJst3 {\n  margin-top: 10px;\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n\n  height: 100%;\n}\n\n.weekDay_n4Z7m {\n  padding: 10px;\n  position: relative;\n  display: flex;\n  flex-flow: column;\n  height: 100%;\n}\n\n.title_AMiTA {\n  border-bottom: 1px solid black;\n  padding-bottom: 5px;\n}\n\n.weekDay_n4Z7m:after {\n  content: "";\n  top: 0;\n  height: 100%;\n  width: 1px;\n  position: absolute;\n  right: 0;\n  background-color: black;\n}\n\n.weekDay_n4Z7m:last-of-type::after {\n  content: none;\n}\n\n.taskList_hRfeb {\n  margin-top: 10px;\n  list-style-type: none;\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n}\n\n.task_JmvUp {\n  border: 1px solid black;\n  border-radius: 3px;\n  background-color: rgba(61, 151, 53, 0.308);\n}\n\n.taskContent_J5BSo {\n  padding: 5px;\n}\n\n.link_B15m4,\n.link_B15m4:link,\n.link_B15m4:visited {\n  color: black;\n}\n\n.link_B15m4:link {\n  text-decoration: none;\n}\n\n.link_B15m4:hover .taskTitle_sZCiP,\n.link_B15m4:hover .title_AMiTA {\n  text-decoration: underline;\n}\n\n.divider_canRH {\n  margin: 0 3px;\n  height: 1px;\n  background-color: black;\n}\n\n.description_IuvUB {\n  margin-top: 2px;\n  font-size: 0.8rem;\n  font-style: italic;\n  color: rgba(100, 100, 100, 1);\n}\n',"",{version:3,sources:["webpack://./components/week/styles.module.css"],names:[],mappings:"AAAA;EACE,gBAAgB;EAChB,aAAa;EACb,qCAAqC;;EAErC,YAAY;AACd;;AAEA;EACE,aAAa;EACb,kBAAkB;EAClB,aAAa;EACb,iBAAiB;EACjB,YAAY;AACd;;AAEA;EACE,8BAA8B;EAC9B,mBAAmB;AACrB;;AAEA;EACE,WAAW;EACX,MAAM;EACN,YAAY;EACZ,UAAU;EACV,kBAAkB;EAClB,QAAQ;EACR,uBAAuB;AACzB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,gBAAgB;EAChB,qBAAqB;EACrB,aAAa;EACb,sBAAsB;EACtB,QAAQ;AACV;;AAEA;EACE,uBAAuB;EACvB,kBAAkB;EAClB,0CAA0C;AAC5C;;AAEA;EACE,YAAY;AACd;;AAEA;;;EAGE,YAAY;AACd;;AAEA;EACE,qBAAqB;AACvB;;AAEA;;EAEE,0BAA0B;AAC5B;;AAEA;EACE,aAAa;EACb,WAAW;EACX,uBAAuB;AACzB;;AAEA;EACE,eAAe;EACf,iBAAiB;EACjB,kBAAkB;EAClB,6BAA6B;AAC/B",sourcesContent:['.week {\n  margin-top: 10px;\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n\n  height: 100%;\n}\n\n.weekDay {\n  padding: 10px;\n  position: relative;\n  display: flex;\n  flex-flow: column;\n  height: 100%;\n}\n\n.title {\n  border-bottom: 1px solid black;\n  padding-bottom: 5px;\n}\n\n.weekDay:after {\n  content: "";\n  top: 0;\n  height: 100%;\n  width: 1px;\n  position: absolute;\n  right: 0;\n  background-color: black;\n}\n\n.weekDay:last-of-type::after {\n  content: none;\n}\n\n.taskList {\n  margin-top: 10px;\n  list-style-type: none;\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n}\n\n.task {\n  border: 1px solid black;\n  border-radius: 3px;\n  background-color: rgba(61, 151, 53, 0.308);\n}\n\n.taskContent {\n  padding: 5px;\n}\n\n.link,\n.link:link,\n.link:visited {\n  color: black;\n}\n\n.link:link {\n  text-decoration: none;\n}\n\n.link:hover .taskTitle,\n.link:hover .title {\n  text-decoration: underline;\n}\n\n.divider {\n  margin: 0 3px;\n  height: 1px;\n  background-color: black;\n}\n\n.description {\n  margin-top: 2px;\n  font-size: 0.8rem;\n  font-style: italic;\n  color: rgba(100, 100, 100, 1);\n}\n'],sourceRoot:""}]),i.locals={week:"week_AJst3",weekDay:"weekDay_n4Z7m",title:"title_AMiTA",taskList:"taskList_hRfeb",task:"task_JmvUp",taskContent:"taskContent_J5BSo",link:"link_B15m4",taskTitle:"taskTitle_sZCiP",divider:"divider_canRH",description:"description_IuvUB"};const l=i},278:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var l=0;l<this.length;l++){var s=this[l][0];null!=s&&(i[s]=!0)}for(var u=0;u<e.length;u++){var c=[].concat(e[u]);r&&i[c[0]]||(void 0!==o&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=o),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),a&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=a):c[4]="".concat(a)),t.push(c))}},t}},3021:e=>{"use strict";e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},4942:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */");return[t].concat([o]).join("\n")}return[t].join("\n")}},8486:(e,t,n)=>{"use strict";var r=n(9360),a={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function s(e){return r.isMemo(e)?i:l[e.$$typeof]||a}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},l[r.Memo]=i;var u=Object.defineProperty,c=Object.getOwnPropertyNames,d=Object.getOwnPropertySymbols,p=Object.getOwnPropertyDescriptor,f=Object.getPrototypeOf,m=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(m){var a=f(n);a&&a!==m&&e(t,a,r)}var i=c(n);d&&(i=i.concat(d(n)));for(var l=s(t),h=s(n),A=0;A<i.length;++A){var g=i[A];if(!(o[g]||r&&r[g]||h&&h[g]||l&&l[g])){var y=p(n,g);try{u(t,g,y)}catch(e){}}}}return t}},2332:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,a=n?Symbol.for("react.portal"):60106,o=n?Symbol.for("react.fragment"):60107,i=n?Symbol.for("react.strict_mode"):60108,l=n?Symbol.for("react.profiler"):60114,s=n?Symbol.for("react.provider"):60109,u=n?Symbol.for("react.context"):60110,c=n?Symbol.for("react.async_mode"):60111,d=n?Symbol.for("react.concurrent_mode"):60111,p=n?Symbol.for("react.forward_ref"):60112,f=n?Symbol.for("react.suspense"):60113,m=n?Symbol.for("react.suspense_list"):60120,h=n?Symbol.for("react.memo"):60115,A=n?Symbol.for("react.lazy"):60116,g=n?Symbol.for("react.block"):60121,y=n?Symbol.for("react.fundamental"):60117,v=n?Symbol.for("react.responder"):60118,b=n?Symbol.for("react.scope"):60119;function x(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case c:case d:case o:case l:case i:case f:return e;default:switch(e=e&&e.$$typeof){case u:case p:case A:case h:case s:return e;default:return t}}case a:return t}}}function E(e){return x(e)===d}t.AsyncMode=c,t.ConcurrentMode=d,t.ContextConsumer=u,t.ContextProvider=s,t.Element=r,t.ForwardRef=p,t.Fragment=o,t.Lazy=A,t.Memo=h,t.Portal=a,t.Profiler=l,t.StrictMode=i,t.Suspense=f,t.isAsyncMode=function(e){return E(e)||x(e)===c},t.isConcurrentMode=E,t.isContextConsumer=function(e){return x(e)===u},t.isContextProvider=function(e){return x(e)===s},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return x(e)===p},t.isFragment=function(e){return x(e)===o},t.isLazy=function(e){return x(e)===A},t.isMemo=function(e){return x(e)===h},t.isPortal=function(e){return x(e)===a},t.isProfiler=function(e){return x(e)===l},t.isStrictMode=function(e){return x(e)===i},t.isSuspense=function(e){return x(e)===f},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===o||e===d||e===l||e===i||e===f||e===m||"object"==typeof e&&null!==e&&(e.$$typeof===A||e.$$typeof===h||e.$$typeof===s||e.$$typeof===u||e.$$typeof===p||e.$$typeof===y||e.$$typeof===v||e.$$typeof===b||e.$$typeof===g)},t.typeOf=x},9360:(e,t,n)=>{"use strict";e.exports=n(2332)},6067:(e,t,n)=>{"use strict";var r=n(3696),a=n(1434);function o(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var i=new Set,l={};function s(e,t){u(e,t),u(e+"Capture",t)}function u(e,t){for(l[e]=t,e=0;e<t.length;e++)i.add(t[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=Object.prototype.hasOwnProperty,p=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,f={},m={};function h(e,t,n,r,a,o,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=a,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o,this.removeEmptyString=i}var A={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){A[e]=new h(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];A[t]=new h(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){A[e]=new h(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){A[e]=new h(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){A[e]=new h(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){A[e]=new h(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){A[e]=new h(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){A[e]=new h(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){A[e]=new h(e,5,!1,e.toLowerCase(),null,!1,!1)}));var g=/[\-:]([a-z])/g;function y(e){return e[1].toUpperCase()}function v(e,t,n,r){var a=A.hasOwnProperty(t)?A[t]:null;(null!==a?0!==a.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,a,r)&&(n=null),r||null===a?function(e){return!!d.call(m,e)||!d.call(f,e)&&(p.test(e)?m[e]=!0:(f[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):a.mustUseProperty?e[a.propertyName]=null===n?3!==a.type&&"":n:(t=a.attributeName,r=a.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(a=a.type)||4===a&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(g,y);A[t]=new h(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(g,y);A[t]=new h(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(g,y);A[t]=new h(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){A[e]=new h(e,1,!1,e.toLowerCase(),null,!1,!1)})),A.xlinkHref=new h("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){A[e]=new h(e,1,!1,e.toLowerCase(),null,!0,!0)}));var b=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,x=Symbol.for("react.element"),E=Symbol.for("react.portal"),C=Symbol.for("react.fragment"),w=Symbol.for("react.strict_mode"),k=Symbol.for("react.profiler"),S=Symbol.for("react.provider"),_=Symbol.for("react.context"),B=Symbol.for("react.forward_ref"),T=Symbol.for("react.suspense"),j=Symbol.for("react.suspense_list"),N=Symbol.for("react.memo"),R=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var P=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var O=Symbol.iterator;function z(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=O&&e[O]||e["@@iterator"])?e:null}var M,I=Object.assign;function L(e){if(void 0===M)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);M=t&&t[1]||""}return"\n"+M+e}var F=!1;function $(e,t){if(!e||F)return"";F=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var a=t.stack.split("\n"),o=r.stack.split("\n"),i=a.length-1,l=o.length-1;1<=i&&0<=l&&a[i]!==o[l];)l--;for(;1<=i&&0<=l;i--,l--)if(a[i]!==o[l]){if(1!==i||1!==l)do{if(i--,0>--l||a[i]!==o[l]){var s="\n"+a[i].replace(" at new "," at ");return e.displayName&&s.includes("<anonymous>")&&(s=s.replace("<anonymous>",e.displayName)),s}}while(1<=i&&0<=l);break}}}finally{F=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?L(e):""}function D(e){switch(e.tag){case 5:return L(e.type);case 16:return L("Lazy");case 13:return L("Suspense");case 19:return L("SuspenseList");case 0:case 2:case 15:return $(e.type,!1);case 11:return $(e.type.render,!1);case 1:return $(e.type,!0);default:return""}}function W(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case C:return"Fragment";case E:return"Portal";case k:return"Profiler";case w:return"StrictMode";case T:return"Suspense";case j:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case _:return(e.displayName||"Context")+".Consumer";case S:return(e._context.displayName||"Context")+".Provider";case B:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case N:return null!==(t=e.displayName||null)?t:W(e.type)||"Memo";case R:t=e._payload,e=e._init;try{return W(e(t))}catch(e){}}return null}function U(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return W(t);case 8:return t===w?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function V(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function H(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Y(e){e._valueTracker||(e._valueTracker=function(e){var t=H(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function G(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=H(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function q(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function K(e,t){var n=t.checked;return I({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function X(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=V(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Q(e,t){null!=(t=t.checked)&&v(e,"checked",t,!1)}function J(e,t){Q(e,t);var n=V(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,V(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Z(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&q(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+V(n),t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(o(91));return I({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ae(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(o(92));if(te(n)){if(1<n.length)throw Error(o(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:V(n)}}function oe(e,t){var n=V(t.value),r=V(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ie(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function le(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function se(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?le(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ue,ce,de=(ce=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((ue=ue||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ue.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ce(e,t)}))}:ce);function pe(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var fe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},me=["Webkit","ms","Moz","O"];function he(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||fe.hasOwnProperty(e)&&fe[e]?(""+t).trim():t+"px"}function Ae(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),a=he(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,a):e[n]=a}}Object.keys(fe).forEach((function(e){me.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),fe[t]=fe[e]}))}));var ge=I({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ye(e,t){if(t){if(ge[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(o(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(o(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(o(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(o(62))}}function ve(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var be=null;function xe(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Ee=null,Ce=null,we=null;function ke(e){if(e=va(e)){if("function"!=typeof Ee)throw Error(o(280));var t=e.stateNode;t&&(t=xa(t),Ee(e.stateNode,e.type,t))}}function Se(e){Ce?we?we.push(e):we=[e]:Ce=e}function _e(){if(Ce){var e=Ce,t=we;if(we=Ce=null,ke(e),t)for(e=0;e<t.length;e++)ke(t[e])}}function Be(e,t){return e(t)}function Te(){}var je=!1;function Ne(e,t,n){if(je)return e(t,n);je=!0;try{return Be(e,t,n)}finally{je=!1,(null!==Ce||null!==we)&&(Te(),_e())}}function Re(e,t){var n=e.stateNode;if(null===n)return null;var r=xa(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(o(231,t,typeof n));return n}var Pe=!1;if(c)try{var Oe={};Object.defineProperty(Oe,"passive",{get:function(){Pe=!0}}),window.addEventListener("test",Oe,Oe),window.removeEventListener("test",Oe,Oe)}catch(ce){Pe=!1}function ze(e,t,n,r,a,o,i,l,s){var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(e){this.onError(e)}}var Me=!1,Ie=null,Le=!1,Fe=null,$e={onError:function(e){Me=!0,Ie=e}};function De(e,t,n,r,a,o,i,l,s){Me=!1,Ie=null,ze.apply($e,arguments)}function We(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{!!(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ue(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Ve(e){if(We(e)!==e)throw Error(o(188))}function He(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=We(e)))throw Error(o(188));return t!==e?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var i=a.alternate;if(null===i){if(null!==(r=a.return)){n=r;continue}break}if(a.child===i.child){for(i=a.child;i;){if(i===n)return Ve(a),e;if(i===r)return Ve(a),t;i=i.sibling}throw Error(o(188))}if(n.return!==r.return)n=a,r=i;else{for(var l=!1,s=a.child;s;){if(s===n){l=!0,n=a,r=i;break}if(s===r){l=!0,r=a,n=i;break}s=s.sibling}if(!l){for(s=i.child;s;){if(s===n){l=!0,n=i,r=a;break}if(s===r){l=!0,r=i,n=a;break}s=s.sibling}if(!l)throw Error(o(189))}}if(n.alternate!==r)throw Error(o(190))}if(3!==n.tag)throw Error(o(188));return n.stateNode.current===n?e:t}(e))?Ye(e):null}function Ye(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=Ye(e);if(null!==t)return t;e=e.sibling}return null}var Ge=a.unstable_scheduleCallback,qe=a.unstable_cancelCallback,Ke=a.unstable_shouldYield,Xe=a.unstable_requestPaint,Qe=a.unstable_now,Je=a.unstable_getCurrentPriorityLevel,Ze=a.unstable_ImmediatePriority,et=a.unstable_UserBlockingPriority,tt=a.unstable_NormalPriority,nt=a.unstable_LowPriority,rt=a.unstable_IdlePriority,at=null,ot=null,it=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(lt(e)/st|0)|0},lt=Math.log,st=Math.LN2,ut=64,ct=4194304;function dt(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function pt(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,a=e.suspendedLanes,o=e.pingedLanes,i=268435455&n;if(0!==i){var l=i&~a;0!==l?r=dt(l):0!=(o&=i)&&(r=dt(o))}else 0!=(i=n&~a)?r=dt(i):0!==o&&(r=dt(o));if(0===r)return 0;if(0!==t&&t!==r&&!(t&a)&&((a=r&-r)>=(o=t&-t)||16===a&&4194240&o))return t;if(4&r&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)a=1<<(n=31-it(t)),r|=e[n],t&=~a;return r}function ft(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function mt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function ht(){var e=ut;return!(4194240&(ut<<=1))&&(ut=64),e}function At(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function gt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-it(t)]=n}function yt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-it(n),a=1<<r;a&t|e[r]&t&&(e[r]|=t),n&=~a}}var vt=0;function bt(e){return 1<(e&=-e)?4<e?268435455&e?16:536870912:4:1}var xt,Et,Ct,wt,kt,St=!1,_t=[],Bt=null,Tt=null,jt=null,Nt=new Map,Rt=new Map,Pt=[],Ot="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function zt(e,t){switch(e){case"focusin":case"focusout":Bt=null;break;case"dragenter":case"dragleave":Tt=null;break;case"mouseover":case"mouseout":jt=null;break;case"pointerover":case"pointerout":Nt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Rt.delete(t.pointerId)}}function Mt(e,t,n,r,a,o){return null===e||e.nativeEvent!==o?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:o,targetContainers:[a]},null!==t&&null!==(t=va(t))&&Et(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==a&&-1===t.indexOf(a)&&t.push(a),e)}function It(e){var t=ya(e.target);if(null!==t){var n=We(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ue(n)))return e.blockedOn=t,void kt(e.priority,(function(){Ct(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Lt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Kt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=va(n))&&Et(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);be=r,n.target.dispatchEvent(r),be=null,t.shift()}return!0}function Ft(e,t,n){Lt(e)&&n.delete(t)}function $t(){St=!1,null!==Bt&&Lt(Bt)&&(Bt=null),null!==Tt&&Lt(Tt)&&(Tt=null),null!==jt&&Lt(jt)&&(jt=null),Nt.forEach(Ft),Rt.forEach(Ft)}function Dt(e,t){e.blockedOn===t&&(e.blockedOn=null,St||(St=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,$t)))}function Wt(e){function t(t){return Dt(t,e)}if(0<_t.length){Dt(_t[0],e);for(var n=1;n<_t.length;n++){var r=_t[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==Bt&&Dt(Bt,e),null!==Tt&&Dt(Tt,e),null!==jt&&Dt(jt,e),Nt.forEach(t),Rt.forEach(t),n=0;n<Pt.length;n++)(r=Pt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Pt.length&&null===(n=Pt[0]).blockedOn;)It(n),null===n.blockedOn&&Pt.shift()}var Ut=b.ReactCurrentBatchConfig,Vt=!0;function Ht(e,t,n,r){var a=vt,o=Ut.transition;Ut.transition=null;try{vt=1,Gt(e,t,n,r)}finally{vt=a,Ut.transition=o}}function Yt(e,t,n,r){var a=vt,o=Ut.transition;Ut.transition=null;try{vt=4,Gt(e,t,n,r)}finally{vt=a,Ut.transition=o}}function Gt(e,t,n,r){if(Vt){var a=Kt(e,t,n,r);if(null===a)Vr(e,t,r,qt,n),zt(e,r);else if(function(e,t,n,r,a){switch(t){case"focusin":return Bt=Mt(Bt,e,t,n,r,a),!0;case"dragenter":return Tt=Mt(Tt,e,t,n,r,a),!0;case"mouseover":return jt=Mt(jt,e,t,n,r,a),!0;case"pointerover":var o=a.pointerId;return Nt.set(o,Mt(Nt.get(o)||null,e,t,n,r,a)),!0;case"gotpointercapture":return o=a.pointerId,Rt.set(o,Mt(Rt.get(o)||null,e,t,n,r,a)),!0}return!1}(a,e,t,n,r))r.stopPropagation();else if(zt(e,r),4&t&&-1<Ot.indexOf(e)){for(;null!==a;){var o=va(a);if(null!==o&&xt(o),null===(o=Kt(e,t,n,r))&&Vr(e,t,r,qt,n),o===a)break;a=o}null!==a&&r.stopPropagation()}else Vr(e,t,r,null,n)}}var qt=null;function Kt(e,t,n,r){if(qt=null,null!==(e=ya(e=xe(r))))if(null===(t=We(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=Ue(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return qt=e,null}function Xt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Je()){case Ze:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Qt=null,Jt=null,Zt=null;function en(){if(Zt)return Zt;var e,t,n=Jt,r=n.length,a="value"in Qt?Qt.value:Qt.textContent,o=a.length;for(e=0;e<r&&n[e]===a[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===a[o-t];t++);return Zt=a.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function an(e){function t(t,n,r,a,o){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=a,this.target=o,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(a):a[i]);return this.isDefaultPrevented=(null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return I(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var on,ln,sn,un={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},cn=an(un),dn=I({},un,{view:0,detail:0}),pn=an(dn),fn=I({},dn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:kn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==sn&&(sn&&"mousemove"===e.type?(on=e.screenX-sn.screenX,ln=e.screenY-sn.screenY):ln=on=0,sn=e),on)},movementY:function(e){return"movementY"in e?e.movementY:ln}}),mn=an(fn),hn=an(I({},fn,{dataTransfer:0})),An=an(I({},dn,{relatedTarget:0})),gn=an(I({},un,{animationName:0,elapsedTime:0,pseudoElement:0})),yn=I({},un,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),vn=an(yn),bn=an(I({},un,{data:0})),xn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},En={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Cn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function wn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Cn[e])&&!!t[e]}function kn(){return wn}var Sn=I({},dn,{key:function(e){if(e.key){var t=xn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?En[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:kn,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),_n=an(Sn),Bn=an(I({},fn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Tn=an(I({},dn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:kn})),jn=an(I({},un,{propertyName:0,elapsedTime:0,pseudoElement:0})),Nn=I({},fn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Rn=an(Nn),Pn=[9,13,27,32],On=c&&"CompositionEvent"in window,zn=null;c&&"documentMode"in document&&(zn=document.documentMode);var Mn=c&&"TextEvent"in window&&!zn,In=c&&(!On||zn&&8<zn&&11>=zn),Ln=String.fromCharCode(32),Fn=!1;function $n(e,t){switch(e){case"keyup":return-1!==Pn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Dn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Wn=!1,Un={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Vn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Un[e.type]:"textarea"===t}function Hn(e,t,n,r){Se(r),0<(t=Yr(t,"onChange")).length&&(n=new cn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Yn=null,Gn=null;function qn(e){Lr(e,0)}function Kn(e){if(G(ba(e)))return e}function Xn(e,t){if("change"===e)return t}var Qn=!1;if(c){var Jn;if(c){var Zn="oninput"in document;if(!Zn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Zn="function"==typeof er.oninput}Jn=Zn}else Jn=!1;Qn=Jn&&(!document.documentMode||9<document.documentMode)}function tr(){Yn&&(Yn.detachEvent("onpropertychange",nr),Gn=Yn=null)}function nr(e){if("value"===e.propertyName&&Kn(Gn)){var t=[];Hn(t,Gn,e,xe(e)),Ne(qn,t)}}function rr(e,t,n){"focusin"===e?(tr(),Gn=n,(Yn=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function ar(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Kn(Gn)}function or(e,t){if("click"===e)return Kn(t)}function ir(e,t){if("input"===e||"change"===e)return Kn(t)}var lr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function sr(e,t){if(lr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var a=n[r];if(!d.call(t,a)||!lr(e[a],t[a]))return!1}return!0}function ur(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=ur(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=ur(r)}}function dr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?dr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function pr(){for(var e=window,t=q();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=q((e=t.contentWindow).document)}return t}function fr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function mr(e){var t=pr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&dr(n.ownerDocument.documentElement,n)){if(null!==r&&fr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var a=n.textContent.length,o=Math.min(r.start,a);r=void 0===r.end?o:Math.min(r.end,a),!e.extend&&o>r&&(a=r,r=o,o=a),a=cr(n,o);var i=cr(n,r);a&&i&&(1!==e.rangeCount||e.anchorNode!==a.node||e.anchorOffset!==a.offset||e.focusNode!==i.node||e.focusOffset!==i.offset)&&((t=t.createRange()).setStart(a.node,a.offset),e.removeAllRanges(),o>r?(e.addRange(t),e.extend(i.node,i.offset)):(t.setEnd(i.node,i.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var hr=c&&"documentMode"in document&&11>=document.documentMode,Ar=null,gr=null,yr=null,vr=!1;function br(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;vr||null==Ar||Ar!==q(r)||(r="selectionStart"in(r=Ar)&&fr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},yr&&sr(yr,r)||(yr=r,0<(r=Yr(gr,"onSelect")).length&&(t=new cn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=Ar)))}function xr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Er={animationend:xr("Animation","AnimationEnd"),animationiteration:xr("Animation","AnimationIteration"),animationstart:xr("Animation","AnimationStart"),transitionend:xr("Transition","TransitionEnd")},Cr={},wr={};function kr(e){if(Cr[e])return Cr[e];if(!Er[e])return e;var t,n=Er[e];for(t in n)if(n.hasOwnProperty(t)&&t in wr)return Cr[e]=n[t];return e}c&&(wr=document.createElement("div").style,"AnimationEvent"in window||(delete Er.animationend.animation,delete Er.animationiteration.animation,delete Er.animationstart.animation),"TransitionEvent"in window||delete Er.transitionend.transition);var Sr=kr("animationend"),_r=kr("animationiteration"),Br=kr("animationstart"),Tr=kr("transitionend"),jr=new Map,Nr="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Rr(e,t){jr.set(e,t),s(t,[e])}for(var Pr=0;Pr<Nr.length;Pr++){var Or=Nr[Pr];Rr(Or.toLowerCase(),"on"+(Or[0].toUpperCase()+Or.slice(1)))}Rr(Sr,"onAnimationEnd"),Rr(_r,"onAnimationIteration"),Rr(Br,"onAnimationStart"),Rr("dblclick","onDoubleClick"),Rr("focusin","onFocus"),Rr("focusout","onBlur"),Rr(Tr,"onTransitionEnd"),u("onMouseEnter",["mouseout","mouseover"]),u("onMouseLeave",["mouseout","mouseover"]),u("onPointerEnter",["pointerout","pointerover"]),u("onPointerLeave",["pointerout","pointerover"]),s("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),s("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),s("onBeforeInput",["compositionend","keypress","textInput","paste"]),s("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var zr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Mr=new Set("cancel close invalid load scroll toggle".split(" ").concat(zr));function Ir(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,a,i,l,s,u){if(De.apply(this,arguments),Me){if(!Me)throw Error(o(198));var c=Ie;Me=!1,Ie=null,Le||(Le=!0,Fe=c)}}(r,t,void 0,e),e.currentTarget=null}function Lr(e,t){t=!!(4&t);for(var n=0;n<e.length;n++){var r=e[n],a=r.event;r=r.listeners;e:{var o=void 0;if(t)for(var i=r.length-1;0<=i;i--){var l=r[i],s=l.instance,u=l.currentTarget;if(l=l.listener,s!==o&&a.isPropagationStopped())break e;Ir(a,l,u),o=s}else for(i=0;i<r.length;i++){if(s=(l=r[i]).instance,u=l.currentTarget,l=l.listener,s!==o&&a.isPropagationStopped())break e;Ir(a,l,u),o=s}}}if(Le)throw e=Fe,Le=!1,Fe=null,e}function Fr(e,t){var n=t[ha];void 0===n&&(n=t[ha]=new Set);var r=e+"__bubble";n.has(r)||(Ur(t,e,2,!1),n.add(r))}function $r(e,t,n){var r=0;t&&(r|=4),Ur(n,e,r,t)}var Dr="_reactListening"+Math.random().toString(36).slice(2);function Wr(e){if(!e[Dr]){e[Dr]=!0,i.forEach((function(t){"selectionchange"!==t&&(Mr.has(t)||$r(t,!1,e),$r(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Dr]||(t[Dr]=!0,$r("selectionchange",!1,t))}}function Ur(e,t,n,r){switch(Xt(t)){case 1:var a=Ht;break;case 4:a=Yt;break;default:a=Gt}n=a.bind(null,t,n,e),a=void 0,!Pe||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(a=!0),r?void 0!==a?e.addEventListener(t,n,{capture:!0,passive:a}):e.addEventListener(t,n,!0):void 0!==a?e.addEventListener(t,n,{passive:a}):e.addEventListener(t,n,!1)}function Vr(e,t,n,r,a){var o=r;if(!(1&t||2&t||null===r))e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var l=r.stateNode.containerInfo;if(l===a||8===l.nodeType&&l.parentNode===a)break;if(4===i)for(i=r.return;null!==i;){var s=i.tag;if((3===s||4===s)&&((s=i.stateNode.containerInfo)===a||8===s.nodeType&&s.parentNode===a))return;i=i.return}for(;null!==l;){if(null===(i=ya(l)))return;if(5===(s=i.tag)||6===s){r=o=i;continue e}l=l.parentNode}}r=r.return}Ne((function(){var r=o,a=xe(n),i=[];e:{var l=jr.get(e);if(void 0!==l){var s=cn,u=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":s=_n;break;case"focusin":u="focus",s=An;break;case"focusout":u="blur",s=An;break;case"beforeblur":case"afterblur":s=An;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":s=mn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":s=hn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":s=Tn;break;case Sr:case _r:case Br:s=gn;break;case Tr:s=jn;break;case"scroll":s=pn;break;case"wheel":s=Rn;break;case"copy":case"cut":case"paste":s=vn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":s=Bn}var c=!!(4&t),d=!c&&"scroll"===e,p=c?null!==l?l+"Capture":null:l;c=[];for(var f,m=r;null!==m;){var h=(f=m).stateNode;if(5===f.tag&&null!==h&&(f=h,null!==p&&null!=(h=Re(m,p))&&c.push(Hr(m,h,f))),d)break;m=m.return}0<c.length&&(l=new s(l,u,null,n,a),i.push({event:l,listeners:c}))}}if(!(7&t)){if(s="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||n===be||!(u=n.relatedTarget||n.fromElement)||!ya(u)&&!u[ma])&&(s||l)&&(l=a.window===a?a:(l=a.ownerDocument)?l.defaultView||l.parentWindow:window,s?(s=r,null!==(u=(u=n.relatedTarget||n.toElement)?ya(u):null)&&(u!==(d=We(u))||5!==u.tag&&6!==u.tag)&&(u=null)):(s=null,u=r),s!==u)){if(c=mn,h="onMouseLeave",p="onMouseEnter",m="mouse","pointerout"!==e&&"pointerover"!==e||(c=Bn,h="onPointerLeave",p="onPointerEnter",m="pointer"),d=null==s?l:ba(s),f=null==u?l:ba(u),(l=new c(h,m+"leave",s,n,a)).target=d,l.relatedTarget=f,h=null,ya(a)===r&&((c=new c(p,m+"enter",u,n,a)).target=f,c.relatedTarget=d,h=c),d=h,s&&u)e:{for(p=u,m=0,f=c=s;f;f=Gr(f))m++;for(f=0,h=p;h;h=Gr(h))f++;for(;0<m-f;)c=Gr(c),m--;for(;0<f-m;)p=Gr(p),f--;for(;m--;){if(c===p||null!==p&&c===p.alternate)break e;c=Gr(c),p=Gr(p)}c=null}else c=null;null!==s&&qr(i,l,s,c,!1),null!==u&&null!==d&&qr(i,d,u,c,!0)}if("select"===(s=(l=r?ba(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===s&&"file"===l.type)var A=Xn;else if(Vn(l))if(Qn)A=ir;else{A=ar;var g=rr}else(s=l.nodeName)&&"input"===s.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(A=or);switch(A&&(A=A(e,r))?Hn(i,A,n,a):(g&&g(e,l,r),"focusout"===e&&(g=l._wrapperState)&&g.controlled&&"number"===l.type&&ee(l,"number",l.value)),g=r?ba(r):window,e){case"focusin":(Vn(g)||"true"===g.contentEditable)&&(Ar=g,gr=r,yr=null);break;case"focusout":yr=gr=Ar=null;break;case"mousedown":vr=!0;break;case"contextmenu":case"mouseup":case"dragend":vr=!1,br(i,n,a);break;case"selectionchange":if(hr)break;case"keydown":case"keyup":br(i,n,a)}var y;if(On)e:{switch(e){case"compositionstart":var v="onCompositionStart";break e;case"compositionend":v="onCompositionEnd";break e;case"compositionupdate":v="onCompositionUpdate";break e}v=void 0}else Wn?$n(e,n)&&(v="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(v="onCompositionStart");v&&(In&&"ko"!==n.locale&&(Wn||"onCompositionStart"!==v?"onCompositionEnd"===v&&Wn&&(y=en()):(Jt="value"in(Qt=a)?Qt.value:Qt.textContent,Wn=!0)),0<(g=Yr(r,v)).length&&(v=new bn(v,e,null,n,a),i.push({event:v,listeners:g}),(y||null!==(y=Dn(n)))&&(v.data=y))),(y=Mn?function(e,t){switch(e){case"compositionend":return Dn(t);case"keypress":return 32!==t.which?null:(Fn=!0,Ln);case"textInput":return(e=t.data)===Ln&&Fn?null:e;default:return null}}(e,n):function(e,t){if(Wn)return"compositionend"===e||!On&&$n(e,t)?(e=en(),Zt=Jt=Qt=null,Wn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return In&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Yr(r,"onBeforeInput")).length&&(a=new bn("onBeforeInput","beforeinput",null,n,a),i.push({event:a,listeners:r}),a.data=y)}Lr(i,t)}))}function Hr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Yr(e,t){for(var n=t+"Capture",r=[];null!==e;){var a=e,o=a.stateNode;5===a.tag&&null!==o&&(a=o,null!=(o=Re(e,n))&&r.unshift(Hr(e,o,a)),null!=(o=Re(e,t))&&r.push(Hr(e,o,a))),e=e.return}return r}function Gr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function qr(e,t,n,r,a){for(var o=t._reactName,i=[];null!==n&&n!==r;){var l=n,s=l.alternate,u=l.stateNode;if(null!==s&&s===r)break;5===l.tag&&null!==u&&(l=u,a?null!=(s=Re(n,o))&&i.unshift(Hr(n,s,l)):a||null!=(s=Re(n,o))&&i.push(Hr(n,s,l))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}var Kr=/\r\n?/g,Xr=/\u0000|\uFFFD/g;function Qr(e){return("string"==typeof e?e:""+e).replace(Kr,"\n").replace(Xr,"")}function Jr(e,t,n){if(t=Qr(t),Qr(e)!==t&&n)throw Error(o(425))}function Zr(){}var ea=null,ta=null;function na(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ra="function"==typeof setTimeout?setTimeout:void 0,aa="function"==typeof clearTimeout?clearTimeout:void 0,oa="function"==typeof Promise?Promise:void 0,ia="function"==typeof queueMicrotask?queueMicrotask:void 0!==oa?function(e){return oa.resolve(null).then(e).catch(la)}:ra;function la(e){setTimeout((function(){throw e}))}function sa(e,t){var n=t,r=0;do{var a=n.nextSibling;if(e.removeChild(n),a&&8===a.nodeType)if("/$"===(n=a.data)){if(0===r)return e.removeChild(a),void Wt(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=a}while(n);Wt(t)}function ua(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function ca(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var da=Math.random().toString(36).slice(2),pa="__reactFiber$"+da,fa="__reactProps$"+da,ma="__reactContainer$"+da,ha="__reactEvents$"+da,Aa="__reactListeners$"+da,ga="__reactHandles$"+da;function ya(e){var t=e[pa];if(t)return t;for(var n=e.parentNode;n;){if(t=n[ma]||n[pa]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=ca(e);null!==e;){if(n=e[pa])return n;e=ca(e)}return t}n=(e=n).parentNode}return null}function va(e){return!(e=e[pa]||e[ma])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function ba(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(o(33))}function xa(e){return e[fa]||null}var Ea=[],Ca=-1;function wa(e){return{current:e}}function ka(e){0>Ca||(e.current=Ea[Ca],Ea[Ca]=null,Ca--)}function Sa(e,t){Ca++,Ea[Ca]=e.current,e.current=t}var _a={},Ba=wa(_a),Ta=wa(!1),ja=_a;function Na(e,t){var n=e.type.contextTypes;if(!n)return _a;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var a,o={};for(a in n)o[a]=t[a];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function Ra(e){return null!=e.childContextTypes}function Pa(){ka(Ta),ka(Ba)}function Oa(e,t,n){if(Ba.current!==_a)throw Error(o(168));Sa(Ba,t),Sa(Ta,n)}function za(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in t))throw Error(o(108,U(e)||"Unknown",a));return I({},n,r)}function Ma(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||_a,ja=Ba.current,Sa(Ba,e),Sa(Ta,Ta.current),!0}function Ia(e,t,n){var r=e.stateNode;if(!r)throw Error(o(169));n?(e=za(e,t,ja),r.__reactInternalMemoizedMergedChildContext=e,ka(Ta),ka(Ba),Sa(Ba,e)):ka(Ta),Sa(Ta,n)}var La=null,Fa=!1,$a=!1;function Da(e){null===La?La=[e]:La.push(e)}function Wa(){if(!$a&&null!==La){$a=!0;var e=0,t=vt;try{var n=La;for(vt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}La=null,Fa=!1}catch(t){throw null!==La&&(La=La.slice(e+1)),Ge(Ze,Wa),t}finally{vt=t,$a=!1}}return null}var Ua=[],Va=0,Ha=null,Ya=0,Ga=[],qa=0,Ka=null,Xa=1,Qa="";function Ja(e,t){Ua[Va++]=Ya,Ua[Va++]=Ha,Ha=e,Ya=t}function Za(e,t,n){Ga[qa++]=Xa,Ga[qa++]=Qa,Ga[qa++]=Ka,Ka=e;var r=Xa;e=Qa;var a=32-it(r)-1;r&=~(1<<a),n+=1;var o=32-it(t)+a;if(30<o){var i=a-a%5;o=(r&(1<<i)-1).toString(32),r>>=i,a-=i,Xa=1<<32-it(t)+a|n<<a|r,Qa=o+e}else Xa=1<<o|n<<a|r,Qa=e}function eo(e){null!==e.return&&(Ja(e,1),Za(e,1,0))}function to(e){for(;e===Ha;)Ha=Ua[--Va],Ua[Va]=null,Ya=Ua[--Va],Ua[Va]=null;for(;e===Ka;)Ka=Ga[--qa],Ga[qa]=null,Qa=Ga[--qa],Ga[qa]=null,Xa=Ga[--qa],Ga[qa]=null}var no=null,ro=null,ao=!1,oo=null;function io(e,t){var n=Nu(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function lo(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,no=e,ro=ua(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,no=e,ro=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Ka?{id:Xa,overflow:Qa}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Nu(18,null,null,0)).stateNode=t,n.return=e,e.child=n,no=e,ro=null,!0);default:return!1}}function so(e){return!(!(1&e.mode)||128&e.flags)}function uo(e){if(ao){var t=ro;if(t){var n=t;if(!lo(e,t)){if(so(e))throw Error(o(418));t=ua(n.nextSibling);var r=no;t&&lo(e,t)?io(r,n):(e.flags=-4097&e.flags|2,ao=!1,no=e)}}else{if(so(e))throw Error(o(418));e.flags=-4097&e.flags|2,ao=!1,no=e}}}function co(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;no=e}function po(e){if(e!==no)return!1;if(!ao)return co(e),ao=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!na(e.type,e.memoizedProps)),t&&(t=ro)){if(so(e))throw fo(),Error(o(418));for(;t;)io(e,t),t=ua(t.nextSibling)}if(co(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(o(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){ro=ua(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}ro=null}}else ro=no?ua(e.stateNode.nextSibling):null;return!0}function fo(){for(var e=ro;e;)e=ua(e.nextSibling)}function mo(){ro=no=null,ao=!1}function ho(e){null===oo?oo=[e]:oo.push(e)}var Ao=b.ReactCurrentBatchConfig;function go(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(o(309));var r=n.stateNode}if(!r)throw Error(o(147,e));var a=r,i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:(t=function(e){var t=a.refs;null===e?delete t[i]:t[i]=e},t._stringRef=i,t)}if("string"!=typeof e)throw Error(o(284));if(!n._owner)throw Error(o(290,e))}return e}function yo(e,t){throw e=Object.prototype.toString.call(t),Error(o(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function vo(e){return(0,e._init)(e._payload)}function bo(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function a(e,t){return(e=Pu(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function l(t){return e&&null===t.alternate&&(t.flags|=2),t}function s(e,t,n,r){return null===t||6!==t.tag?((t=Iu(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function u(e,t,n,r){var o=n.type;return o===C?d(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===o||"object"==typeof o&&null!==o&&o.$$typeof===R&&vo(o)===t.type)?((r=a(t,n.props)).ref=go(e,t,n),r.return=e,r):((r=Ou(n.type,n.key,n.props,null,e.mode,r)).ref=go(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Lu(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function d(e,t,n,r,o){return null===t||7!==t.tag?((t=zu(n,e.mode,r,o)).return=e,t):((t=a(t,n)).return=e,t)}function p(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Iu(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case x:return(n=Ou(t.type,t.key,t.props,null,e.mode,n)).ref=go(e,null,t),n.return=e,n;case E:return(t=Lu(t,e.mode,n)).return=e,t;case R:return p(e,(0,t._init)(t._payload),n)}if(te(t)||z(t))return(t=zu(t,e.mode,n,null)).return=e,t;yo(e,t)}return null}function f(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==a?null:s(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case x:return n.key===a?u(e,t,n,r):null;case E:return n.key===a?c(e,t,n,r):null;case R:return f(e,t,(a=n._init)(n._payload),r)}if(te(n)||z(n))return null!==a?null:d(e,t,n,r,null);yo(e,n)}return null}function m(e,t,n,r,a){if("string"==typeof r&&""!==r||"number"==typeof r)return s(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case x:return u(t,e=e.get(null===r.key?n:r.key)||null,r,a);case E:return c(t,e=e.get(null===r.key?n:r.key)||null,r,a);case R:return m(e,t,n,(0,r._init)(r._payload),a)}if(te(r)||z(r))return d(t,e=e.get(n)||null,r,a,null);yo(t,r)}return null}function h(a,o,l,s){for(var u=null,c=null,d=o,h=o=0,A=null;null!==d&&h<l.length;h++){d.index>h?(A=d,d=null):A=d.sibling;var g=f(a,d,l[h],s);if(null===g){null===d&&(d=A);break}e&&d&&null===g.alternate&&t(a,d),o=i(g,o,h),null===c?u=g:c.sibling=g,c=g,d=A}if(h===l.length)return n(a,d),ao&&Ja(a,h),u;if(null===d){for(;h<l.length;h++)null!==(d=p(a,l[h],s))&&(o=i(d,o,h),null===c?u=d:c.sibling=d,c=d);return ao&&Ja(a,h),u}for(d=r(a,d);h<l.length;h++)null!==(A=m(d,a,h,l[h],s))&&(e&&null!==A.alternate&&d.delete(null===A.key?h:A.key),o=i(A,o,h),null===c?u=A:c.sibling=A,c=A);return e&&d.forEach((function(e){return t(a,e)})),ao&&Ja(a,h),u}function A(a,l,s,u){var c=z(s);if("function"!=typeof c)throw Error(o(150));if(null==(s=c.call(s)))throw Error(o(151));for(var d=c=null,h=l,A=l=0,g=null,y=s.next();null!==h&&!y.done;A++,y=s.next()){h.index>A?(g=h,h=null):g=h.sibling;var v=f(a,h,y.value,u);if(null===v){null===h&&(h=g);break}e&&h&&null===v.alternate&&t(a,h),l=i(v,l,A),null===d?c=v:d.sibling=v,d=v,h=g}if(y.done)return n(a,h),ao&&Ja(a,A),c;if(null===h){for(;!y.done;A++,y=s.next())null!==(y=p(a,y.value,u))&&(l=i(y,l,A),null===d?c=y:d.sibling=y,d=y);return ao&&Ja(a,A),c}for(h=r(a,h);!y.done;A++,y=s.next())null!==(y=m(h,a,A,y.value,u))&&(e&&null!==y.alternate&&h.delete(null===y.key?A:y.key),l=i(y,l,A),null===d?c=y:d.sibling=y,d=y);return e&&h.forEach((function(e){return t(a,e)})),ao&&Ja(a,A),c}return function e(r,o,i,s){if("object"==typeof i&&null!==i&&i.type===C&&null===i.key&&(i=i.props.children),"object"==typeof i&&null!==i){switch(i.$$typeof){case x:e:{for(var u=i.key,c=o;null!==c;){if(c.key===u){if((u=i.type)===C){if(7===c.tag){n(r,c.sibling),(o=a(c,i.props.children)).return=r,r=o;break e}}else if(c.elementType===u||"object"==typeof u&&null!==u&&u.$$typeof===R&&vo(u)===c.type){n(r,c.sibling),(o=a(c,i.props)).ref=go(r,c,i),o.return=r,r=o;break e}n(r,c);break}t(r,c),c=c.sibling}i.type===C?((o=zu(i.props.children,r.mode,s,i.key)).return=r,r=o):((s=Ou(i.type,i.key,i.props,null,r.mode,s)).ref=go(r,o,i),s.return=r,r=s)}return l(r);case E:e:{for(c=i.key;null!==o;){if(o.key===c){if(4===o.tag&&o.stateNode.containerInfo===i.containerInfo&&o.stateNode.implementation===i.implementation){n(r,o.sibling),(o=a(o,i.children||[])).return=r,r=o;break e}n(r,o);break}t(r,o),o=o.sibling}(o=Lu(i,r.mode,s)).return=r,r=o}return l(r);case R:return e(r,o,(c=i._init)(i._payload),s)}if(te(i))return h(r,o,i,s);if(z(i))return A(r,o,i,s);yo(r,i)}return"string"==typeof i&&""!==i||"number"==typeof i?(i=""+i,null!==o&&6===o.tag?(n(r,o.sibling),(o=a(o,i)).return=r,r=o):(n(r,o),(o=Iu(i,r.mode,s)).return=r,r=o),l(r)):n(r,o)}}var xo=bo(!0),Eo=bo(!1),Co=wa(null),wo=null,ko=null,So=null;function _o(){So=ko=wo=null}function Bo(e){var t=Co.current;ka(Co),e._currentValue=t}function To(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function jo(e,t){wo=e,So=ko=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(!!(e.lanes&t)&&(vl=!0),e.firstContext=null)}function No(e){var t=e._currentValue;if(So!==e)if(e={context:e,memoizedValue:t,next:null},null===ko){if(null===wo)throw Error(o(308));ko=e,wo.dependencies={lanes:0,firstContext:e}}else ko=ko.next=e;return t}var Ro=null;function Po(e){null===Ro?Ro=[e]:Ro.push(e)}function Oo(e,t,n,r){var a=t.interleaved;return null===a?(n.next=n,Po(t)):(n.next=a.next,a.next=n),t.interleaved=n,zo(e,r)}function zo(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var Mo=!1;function Io(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Lo(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Fo(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function $o(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,2&Bs){var a=r.pending;return null===a?t.next=t:(t.next=a.next,a.next=t),r.pending=t,zo(e,n)}return null===(a=r.interleaved)?(t.next=t,Po(r)):(t.next=a.next,a.next=t),r.interleaved=t,zo(e,n)}function Do(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,yt(e,n)}}function Wo(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var a=null,o=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===o?a=o=i:o=o.next=i,n=n.next}while(null!==n);null===o?a=o=t:o=o.next=t}else a=o=t;return n={baseState:r.baseState,firstBaseUpdate:a,lastBaseUpdate:o,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Uo(e,t,n,r){var a=e.updateQueue;Mo=!1;var o=a.firstBaseUpdate,i=a.lastBaseUpdate,l=a.shared.pending;if(null!==l){a.shared.pending=null;var s=l,u=s.next;s.next=null,null===i?o=u:i.next=u,i=s;var c=e.alternate;null!==c&&(l=(c=c.updateQueue).lastBaseUpdate)!==i&&(null===l?c.firstBaseUpdate=u:l.next=u,c.lastBaseUpdate=s)}if(null!==o){var d=a.baseState;for(i=0,c=u=s=null,l=o;;){var p=l.lane,f=l.eventTime;if((r&p)===p){null!==c&&(c=c.next={eventTime:f,lane:0,tag:l.tag,payload:l.payload,callback:l.callback,next:null});e:{var m=e,h=l;switch(p=t,f=n,h.tag){case 1:if("function"==typeof(m=h.payload)){d=m.call(f,d,p);break e}d=m;break e;case 3:m.flags=-65537&m.flags|128;case 0:if(null==(p="function"==typeof(m=h.payload)?m.call(f,d,p):m))break e;d=I({},d,p);break e;case 2:Mo=!0}}null!==l.callback&&0!==l.lane&&(e.flags|=64,null===(p=a.effects)?a.effects=[l]:p.push(l))}else f={eventTime:f,lane:p,tag:l.tag,payload:l.payload,callback:l.callback,next:null},null===c?(u=c=f,s=d):c=c.next=f,i|=p;if(null===(l=l.next)){if(null===(l=a.shared.pending))break;l=(p=l).next,p.next=null,a.lastBaseUpdate=p,a.shared.pending=null}}if(null===c&&(s=d),a.baseState=s,a.firstBaseUpdate=u,a.lastBaseUpdate=c,null!==(t=a.shared.interleaved)){a=t;do{i|=a.lane,a=a.next}while(a!==t)}else null===o&&(a.shared.lanes=0);Ms|=i,e.lanes=i,e.memoizedState=d}}function Vo(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],a=r.callback;if(null!==a){if(r.callback=null,r=n,"function"!=typeof a)throw Error(o(191,a));a.call(r)}}}var Ho={},Yo=wa(Ho),Go=wa(Ho),qo=wa(Ho);function Ko(e){if(e===Ho)throw Error(o(174));return e}function Xo(e,t){switch(Sa(qo,t),Sa(Go,e),Sa(Yo,Ho),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:se(null,"");break;default:t=se(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}ka(Yo),Sa(Yo,t)}function Qo(){ka(Yo),ka(Go),ka(qo)}function Jo(e){Ko(qo.current);var t=Ko(Yo.current),n=se(t,e.type);t!==n&&(Sa(Go,e),Sa(Yo,n))}function Zo(e){Go.current===e&&(ka(Yo),ka(Go))}var ei=wa(0);function ti(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(128&t.flags)return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var ni=[];function ri(){for(var e=0;e<ni.length;e++)ni[e]._workInProgressVersionPrimary=null;ni.length=0}var ai=b.ReactCurrentDispatcher,oi=b.ReactCurrentBatchConfig,ii=0,li=null,si=null,ui=null,ci=!1,di=!1,pi=0,fi=0;function mi(){throw Error(o(321))}function hi(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!lr(e[n],t[n]))return!1;return!0}function Ai(e,t,n,r,a,i){if(ii=i,li=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,ai.current=null===e||null===e.memoizedState?Zi:el,e=n(r,a),di){i=0;do{if(di=!1,pi=0,25<=i)throw Error(o(301));i+=1,ui=si=null,t.updateQueue=null,ai.current=tl,e=n(r,a)}while(di)}if(ai.current=Ji,t=null!==si&&null!==si.next,ii=0,ui=si=li=null,ci=!1,t)throw Error(o(300));return e}function gi(){var e=0!==pi;return pi=0,e}function yi(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ui?li.memoizedState=ui=e:ui=ui.next=e,ui}function vi(){if(null===si){var e=li.alternate;e=null!==e?e.memoizedState:null}else e=si.next;var t=null===ui?li.memoizedState:ui.next;if(null!==t)ui=t,si=e;else{if(null===e)throw Error(o(310));e={memoizedState:(si=e).memoizedState,baseState:si.baseState,baseQueue:si.baseQueue,queue:si.queue,next:null},null===ui?li.memoizedState=ui=e:ui=ui.next=e}return ui}function bi(e,t){return"function"==typeof t?t(e):t}function xi(e){var t=vi(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=si,a=r.baseQueue,i=n.pending;if(null!==i){if(null!==a){var l=a.next;a.next=i.next,i.next=l}r.baseQueue=a=i,n.pending=null}if(null!==a){i=a.next,r=r.baseState;var s=l=null,u=null,c=i;do{var d=c.lane;if((ii&d)===d)null!==u&&(u=u.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),r=c.hasEagerState?c.eagerState:e(r,c.action);else{var p={lane:d,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===u?(s=u=p,l=r):u=u.next=p,li.lanes|=d,Ms|=d}c=c.next}while(null!==c&&c!==i);null===u?l=r:u.next=s,lr(r,t.memoizedState)||(vl=!0),t.memoizedState=r,t.baseState=l,t.baseQueue=u,n.lastRenderedState=r}if(null!==(e=n.interleaved)){a=e;do{i=a.lane,li.lanes|=i,Ms|=i,a=a.next}while(a!==e)}else null===a&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function Ei(e){var t=vi(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=n.dispatch,a=n.pending,i=t.memoizedState;if(null!==a){n.pending=null;var l=a=a.next;do{i=e(i,l.action),l=l.next}while(l!==a);lr(i,t.memoizedState)||(vl=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function Ci(){}function wi(e,t){var n=li,r=vi(),a=t(),i=!lr(r.memoizedState,a);if(i&&(r.memoizedState=a,vl=!0),r=r.queue,Mi(_i.bind(null,n,r,e),[e]),r.getSnapshot!==t||i||null!==ui&&1&ui.memoizedState.tag){if(n.flags|=2048,Ni(9,Si.bind(null,n,r,a,t),void 0,null),null===Ts)throw Error(o(349));30&ii||ki(n,t,a)}return a}function ki(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=li.updateQueue)?(t={lastEffect:null,stores:null},li.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Si(e,t,n,r){t.value=n,t.getSnapshot=r,Bi(t)&&Ti(e)}function _i(e,t,n){return n((function(){Bi(t)&&Ti(e)}))}function Bi(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!lr(e,n)}catch(e){return!0}}function Ti(e){var t=zo(e,1);null!==t&&nu(t,e,1,-1)}function ji(e){var t=yi();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:bi,lastRenderedState:e},t.queue=e,e=e.dispatch=qi.bind(null,li,e),[t.memoizedState,e]}function Ni(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=li.updateQueue)?(t={lastEffect:null,stores:null},li.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Ri(){return vi().memoizedState}function Pi(e,t,n,r){var a=yi();li.flags|=e,a.memoizedState=Ni(1|t,n,void 0,void 0===r?null:r)}function Oi(e,t,n,r){var a=vi();r=void 0===r?null:r;var o=void 0;if(null!==si){var i=si.memoizedState;if(o=i.destroy,null!==r&&hi(r,i.deps))return void(a.memoizedState=Ni(t,n,o,r))}li.flags|=e,a.memoizedState=Ni(1|t,n,o,r)}function zi(e,t){return Pi(8390656,8,e,t)}function Mi(e,t){return Oi(2048,8,e,t)}function Ii(e,t){return Oi(4,2,e,t)}function Li(e,t){return Oi(4,4,e,t)}function Fi(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function $i(e,t,n){return n=null!=n?n.concat([e]):null,Oi(4,4,Fi.bind(null,t,e),n)}function Di(){}function Wi(e,t){var n=vi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&hi(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Ui(e,t){var n=vi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&hi(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Vi(e,t,n){return 21&ii?(lr(n,t)||(n=ht(),li.lanes|=n,Ms|=n,e.baseState=!0),t):(e.baseState&&(e.baseState=!1,vl=!0),e.memoizedState=n)}function Hi(e,t){var n=vt;vt=0!==n&&4>n?n:4,e(!0);var r=oi.transition;oi.transition={};try{e(!1),t()}finally{vt=n,oi.transition=r}}function Yi(){return vi().memoizedState}function Gi(e,t,n){var r=tu(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},Ki(e)?Xi(t,n):null!==(n=Oo(e,t,n,r))&&(nu(n,e,r,eu()),Qi(n,t,r))}function qi(e,t,n){var r=tu(e),a={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(Ki(e))Xi(t,a);else{var o=e.alternate;if(0===e.lanes&&(null===o||0===o.lanes)&&null!==(o=t.lastRenderedReducer))try{var i=t.lastRenderedState,l=o(i,n);if(a.hasEagerState=!0,a.eagerState=l,lr(l,i)){var s=t.interleaved;return null===s?(a.next=a,Po(t)):(a.next=s.next,s.next=a),void(t.interleaved=a)}}catch(e){}null!==(n=Oo(e,t,a,r))&&(nu(n,e,r,a=eu()),Qi(n,t,r))}}function Ki(e){var t=e.alternate;return e===li||null!==t&&t===li}function Xi(e,t){di=ci=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function Qi(e,t,n){if(4194240&n){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,yt(e,n)}}var Ji={readContext:No,useCallback:mi,useContext:mi,useEffect:mi,useImperativeHandle:mi,useInsertionEffect:mi,useLayoutEffect:mi,useMemo:mi,useReducer:mi,useRef:mi,useState:mi,useDebugValue:mi,useDeferredValue:mi,useTransition:mi,useMutableSource:mi,useSyncExternalStore:mi,useId:mi,unstable_isNewReconciler:!1},Zi={readContext:No,useCallback:function(e,t){return yi().memoizedState=[e,void 0===t?null:t],e},useContext:No,useEffect:zi,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Pi(4194308,4,Fi.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Pi(4194308,4,e,t)},useInsertionEffect:function(e,t){return Pi(4,2,e,t)},useMemo:function(e,t){var n=yi();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=yi();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=Gi.bind(null,li,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},yi().memoizedState=e},useState:ji,useDebugValue:Di,useDeferredValue:function(e){return yi().memoizedState=e},useTransition:function(){var e=ji(!1),t=e[0];return e=Hi.bind(null,e[1]),yi().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=li,a=yi();if(ao){if(void 0===n)throw Error(o(407));n=n()}else{if(n=t(),null===Ts)throw Error(o(349));30&ii||ki(r,t,n)}a.memoizedState=n;var i={value:n,getSnapshot:t};return a.queue=i,zi(_i.bind(null,r,i,e),[e]),r.flags|=2048,Ni(9,Si.bind(null,r,i,n,t),void 0,null),n},useId:function(){var e=yi(),t=Ts.identifierPrefix;if(ao){var n=Qa;t=":"+t+"R"+(n=(Xa&~(1<<32-it(Xa)-1)).toString(32)+n),0<(n=pi++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=fi++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},el={readContext:No,useCallback:Wi,useContext:No,useEffect:Mi,useImperativeHandle:$i,useInsertionEffect:Ii,useLayoutEffect:Li,useMemo:Ui,useReducer:xi,useRef:Ri,useState:function(){return xi(bi)},useDebugValue:Di,useDeferredValue:function(e){return Vi(vi(),si.memoizedState,e)},useTransition:function(){return[xi(bi)[0],vi().memoizedState]},useMutableSource:Ci,useSyncExternalStore:wi,useId:Yi,unstable_isNewReconciler:!1},tl={readContext:No,useCallback:Wi,useContext:No,useEffect:Mi,useImperativeHandle:$i,useInsertionEffect:Ii,useLayoutEffect:Li,useMemo:Ui,useReducer:Ei,useRef:Ri,useState:function(){return Ei(bi)},useDebugValue:Di,useDeferredValue:function(e){var t=vi();return null===si?t.memoizedState=e:Vi(t,si.memoizedState,e)},useTransition:function(){return[Ei(bi)[0],vi().memoizedState]},useMutableSource:Ci,useSyncExternalStore:wi,useId:Yi,unstable_isNewReconciler:!1};function nl(e,t){if(e&&e.defaultProps){for(var n in t=I({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}function rl(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:I({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var al={isMounted:function(e){return!!(e=e._reactInternals)&&We(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=eu(),a=tu(e),o=Fo(r,a);o.payload=t,null!=n&&(o.callback=n),null!==(t=$o(e,o,a))&&(nu(t,e,a,r),Do(t,e,a))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=eu(),a=tu(e),o=Fo(r,a);o.tag=1,o.payload=t,null!=n&&(o.callback=n),null!==(t=$o(e,o,a))&&(nu(t,e,a,r),Do(t,e,a))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=eu(),r=tu(e),a=Fo(n,r);a.tag=2,null!=t&&(a.callback=t),null!==(t=$o(e,a,r))&&(nu(t,e,r,n),Do(t,e,r))}};function ol(e,t,n,r,a,o,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,i):!(t.prototype&&t.prototype.isPureReactComponent&&sr(n,r)&&sr(a,o))}function il(e,t,n){var r=!1,a=_a,o=t.contextType;return"object"==typeof o&&null!==o?o=No(o):(a=Ra(t)?ja:Ba.current,o=(r=null!=(r=t.contextTypes))?Na(e,a):_a),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=al,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=o),t}function ll(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&al.enqueueReplaceState(t,t.state,null)}function sl(e,t,n,r){var a=e.stateNode;a.props=n,a.state=e.memoizedState,a.refs={},Io(e);var o=t.contextType;"object"==typeof o&&null!==o?a.context=No(o):(o=Ra(t)?ja:Ba.current,a.context=Na(e,o)),a.state=e.memoizedState,"function"==typeof(o=t.getDerivedStateFromProps)&&(rl(e,t,o,n),a.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(t=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),t!==a.state&&al.enqueueReplaceState(a,a.state,null),Uo(e,n,a,r),a.state=e.memoizedState),"function"==typeof a.componentDidMount&&(e.flags|=4194308)}function ul(e,t){try{var n="",r=t;do{n+=D(r),r=r.return}while(r);var a=n}catch(e){a="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:a,digest:null}}function cl(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function dl(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var pl="function"==typeof WeakMap?WeakMap:Map;function fl(e,t,n){(n=Fo(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Vs||(Vs=!0,Hs=r),dl(0,t)},n}function ml(e,t,n){(n=Fo(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var a=t.value;n.payload=function(){return r(a)},n.callback=function(){dl(0,t)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){dl(0,t),"function"!=typeof r&&(null===Ys?Ys=new Set([this]):Ys.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function hl(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new pl;var a=new Set;r.set(t,a)}else void 0===(a=r.get(t))&&(a=new Set,r.set(t,a));a.has(n)||(a.add(n),e=ku.bind(null,e,t,n),t.then(e,e))}function Al(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function gl(e,t,n,r,a){return 1&e.mode?(e.flags|=65536,e.lanes=a,e):(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=Fo(-1,1)).tag=2,$o(n,t,1))),n.lanes|=1),e)}var yl=b.ReactCurrentOwner,vl=!1;function bl(e,t,n,r){t.child=null===e?Eo(t,null,n,r):xo(t,e.child,n,r)}function xl(e,t,n,r,a){n=n.render;var o=t.ref;return jo(t,a),r=Ai(e,t,n,r,o,a),n=gi(),null===e||vl?(ao&&n&&eo(t),t.flags|=1,bl(e,t,r,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,Vl(e,t,a))}function El(e,t,n,r,a){if(null===e){var o=n.type;return"function"!=typeof o||Ru(o)||void 0!==o.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Ou(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=o,Cl(e,t,o,r,a))}if(o=e.child,!(e.lanes&a)){var i=o.memoizedProps;if((n=null!==(n=n.compare)?n:sr)(i,r)&&e.ref===t.ref)return Vl(e,t,a)}return t.flags|=1,(e=Pu(o,r)).ref=t.ref,e.return=t,t.child=e}function Cl(e,t,n,r,a){if(null!==e){var o=e.memoizedProps;if(sr(o,r)&&e.ref===t.ref){if(vl=!1,t.pendingProps=r=o,!(e.lanes&a))return t.lanes=e.lanes,Vl(e,t,a);131072&e.flags&&(vl=!0)}}return Sl(e,t,n,r,a)}function wl(e,t,n){var r=t.pendingProps,a=r.children,o=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(1&t.mode){if(!(1073741824&n))return e=null!==o?o.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,Sa(Ps,Rs),Rs|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==o?o.baseLanes:n,Sa(Ps,Rs),Rs|=r}else t.memoizedState={baseLanes:0,cachePool:null,transitions:null},Sa(Ps,Rs),Rs|=n;else null!==o?(r=o.baseLanes|n,t.memoizedState=null):r=n,Sa(Ps,Rs),Rs|=r;return bl(e,t,a,n),t.child}function kl(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function Sl(e,t,n,r,a){var o=Ra(n)?ja:Ba.current;return o=Na(t,o),jo(t,a),n=Ai(e,t,n,r,o,a),r=gi(),null===e||vl?(ao&&r&&eo(t),t.flags|=1,bl(e,t,n,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,Vl(e,t,a))}function _l(e,t,n,r,a){if(Ra(n)){var o=!0;Ma(t)}else o=!1;if(jo(t,a),null===t.stateNode)Ul(e,t),il(t,n,r),sl(t,n,r,a),r=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var s=i.context,u=n.contextType;u="object"==typeof u&&null!==u?No(u):Na(t,u=Ra(n)?ja:Ba.current);var c=n.getDerivedStateFromProps,d="function"==typeof c||"function"==typeof i.getSnapshotBeforeUpdate;d||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||s!==u)&&ll(t,i,r,u),Mo=!1;var p=t.memoizedState;i.state=p,Uo(t,r,i,a),s=t.memoizedState,l!==r||p!==s||Ta.current||Mo?("function"==typeof c&&(rl(t,n,c,r),s=t.memoizedState),(l=Mo||ol(t,n,l,r,p,s,u))?(d||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4194308)):("function"==typeof i.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=s),i.props=r,i.state=s,i.context=u,r=l):("function"==typeof i.componentDidMount&&(t.flags|=4194308),r=!1)}else{i=t.stateNode,Lo(e,t),l=t.memoizedProps,u=t.type===t.elementType?l:nl(t.type,l),i.props=u,d=t.pendingProps,p=i.context,s="object"==typeof(s=n.contextType)&&null!==s?No(s):Na(t,s=Ra(n)?ja:Ba.current);var f=n.getDerivedStateFromProps;(c="function"==typeof f||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==d||p!==s)&&ll(t,i,r,s),Mo=!1,p=t.memoizedState,i.state=p,Uo(t,r,i,a);var m=t.memoizedState;l!==d||p!==m||Ta.current||Mo?("function"==typeof f&&(rl(t,n,f,r),m=t.memoizedState),(u=Mo||ol(t,n,u,r,p,m,s)||!1)?(c||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,m,s),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,m,s)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=m),i.props=r,i.state=m,i.context=s,r=u):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=1024),r=!1)}return Bl(e,t,n,r,o,a)}function Bl(e,t,n,r,a,o){kl(e,t);var i=!!(128&t.flags);if(!r&&!i)return a&&Ia(t,n,!1),Vl(e,t,o);r=t.stateNode,yl.current=t;var l=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&i?(t.child=xo(t,e.child,null,o),t.child=xo(t,null,l,o)):bl(e,t,l,o),t.memoizedState=r.state,a&&Ia(t,n,!0),t.child}function Tl(e){var t=e.stateNode;t.pendingContext?Oa(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Oa(0,t.context,!1),Xo(e,t.containerInfo)}function jl(e,t,n,r,a){return mo(),ho(a),t.flags|=256,bl(e,t,n,r),t.child}var Nl,Rl,Pl,Ol,zl={dehydrated:null,treeContext:null,retryLane:0};function Ml(e){return{baseLanes:e,cachePool:null,transitions:null}}function Il(e,t,n){var r,a=t.pendingProps,i=ei.current,l=!1,s=!!(128&t.flags);if((r=s)||(r=(null===e||null!==e.memoizedState)&&!!(2&i)),r?(l=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(i|=1),Sa(ei,1&i),null===e)return uo(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(1&t.mode?"$!"===e.data?t.lanes=8:t.lanes=1073741824:t.lanes=1,null):(s=a.children,e=a.fallback,l?(a=t.mode,l=t.child,s={mode:"hidden",children:s},1&a||null===l?l=Mu(s,a,0,null):(l.childLanes=0,l.pendingProps=s),e=zu(e,a,n,null),l.return=t,e.return=t,l.sibling=e,t.child=l,t.child.memoizedState=Ml(n),t.memoizedState=zl,e):Ll(t,s));if(null!==(i=e.memoizedState)&&null!==(r=i.dehydrated))return function(e,t,n,r,a,i,l){if(n)return 256&t.flags?(t.flags&=-257,Fl(e,t,l,r=cl(Error(o(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(i=r.fallback,a=t.mode,r=Mu({mode:"visible",children:r.children},a,0,null),(i=zu(i,a,l,null)).flags|=2,r.return=t,i.return=t,r.sibling=i,t.child=r,1&t.mode&&xo(t,e.child,null,l),t.child.memoizedState=Ml(l),t.memoizedState=zl,i);if(!(1&t.mode))return Fl(e,t,l,null);if("$!"===a.data){if(r=a.nextSibling&&a.nextSibling.dataset)var s=r.dgst;return r=s,Fl(e,t,l,r=cl(i=Error(o(419)),r,void 0))}if(s=!!(l&e.childLanes),vl||s){if(null!==(r=Ts)){switch(l&-l){case 4:a=2;break;case 16:a=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:a=32;break;case 536870912:a=268435456;break;default:a=0}0!==(a=a&(r.suspendedLanes|l)?0:a)&&a!==i.retryLane&&(i.retryLane=a,zo(e,a),nu(r,e,a,-1))}return hu(),Fl(e,t,l,r=cl(Error(o(421))))}return"$?"===a.data?(t.flags|=128,t.child=e.child,t=_u.bind(null,e),a._reactRetry=t,null):(e=i.treeContext,ro=ua(a.nextSibling),no=t,ao=!0,oo=null,null!==e&&(Ga[qa++]=Xa,Ga[qa++]=Qa,Ga[qa++]=Ka,Xa=e.id,Qa=e.overflow,Ka=t),(t=Ll(t,r.children)).flags|=4096,t)}(e,t,s,a,r,i,n);if(l){l=a.fallback,s=t.mode,r=(i=e.child).sibling;var u={mode:"hidden",children:a.children};return 1&s||t.child===i?(a=Pu(i,u)).subtreeFlags=14680064&i.subtreeFlags:((a=t.child).childLanes=0,a.pendingProps=u,t.deletions=null),null!==r?l=Pu(r,l):(l=zu(l,s,n,null)).flags|=2,l.return=t,a.return=t,a.sibling=l,t.child=a,a=l,l=t.child,s=null===(s=e.child.memoizedState)?Ml(n):{baseLanes:s.baseLanes|n,cachePool:null,transitions:s.transitions},l.memoizedState=s,l.childLanes=e.childLanes&~n,t.memoizedState=zl,a}return e=(l=e.child).sibling,a=Pu(l,{mode:"visible",children:a.children}),!(1&t.mode)&&(a.lanes=n),a.return=t,a.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=a,t.memoizedState=null,a}function Ll(e,t){return(t=Mu({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Fl(e,t,n,r){return null!==r&&ho(r),xo(t,e.child,null,n),(e=Ll(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function $l(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),To(e.return,t,n)}function Dl(e,t,n,r,a){var o=e.memoizedState;null===o?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:a}:(o.isBackwards=t,o.rendering=null,o.renderingStartTime=0,o.last=r,o.tail=n,o.tailMode=a)}function Wl(e,t,n){var r=t.pendingProps,a=r.revealOrder,o=r.tail;if(bl(e,t,r.children,n),2&(r=ei.current))r=1&r|2,t.flags|=128;else{if(null!==e&&128&e.flags)e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&$l(e,n,t);else if(19===e.tag)$l(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(Sa(ei,r),1&t.mode)switch(a){case"forwards":for(n=t.child,a=null;null!==n;)null!==(e=n.alternate)&&null===ti(e)&&(a=n),n=n.sibling;null===(n=a)?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),Dl(t,!1,a,n,o);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===ti(e)){t.child=a;break}e=a.sibling,a.sibling=n,n=a,a=e}Dl(t,!0,n,null,o);break;case"together":Dl(t,!1,null,null,void 0);break;default:t.memoizedState=null}else t.memoizedState=null;return t.child}function Ul(e,t){!(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Vl(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Ms|=t.lanes,!(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(o(153));if(null!==t.child){for(n=Pu(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Pu(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Hl(e,t){if(!ao)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Yl(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=14680064&a.subtreeFlags,r|=14680064&a.flags,a.return=e,a=a.sibling;else for(a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=a.subtreeFlags,r|=a.flags,a.return=e,a=a.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Gl(e,t,n){var r=t.pendingProps;switch(to(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Yl(t),null;case 1:case 17:return Ra(t.type)&&Pa(),Yl(t),null;case 3:return r=t.stateNode,Qo(),ka(Ta),ka(Ba),ri(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(po(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&!(256&t.flags)||(t.flags|=1024,null!==oo&&(iu(oo),oo=null))),Rl(e,t),Yl(t),null;case 5:Zo(t);var a=Ko(qo.current);if(n=t.type,null!==e&&null!=t.stateNode)Pl(e,t,n,r,a),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(o(166));return Yl(t),null}if(e=Ko(Yo.current),po(t)){r=t.stateNode,n=t.type;var i=t.memoizedProps;switch(r[pa]=t,r[fa]=i,e=!!(1&t.mode),n){case"dialog":Fr("cancel",r),Fr("close",r);break;case"iframe":case"object":case"embed":Fr("load",r);break;case"video":case"audio":for(a=0;a<zr.length;a++)Fr(zr[a],r);break;case"source":Fr("error",r);break;case"img":case"image":case"link":Fr("error",r),Fr("load",r);break;case"details":Fr("toggle",r);break;case"input":X(r,i),Fr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!i.multiple},Fr("invalid",r);break;case"textarea":ae(r,i),Fr("invalid",r)}for(var s in ye(n,i),a=null,i)if(i.hasOwnProperty(s)){var u=i[s];"children"===s?"string"==typeof u?r.textContent!==u&&(!0!==i.suppressHydrationWarning&&Jr(r.textContent,u,e),a=["children",u]):"number"==typeof u&&r.textContent!==""+u&&(!0!==i.suppressHydrationWarning&&Jr(r.textContent,u,e),a=["children",""+u]):l.hasOwnProperty(s)&&null!=u&&"onScroll"===s&&Fr("scroll",r)}switch(n){case"input":Y(r),Z(r,i,!0);break;case"textarea":Y(r),ie(r);break;case"select":case"option":break;default:"function"==typeof i.onClick&&(r.onclick=Zr)}r=a,t.updateQueue=r,null!==r&&(t.flags|=4)}else{s=9===a.nodeType?a:a.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=le(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=s.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=s.createElement(n,{is:r.is}):(e=s.createElement(n),"select"===n&&(s=e,r.multiple?s.multiple=!0:r.size&&(s.size=r.size))):e=s.createElementNS(e,n),e[pa]=t,e[fa]=r,Nl(e,t,!1,!1),t.stateNode=e;e:{switch(s=ve(n,r),n){case"dialog":Fr("cancel",e),Fr("close",e),a=r;break;case"iframe":case"object":case"embed":Fr("load",e),a=r;break;case"video":case"audio":for(a=0;a<zr.length;a++)Fr(zr[a],e);a=r;break;case"source":Fr("error",e),a=r;break;case"img":case"image":case"link":Fr("error",e),Fr("load",e),a=r;break;case"details":Fr("toggle",e),a=r;break;case"input":X(e,r),a=K(e,r),Fr("invalid",e);break;case"option":default:a=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},a=I({},r,{value:void 0}),Fr("invalid",e);break;case"textarea":ae(e,r),a=re(e,r),Fr("invalid",e)}for(i in ye(n,a),u=a)if(u.hasOwnProperty(i)){var c=u[i];"style"===i?Ae(e,c):"dangerouslySetInnerHTML"===i?null!=(c=c?c.__html:void 0)&&de(e,c):"children"===i?"string"==typeof c?("textarea"!==n||""!==c)&&pe(e,c):"number"==typeof c&&pe(e,""+c):"suppressContentEditableWarning"!==i&&"suppressHydrationWarning"!==i&&"autoFocus"!==i&&(l.hasOwnProperty(i)?null!=c&&"onScroll"===i&&Fr("scroll",e):null!=c&&v(e,i,c,s))}switch(n){case"input":Y(e),Z(e,r,!1);break;case"textarea":Y(e),ie(e);break;case"option":null!=r.value&&e.setAttribute("value",""+V(r.value));break;case"select":e.multiple=!!r.multiple,null!=(i=r.value)?ne(e,!!r.multiple,i,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=Zr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return Yl(t),null;case 6:if(e&&null!=t.stateNode)Ol(e,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(o(166));if(n=Ko(qo.current),Ko(Yo.current),po(t)){if(r=t.stateNode,n=t.memoizedProps,r[pa]=t,(i=r.nodeValue!==n)&&null!==(e=no))switch(e.tag){case 3:Jr(r.nodeValue,n,!!(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Jr(r.nodeValue,n,!!(1&e.mode))}i&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[pa]=t,t.stateNode=r}return Yl(t),null;case 13:if(ka(ei),r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(ao&&null!==ro&&1&t.mode&&!(128&t.flags))fo(),mo(),t.flags|=98560,i=!1;else if(i=po(t),null!==r&&null!==r.dehydrated){if(null===e){if(!i)throw Error(o(318));if(!(i=null!==(i=t.memoizedState)?i.dehydrated:null))throw Error(o(317));i[pa]=t}else mo(),!(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Yl(t),i=!1}else null!==oo&&(iu(oo),oo=null),i=!0;if(!i)return 65536&t.flags?t:null}return 128&t.flags?(t.lanes=n,t):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(t.child.flags|=8192,1&t.mode&&(null===e||1&ei.current?0===Os&&(Os=3):hu())),null!==t.updateQueue&&(t.flags|=4),Yl(t),null);case 4:return Qo(),Rl(e,t),null===e&&Wr(t.stateNode.containerInfo),Yl(t),null;case 10:return Bo(t.type._context),Yl(t),null;case 19:if(ka(ei),null===(i=t.memoizedState))return Yl(t),null;if(r=!!(128&t.flags),null===(s=i.rendering))if(r)Hl(i,!1);else{if(0!==Os||null!==e&&128&e.flags)for(e=t.child;null!==e;){if(null!==(s=ti(e))){for(t.flags|=128,Hl(i,!1),null!==(r=s.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(i=n).flags&=14680066,null===(s=i.alternate)?(i.childLanes=0,i.lanes=e,i.child=null,i.subtreeFlags=0,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=s.childLanes,i.lanes=s.lanes,i.child=s.child,i.subtreeFlags=0,i.deletions=null,i.memoizedProps=s.memoizedProps,i.memoizedState=s.memoizedState,i.updateQueue=s.updateQueue,i.type=s.type,e=s.dependencies,i.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return Sa(ei,1&ei.current|2),t.child}e=e.sibling}null!==i.tail&&Qe()>Ws&&(t.flags|=128,r=!0,Hl(i,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=ti(s))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),Hl(i,!0),null===i.tail&&"hidden"===i.tailMode&&!s.alternate&&!ao)return Yl(t),null}else 2*Qe()-i.renderingStartTime>Ws&&1073741824!==n&&(t.flags|=128,r=!0,Hl(i,!1),t.lanes=4194304);i.isBackwards?(s.sibling=t.child,t.child=s):(null!==(n=i.last)?n.sibling=s:t.child=s,i.last=s)}return null!==i.tail?(t=i.tail,i.rendering=t,i.tail=t.sibling,i.renderingStartTime=Qe(),t.sibling=null,n=ei.current,Sa(ei,r?1&n|2:1&n),t):(Yl(t),null);case 22:case 23:return du(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&1&t.mode?!!(1073741824&Rs)&&(Yl(t),6&t.subtreeFlags&&(t.flags|=8192)):Yl(t),null;case 24:case 25:return null}throw Error(o(156,t.tag))}function ql(e,t){switch(to(t),t.tag){case 1:return Ra(t.type)&&Pa(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return Qo(),ka(Ta),ka(Ba),ri(),65536&(e=t.flags)&&!(128&e)?(t.flags=-65537&e|128,t):null;case 5:return Zo(t),null;case 13:if(ka(ei),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(o(340));mo()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return ka(ei),null;case 4:return Qo(),null;case 10:return Bo(t.type._context),null;case 22:case 23:return du(),null;default:return null}}Nl=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Rl=function(){},Pl=function(e,t,n,r){var a=e.memoizedProps;if(a!==r){e=t.stateNode,Ko(Yo.current);var o,i=null;switch(n){case"input":a=K(e,a),r=K(e,r),i=[];break;case"select":a=I({},a,{value:void 0}),r=I({},r,{value:void 0}),i=[];break;case"textarea":a=re(e,a),r=re(e,r),i=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(e.onclick=Zr)}for(c in ye(n,r),n=null,a)if(!r.hasOwnProperty(c)&&a.hasOwnProperty(c)&&null!=a[c])if("style"===c){var s=a[c];for(o in s)s.hasOwnProperty(o)&&(n||(n={}),n[o]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(l.hasOwnProperty(c)?i||(i=[]):(i=i||[]).push(c,null));for(c in r){var u=r[c];if(s=null!=a?a[c]:void 0,r.hasOwnProperty(c)&&u!==s&&(null!=u||null!=s))if("style"===c)if(s){for(o in s)!s.hasOwnProperty(o)||u&&u.hasOwnProperty(o)||(n||(n={}),n[o]="");for(o in u)u.hasOwnProperty(o)&&s[o]!==u[o]&&(n||(n={}),n[o]=u[o])}else n||(i||(i=[]),i.push(c,n)),n=u;else"dangerouslySetInnerHTML"===c?(u=u?u.__html:void 0,s=s?s.__html:void 0,null!=u&&s!==u&&(i=i||[]).push(c,u)):"children"===c?"string"!=typeof u&&"number"!=typeof u||(i=i||[]).push(c,""+u):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(l.hasOwnProperty(c)?(null!=u&&"onScroll"===c&&Fr("scroll",e),i||s===u||(i=[])):(i=i||[]).push(c,u))}n&&(i=i||[]).push("style",n);var c=i;(t.updateQueue=c)&&(t.flags|=4)}},Ol=function(e,t,n,r){n!==r&&(t.flags|=4)};var Kl=!1,Xl=!1,Ql="function"==typeof WeakSet?WeakSet:Set,Jl=null;function Zl(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){wu(e,t,n)}else n.current=null}function es(e,t,n){try{n()}catch(n){wu(e,t,n)}}var ts=!1;function ns(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var a=r=r.next;do{if((a.tag&e)===e){var o=a.destroy;a.destroy=void 0,void 0!==o&&es(t,n,o)}a=a.next}while(a!==r)}}function rs(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function as(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function os(e){var t=e.alternate;null!==t&&(e.alternate=null,os(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[pa],delete t[fa],delete t[ha],delete t[Aa],delete t[ga]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function is(e){return 5===e.tag||3===e.tag||4===e.tag}function ls(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||is(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function ss(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Zr));else if(4!==r&&null!==(e=e.child))for(ss(e,t,n),e=e.sibling;null!==e;)ss(e,t,n),e=e.sibling}function us(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(us(e,t,n),e=e.sibling;null!==e;)us(e,t,n),e=e.sibling}var cs=null,ds=!1;function ps(e,t,n){for(n=n.child;null!==n;)fs(e,t,n),n=n.sibling}function fs(e,t,n){if(ot&&"function"==typeof ot.onCommitFiberUnmount)try{ot.onCommitFiberUnmount(at,n)}catch(e){}switch(n.tag){case 5:Xl||Zl(n,t);case 6:var r=cs,a=ds;cs=null,ps(e,t,n),ds=a,null!==(cs=r)&&(ds?(e=cs,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):cs.removeChild(n.stateNode));break;case 18:null!==cs&&(ds?(e=cs,n=n.stateNode,8===e.nodeType?sa(e.parentNode,n):1===e.nodeType&&sa(e,n),Wt(e)):sa(cs,n.stateNode));break;case 4:r=cs,a=ds,cs=n.stateNode.containerInfo,ds=!0,ps(e,t,n),cs=r,ds=a;break;case 0:case 11:case 14:case 15:if(!Xl&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){a=r=r.next;do{var o=a,i=o.destroy;o=o.tag,void 0!==i&&(2&o||4&o)&&es(n,t,i),a=a.next}while(a!==r)}ps(e,t,n);break;case 1:if(!Xl&&(Zl(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){wu(n,t,e)}ps(e,t,n);break;case 21:ps(e,t,n);break;case 22:1&n.mode?(Xl=(r=Xl)||null!==n.memoizedState,ps(e,t,n),Xl=r):ps(e,t,n);break;default:ps(e,t,n)}}function ms(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Ql),t.forEach((function(t){var r=Bu.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function hs(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var a=n[r];try{var i=e,l=t,s=l;e:for(;null!==s;){switch(s.tag){case 5:cs=s.stateNode,ds=!1;break e;case 3:case 4:cs=s.stateNode.containerInfo,ds=!0;break e}s=s.return}if(null===cs)throw Error(o(160));fs(i,l,a),cs=null,ds=!1;var u=a.alternate;null!==u&&(u.return=null),a.return=null}catch(e){wu(a,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)As(t,e),t=t.sibling}function As(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(hs(t,e),gs(e),4&r){try{ns(3,e,e.return),rs(3,e)}catch(t){wu(e,e.return,t)}try{ns(5,e,e.return)}catch(t){wu(e,e.return,t)}}break;case 1:hs(t,e),gs(e),512&r&&null!==n&&Zl(n,n.return);break;case 5:if(hs(t,e),gs(e),512&r&&null!==n&&Zl(n,n.return),32&e.flags){var a=e.stateNode;try{pe(a,"")}catch(t){wu(e,e.return,t)}}if(4&r&&null!=(a=e.stateNode)){var i=e.memoizedProps,l=null!==n?n.memoizedProps:i,s=e.type,u=e.updateQueue;if(e.updateQueue=null,null!==u)try{"input"===s&&"radio"===i.type&&null!=i.name&&Q(a,i),ve(s,l);var c=ve(s,i);for(l=0;l<u.length;l+=2){var d=u[l],p=u[l+1];"style"===d?Ae(a,p):"dangerouslySetInnerHTML"===d?de(a,p):"children"===d?pe(a,p):v(a,d,p,c)}switch(s){case"input":J(a,i);break;case"textarea":oe(a,i);break;case"select":var f=a._wrapperState.wasMultiple;a._wrapperState.wasMultiple=!!i.multiple;var m=i.value;null!=m?ne(a,!!i.multiple,m,!1):f!==!!i.multiple&&(null!=i.defaultValue?ne(a,!!i.multiple,i.defaultValue,!0):ne(a,!!i.multiple,i.multiple?[]:"",!1))}a[fa]=i}catch(t){wu(e,e.return,t)}}break;case 6:if(hs(t,e),gs(e),4&r){if(null===e.stateNode)throw Error(o(162));a=e.stateNode,i=e.memoizedProps;try{a.nodeValue=i}catch(t){wu(e,e.return,t)}}break;case 3:if(hs(t,e),gs(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{Wt(t.containerInfo)}catch(t){wu(e,e.return,t)}break;case 4:default:hs(t,e),gs(e);break;case 13:hs(t,e),gs(e),8192&(a=e.child).flags&&(i=null!==a.memoizedState,a.stateNode.isHidden=i,!i||null!==a.alternate&&null!==a.alternate.memoizedState||(Ds=Qe())),4&r&&ms(e);break;case 22:if(d=null!==n&&null!==n.memoizedState,1&e.mode?(Xl=(c=Xl)||d,hs(t,e),Xl=c):hs(t,e),gs(e),8192&r){if(c=null!==e.memoizedState,(e.stateNode.isHidden=c)&&!d&&1&e.mode)for(Jl=e,d=e.child;null!==d;){for(p=Jl=d;null!==Jl;){switch(m=(f=Jl).child,f.tag){case 0:case 11:case 14:case 15:ns(4,f,f.return);break;case 1:Zl(f,f.return);var h=f.stateNode;if("function"==typeof h.componentWillUnmount){r=f,n=f.return;try{t=r,h.props=t.memoizedProps,h.state=t.memoizedState,h.componentWillUnmount()}catch(e){wu(r,n,e)}}break;case 5:Zl(f,f.return);break;case 22:if(null!==f.memoizedState){xs(p);continue}}null!==m?(m.return=f,Jl=m):xs(p)}d=d.sibling}e:for(d=null,p=e;;){if(5===p.tag){if(null===d){d=p;try{a=p.stateNode,c?"function"==typeof(i=a.style).setProperty?i.setProperty("display","none","important"):i.display="none":(s=p.stateNode,l=null!=(u=p.memoizedProps.style)&&u.hasOwnProperty("display")?u.display:null,s.style.display=he("display",l))}catch(t){wu(e,e.return,t)}}}else if(6===p.tag){if(null===d)try{p.stateNode.nodeValue=c?"":p.memoizedProps}catch(t){wu(e,e.return,t)}}else if((22!==p.tag&&23!==p.tag||null===p.memoizedState||p===e)&&null!==p.child){p.child.return=p,p=p.child;continue}if(p===e)break e;for(;null===p.sibling;){if(null===p.return||p.return===e)break e;d===p&&(d=null),p=p.return}d===p&&(d=null),p.sibling.return=p.return,p=p.sibling}}break;case 19:hs(t,e),gs(e),4&r&&ms(e);case 21:}}function gs(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(is(n)){var r=n;break e}n=n.return}throw Error(o(160))}switch(r.tag){case 5:var a=r.stateNode;32&r.flags&&(pe(a,""),r.flags&=-33),us(e,ls(e),a);break;case 3:case 4:var i=r.stateNode.containerInfo;ss(e,ls(e),i);break;default:throw Error(o(161))}}catch(t){wu(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function ys(e,t,n){Jl=e,vs(e,t,n)}function vs(e,t,n){for(var r=!!(1&e.mode);null!==Jl;){var a=Jl,o=a.child;if(22===a.tag&&r){var i=null!==a.memoizedState||Kl;if(!i){var l=a.alternate,s=null!==l&&null!==l.memoizedState||Xl;l=Kl;var u=Xl;if(Kl=i,(Xl=s)&&!u)for(Jl=a;null!==Jl;)s=(i=Jl).child,22===i.tag&&null!==i.memoizedState?Es(a):null!==s?(s.return=i,Jl=s):Es(a);for(;null!==o;)Jl=o,vs(o,t,n),o=o.sibling;Jl=a,Kl=l,Xl=u}bs(e)}else 8772&a.subtreeFlags&&null!==o?(o.return=a,Jl=o):bs(e)}}function bs(e){for(;null!==Jl;){var t=Jl;if(8772&t.flags){var n=t.alternate;try{if(8772&t.flags)switch(t.tag){case 0:case 11:case 15:Xl||rs(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Xl)if(null===n)r.componentDidMount();else{var a=t.elementType===t.type?n.memoizedProps:nl(t.type,n.memoizedProps);r.componentDidUpdate(a,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var i=t.updateQueue;null!==i&&Vo(t,i,r);break;case 3:var l=t.updateQueue;if(null!==l){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}Vo(t,l,n)}break;case 5:var s=t.stateNode;if(null===n&&4&t.flags){n=s;var u=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":u.autoFocus&&n.focus();break;case"img":u.src&&(n.src=u.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var c=t.alternate;if(null!==c){var d=c.memoizedState;if(null!==d){var p=d.dehydrated;null!==p&&Wt(p)}}}break;default:throw Error(o(163))}Xl||512&t.flags&&as(t)}catch(e){wu(t,t.return,e)}}if(t===e){Jl=null;break}if(null!==(n=t.sibling)){n.return=t.return,Jl=n;break}Jl=t.return}}function xs(e){for(;null!==Jl;){var t=Jl;if(t===e){Jl=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Jl=n;break}Jl=t.return}}function Es(e){for(;null!==Jl;){var t=Jl;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{rs(4,t)}catch(e){wu(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var a=t.return;try{r.componentDidMount()}catch(e){wu(t,a,e)}}var o=t.return;try{as(t)}catch(e){wu(t,o,e)}break;case 5:var i=t.return;try{as(t)}catch(e){wu(t,i,e)}}}catch(e){wu(t,t.return,e)}if(t===e){Jl=null;break}var l=t.sibling;if(null!==l){l.return=t.return,Jl=l;break}Jl=t.return}}var Cs,ws=Math.ceil,ks=b.ReactCurrentDispatcher,Ss=b.ReactCurrentOwner,_s=b.ReactCurrentBatchConfig,Bs=0,Ts=null,js=null,Ns=0,Rs=0,Ps=wa(0),Os=0,zs=null,Ms=0,Is=0,Ls=0,Fs=null,$s=null,Ds=0,Ws=1/0,Us=null,Vs=!1,Hs=null,Ys=null,Gs=!1,qs=null,Ks=0,Xs=0,Qs=null,Js=-1,Zs=0;function eu(){return 6&Bs?Qe():-1!==Js?Js:Js=Qe()}function tu(e){return 1&e.mode?2&Bs&&0!==Ns?Ns&-Ns:null!==Ao.transition?(0===Zs&&(Zs=ht()),Zs):0!==(e=vt)?e:e=void 0===(e=window.event)?16:Xt(e.type):1}function nu(e,t,n,r){if(50<Xs)throw Xs=0,Qs=null,Error(o(185));gt(e,n,r),2&Bs&&e===Ts||(e===Ts&&(!(2&Bs)&&(Is|=n),4===Os&&lu(e,Ns)),ru(e,r),1===n&&0===Bs&&!(1&t.mode)&&(Ws=Qe()+500,Fa&&Wa()))}function ru(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,a=e.expirationTimes,o=e.pendingLanes;0<o;){var i=31-it(o),l=1<<i,s=a[i];-1===s?l&n&&!(l&r)||(a[i]=ft(l,t)):s<=t&&(e.expiredLanes|=l),o&=~l}}(e,t);var r=pt(e,e===Ts?Ns:0);if(0===r)null!==n&&qe(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&qe(n),1===t)0===e.tag?function(e){Fa=!0,Da(e)}(su.bind(null,e)):Da(su.bind(null,e)),ia((function(){!(6&Bs)&&Wa()})),n=null;else{switch(bt(r)){case 1:n=Ze;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=Tu(n,au.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function au(e,t){if(Js=-1,Zs=0,6&Bs)throw Error(o(327));var n=e.callbackNode;if(Eu()&&e.callbackNode!==n)return null;var r=pt(e,e===Ts?Ns:0);if(0===r)return null;if(30&r||r&e.expiredLanes||t)t=Au(e,r);else{t=r;var a=Bs;Bs|=2;var i=mu();for(Ts===e&&Ns===t||(Us=null,Ws=Qe()+500,pu(e,t));;)try{yu();break}catch(t){fu(e,t)}_o(),ks.current=i,Bs=a,null!==js?t=0:(Ts=null,Ns=0,t=Os)}if(0!==t){if(2===t&&0!==(a=mt(e))&&(r=a,t=ou(e,a)),1===t)throw n=zs,pu(e,0),lu(e,r),ru(e,Qe()),n;if(6===t)lu(e,r);else{if(a=e.current.alternate,!(30&r||function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var a=n[r],o=a.getSnapshot;a=a.value;try{if(!lr(o(),a))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(a)||(t=Au(e,r),2===t&&(i=mt(e),0!==i&&(r=i,t=ou(e,i))),1!==t)))throw n=zs,pu(e,0),lu(e,r),ru(e,Qe()),n;switch(e.finishedWork=a,e.finishedLanes=r,t){case 0:case 1:throw Error(o(345));case 2:case 5:xu(e,$s,Us);break;case 3:if(lu(e,r),(130023424&r)===r&&10<(t=Ds+500-Qe())){if(0!==pt(e,0))break;if(((a=e.suspendedLanes)&r)!==r){eu(),e.pingedLanes|=e.suspendedLanes&a;break}e.timeoutHandle=ra(xu.bind(null,e,$s,Us),t);break}xu(e,$s,Us);break;case 4:if(lu(e,r),(4194240&r)===r)break;for(t=e.eventTimes,a=-1;0<r;){var l=31-it(r);i=1<<l,(l=t[l])>a&&(a=l),r&=~i}if(r=a,10<(r=(120>(r=Qe()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*ws(r/1960))-r)){e.timeoutHandle=ra(xu.bind(null,e,$s,Us),r);break}xu(e,$s,Us);break;default:throw Error(o(329))}}}return ru(e,Qe()),e.callbackNode===n?au.bind(null,e):null}function ou(e,t){var n=Fs;return e.current.memoizedState.isDehydrated&&(pu(e,t).flags|=256),2!==(e=Au(e,t))&&(t=$s,$s=n,null!==t&&iu(t)),e}function iu(e){null===$s?$s=e:$s.push.apply($s,e)}function lu(e,t){for(t&=~Ls,t&=~Is,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-it(t),r=1<<n;e[n]=-1,t&=~r}}function su(e){if(6&Bs)throw Error(o(327));Eu();var t=pt(e,0);if(!(1&t))return ru(e,Qe()),null;var n=Au(e,t);if(0!==e.tag&&2===n){var r=mt(e);0!==r&&(t=r,n=ou(e,r))}if(1===n)throw n=zs,pu(e,0),lu(e,t),ru(e,Qe()),n;if(6===n)throw Error(o(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,xu(e,$s,Us),ru(e,Qe()),null}function uu(e,t){var n=Bs;Bs|=1;try{return e(t)}finally{0===(Bs=n)&&(Ws=Qe()+500,Fa&&Wa())}}function cu(e){null!==qs&&0===qs.tag&&!(6&Bs)&&Eu();var t=Bs;Bs|=1;var n=_s.transition,r=vt;try{if(_s.transition=null,vt=1,e)return e()}finally{vt=r,_s.transition=n,!(6&(Bs=t))&&Wa()}}function du(){Rs=Ps.current,ka(Ps)}function pu(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,aa(n)),null!==js)for(n=js.return;null!==n;){var r=n;switch(to(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Pa();break;case 3:Qo(),ka(Ta),ka(Ba),ri();break;case 5:Zo(r);break;case 4:Qo();break;case 13:case 19:ka(ei);break;case 10:Bo(r.type._context);break;case 22:case 23:du()}n=n.return}if(Ts=e,js=e=Pu(e.current,null),Ns=Rs=t,Os=0,zs=null,Ls=Is=Ms=0,$s=Fs=null,null!==Ro){for(t=0;t<Ro.length;t++)if(null!==(r=(n=Ro[t]).interleaved)){n.interleaved=null;var a=r.next,o=n.pending;if(null!==o){var i=o.next;o.next=a,r.next=i}n.pending=r}Ro=null}return e}function fu(e,t){for(;;){var n=js;try{if(_o(),ai.current=Ji,ci){for(var r=li.memoizedState;null!==r;){var a=r.queue;null!==a&&(a.pending=null),r=r.next}ci=!1}if(ii=0,ui=si=li=null,di=!1,pi=0,Ss.current=null,null===n||null===n.return){Os=1,zs=t,js=null;break}e:{var i=e,l=n.return,s=n,u=t;if(t=Ns,s.flags|=32768,null!==u&&"object"==typeof u&&"function"==typeof u.then){var c=u,d=s,p=d.tag;if(!(1&d.mode||0!==p&&11!==p&&15!==p)){var f=d.alternate;f?(d.updateQueue=f.updateQueue,d.memoizedState=f.memoizedState,d.lanes=f.lanes):(d.updateQueue=null,d.memoizedState=null)}var m=Al(l);if(null!==m){m.flags&=-257,gl(m,l,s,0,t),1&m.mode&&hl(i,c,t),u=c;var h=(t=m).updateQueue;if(null===h){var A=new Set;A.add(u),t.updateQueue=A}else h.add(u);break e}if(!(1&t)){hl(i,c,t),hu();break e}u=Error(o(426))}else if(ao&&1&s.mode){var g=Al(l);if(null!==g){!(65536&g.flags)&&(g.flags|=256),gl(g,l,s,0,t),ho(ul(u,s));break e}}i=u=ul(u,s),4!==Os&&(Os=2),null===Fs?Fs=[i]:Fs.push(i),i=l;do{switch(i.tag){case 3:i.flags|=65536,t&=-t,i.lanes|=t,Wo(i,fl(0,u,t));break e;case 1:s=u;var y=i.type,v=i.stateNode;if(!(128&i.flags||"function"!=typeof y.getDerivedStateFromError&&(null===v||"function"!=typeof v.componentDidCatch||null!==Ys&&Ys.has(v)))){i.flags|=65536,t&=-t,i.lanes|=t,Wo(i,ml(i,s,t));break e}}i=i.return}while(null!==i)}bu(n)}catch(e){t=e,js===n&&null!==n&&(js=n=n.return);continue}break}}function mu(){var e=ks.current;return ks.current=Ji,null===e?Ji:e}function hu(){0!==Os&&3!==Os&&2!==Os||(Os=4),null===Ts||!(268435455&Ms)&&!(268435455&Is)||lu(Ts,Ns)}function Au(e,t){var n=Bs;Bs|=2;var r=mu();for(Ts===e&&Ns===t||(Us=null,pu(e,t));;)try{gu();break}catch(t){fu(e,t)}if(_o(),Bs=n,ks.current=r,null!==js)throw Error(o(261));return Ts=null,Ns=0,Os}function gu(){for(;null!==js;)vu(js)}function yu(){for(;null!==js&&!Ke();)vu(js)}function vu(e){var t=Cs(e.alternate,e,Rs);e.memoizedProps=e.pendingProps,null===t?bu(e):js=t,Ss.current=null}function bu(e){var t=e;do{var n=t.alternate;if(e=t.return,32768&t.flags){if(null!==(n=ql(n,t)))return n.flags&=32767,void(js=n);if(null===e)return Os=6,void(js=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}else if(null!==(n=Gl(n,t,Rs)))return void(js=n);if(null!==(t=t.sibling))return void(js=t);js=t=e}while(null!==t);0===Os&&(Os=5)}function xu(e,t,n){var r=vt,a=_s.transition;try{_s.transition=null,vt=1,function(e,t,n,r){do{Eu()}while(null!==qs);if(6&Bs)throw Error(o(327));n=e.finishedWork;var a=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(o(177));e.callbackNode=null,e.callbackPriority=0;var i=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var a=31-it(n),o=1<<a;t[a]=0,r[a]=-1,e[a]=-1,n&=~o}}(e,i),e===Ts&&(js=Ts=null,Ns=0),!(2064&n.subtreeFlags)&&!(2064&n.flags)||Gs||(Gs=!0,Tu(tt,(function(){return Eu(),null}))),i=!!(15990&n.flags),15990&n.subtreeFlags||i){i=_s.transition,_s.transition=null;var l=vt;vt=1;var s=Bs;Bs|=4,Ss.current=null,function(e,t){if(ea=Vt,fr(e=pr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var a=r.anchorOffset,i=r.focusNode;r=r.focusOffset;try{n.nodeType,i.nodeType}catch(e){n=null;break e}var l=0,s=-1,u=-1,c=0,d=0,p=e,f=null;t:for(;;){for(var m;p!==n||0!==a&&3!==p.nodeType||(s=l+a),p!==i||0!==r&&3!==p.nodeType||(u=l+r),3===p.nodeType&&(l+=p.nodeValue.length),null!==(m=p.firstChild);)f=p,p=m;for(;;){if(p===e)break t;if(f===n&&++c===a&&(s=l),f===i&&++d===r&&(u=l),null!==(m=p.nextSibling))break;f=(p=f).parentNode}p=m}n=-1===s||-1===u?null:{start:s,end:u}}else n=null}n=n||{start:0,end:0}}else n=null;for(ta={focusedElem:e,selectionRange:n},Vt=!1,Jl=t;null!==Jl;)if(e=(t=Jl).child,1028&t.subtreeFlags&&null!==e)e.return=t,Jl=e;else for(;null!==Jl;){t=Jl;try{var h=t.alternate;if(1024&t.flags)switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==h){var A=h.memoizedProps,g=h.memoizedState,y=t.stateNode,v=y.getSnapshotBeforeUpdate(t.elementType===t.type?A:nl(t.type,A),g);y.__reactInternalSnapshotBeforeUpdate=v}break;case 3:var b=t.stateNode.containerInfo;1===b.nodeType?b.textContent="":9===b.nodeType&&b.documentElement&&b.removeChild(b.documentElement);break;default:throw Error(o(163))}}catch(e){wu(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Jl=e;break}Jl=t.return}h=ts,ts=!1}(e,n),As(n,e),mr(ta),Vt=!!ea,ta=ea=null,e.current=n,ys(n,e,a),Xe(),Bs=s,vt=l,_s.transition=i}else e.current=n;if(Gs&&(Gs=!1,qs=e,Ks=a),0===(i=e.pendingLanes)&&(Ys=null),function(e){if(ot&&"function"==typeof ot.onCommitFiberRoot)try{ot.onCommitFiberRoot(at,e,void 0,!(128&~e.current.flags))}catch(e){}}(n.stateNode),ru(e,Qe()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r((a=t[n]).value,{componentStack:a.stack,digest:a.digest});if(Vs)throw Vs=!1,e=Hs,Hs=null,e;!!(1&Ks)&&0!==e.tag&&Eu(),1&(i=e.pendingLanes)?e===Qs?Xs++:(Xs=0,Qs=e):Xs=0,Wa()}(e,t,n,r)}finally{_s.transition=a,vt=r}return null}function Eu(){if(null!==qs){var e=bt(Ks),t=_s.transition,n=vt;try{if(_s.transition=null,vt=16>e?16:e,null===qs)var r=!1;else{if(e=qs,qs=null,Ks=0,6&Bs)throw Error(o(331));var a=Bs;for(Bs|=4,Jl=e.current;null!==Jl;){var i=Jl,l=i.child;if(16&Jl.flags){var s=i.deletions;if(null!==s){for(var u=0;u<s.length;u++){var c=s[u];for(Jl=c;null!==Jl;){var d=Jl;switch(d.tag){case 0:case 11:case 15:ns(8,d,i)}var p=d.child;if(null!==p)p.return=d,Jl=p;else for(;null!==Jl;){var f=(d=Jl).sibling,m=d.return;if(os(d),d===c){Jl=null;break}if(null!==f){f.return=m,Jl=f;break}Jl=m}}}var h=i.alternate;if(null!==h){var A=h.child;if(null!==A){h.child=null;do{var g=A.sibling;A.sibling=null,A=g}while(null!==A)}}Jl=i}}if(2064&i.subtreeFlags&&null!==l)l.return=i,Jl=l;else e:for(;null!==Jl;){if(2048&(i=Jl).flags)switch(i.tag){case 0:case 11:case 15:ns(9,i,i.return)}var y=i.sibling;if(null!==y){y.return=i.return,Jl=y;break e}Jl=i.return}}var v=e.current;for(Jl=v;null!==Jl;){var b=(l=Jl).child;if(2064&l.subtreeFlags&&null!==b)b.return=l,Jl=b;else e:for(l=v;null!==Jl;){if(2048&(s=Jl).flags)try{switch(s.tag){case 0:case 11:case 15:rs(9,s)}}catch(e){wu(s,s.return,e)}if(s===l){Jl=null;break e}var x=s.sibling;if(null!==x){x.return=s.return,Jl=x;break e}Jl=s.return}}if(Bs=a,Wa(),ot&&"function"==typeof ot.onPostCommitFiberRoot)try{ot.onPostCommitFiberRoot(at,e)}catch(e){}r=!0}return r}finally{vt=n,_s.transition=t}}return!1}function Cu(e,t,n){e=$o(e,t=fl(0,t=ul(n,t),1),1),t=eu(),null!==e&&(gt(e,1,t),ru(e,t))}function wu(e,t,n){if(3===e.tag)Cu(e,e,n);else for(;null!==t;){if(3===t.tag){Cu(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Ys||!Ys.has(r))){t=$o(t,e=ml(t,e=ul(n,e),1),1),e=eu(),null!==t&&(gt(t,1,e),ru(t,e));break}}t=t.return}}function ku(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=eu(),e.pingedLanes|=e.suspendedLanes&n,Ts===e&&(Ns&n)===n&&(4===Os||3===Os&&(130023424&Ns)===Ns&&500>Qe()-Ds?pu(e,0):Ls|=n),ru(e,t)}function Su(e,t){0===t&&(1&e.mode?(t=ct,!(130023424&(ct<<=1))&&(ct=4194304)):t=1);var n=eu();null!==(e=zo(e,t))&&(gt(e,t,n),ru(e,n))}function _u(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),Su(e,n)}function Bu(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,a=e.memoizedState;null!==a&&(n=a.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(o(314))}null!==r&&r.delete(t),Su(e,n)}function Tu(e,t){return Ge(e,t)}function ju(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Nu(e,t,n,r){return new ju(e,t,n,r)}function Ru(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Pu(e,t){var n=e.alternate;return null===n?((n=Nu(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Ou(e,t,n,r,a,i){var l=2;if(r=e,"function"==typeof e)Ru(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case C:return zu(n.children,a,i,t);case w:l=8,a|=8;break;case k:return(e=Nu(12,n,t,2|a)).elementType=k,e.lanes=i,e;case T:return(e=Nu(13,n,t,a)).elementType=T,e.lanes=i,e;case j:return(e=Nu(19,n,t,a)).elementType=j,e.lanes=i,e;case P:return Mu(n,a,i,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case S:l=10;break e;case _:l=9;break e;case B:l=11;break e;case N:l=14;break e;case R:l=16,r=null;break e}throw Error(o(130,null==e?e:typeof e,""))}return(t=Nu(l,n,t,a)).elementType=e,t.type=r,t.lanes=i,t}function zu(e,t,n,r){return(e=Nu(7,e,r,t)).lanes=n,e}function Mu(e,t,n,r){return(e=Nu(22,e,r,t)).elementType=P,e.lanes=n,e.stateNode={isHidden:!1},e}function Iu(e,t,n){return(e=Nu(6,e,null,t)).lanes=n,e}function Lu(e,t,n){return(t=Nu(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Fu(e,t,n,r,a){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=At(0),this.expirationTimes=At(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=At(0),this.identifierPrefix=r,this.onRecoverableError=a,this.mutableSourceEagerHydrationData=null}function $u(e,t,n,r,a,o,i,l,s){return e=new Fu(e,t,n,l,s),1===t?(t=1,!0===o&&(t|=8)):t=0,o=Nu(3,null,null,t),e.current=o,o.stateNode=e,o.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Io(o),e}function Du(e){if(!e)return _a;e:{if(We(e=e._reactInternals)!==e||1!==e.tag)throw Error(o(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Ra(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(o(171))}if(1===e.tag){var n=e.type;if(Ra(n))return za(e,n,t)}return t}function Wu(e,t,n,r,a,o,i,l,s){return(e=$u(n,r,!0,e,0,o,0,l,s)).context=Du(null),n=e.current,(o=Fo(r=eu(),a=tu(n))).callback=null!=t?t:null,$o(n,o,a),e.current.lanes=a,gt(e,a,r),ru(e,r),e}function Uu(e,t,n,r){var a=t.current,o=eu(),i=tu(a);return n=Du(n),null===t.context?t.context=n:t.pendingContext=n,(t=Fo(o,i)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),null!==(e=$o(a,t,i))&&(nu(e,a,i,o),Do(e,a,i)),i}function Vu(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Hu(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Yu(e,t){Hu(e,t),(e=e.alternate)&&Hu(e,t)}Cs=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||Ta.current)vl=!0;else{if(!(e.lanes&n||128&t.flags))return vl=!1,function(e,t,n){switch(t.tag){case 3:Tl(t),mo();break;case 5:Jo(t);break;case 1:Ra(t.type)&&Ma(t);break;case 4:Xo(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,a=t.memoizedProps.value;Sa(Co,r._currentValue),r._currentValue=a;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(Sa(ei,1&ei.current),t.flags|=128,null):n&t.child.childLanes?Il(e,t,n):(Sa(ei,1&ei.current),null!==(e=Vl(e,t,n))?e.sibling:null);Sa(ei,1&ei.current);break;case 19:if(r=!!(n&t.childLanes),128&e.flags){if(r)return Wl(e,t,n);t.flags|=128}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),Sa(ei,ei.current),r)break;return null;case 22:case 23:return t.lanes=0,wl(e,t,n)}return Vl(e,t,n)}(e,t,n);vl=!!(131072&e.flags)}else vl=!1,ao&&1048576&t.flags&&Za(t,Ya,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;Ul(e,t),e=t.pendingProps;var a=Na(t,Ba.current);jo(t,n),a=Ai(null,t,r,e,a,n);var i=gi();return t.flags|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Ra(r)?(i=!0,Ma(t)):i=!1,t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,Io(t),a.updater=al,t.stateNode=a,a._reactInternals=t,sl(t,r,e,n),t=Bl(null,t,r,!0,i,n)):(t.tag=0,ao&&i&&eo(t),bl(null,t,a,n),t=t.child),t;case 16:r=t.elementType;e:{switch(Ul(e,t),e=t.pendingProps,r=(a=r._init)(r._payload),t.type=r,a=t.tag=function(e){if("function"==typeof e)return Ru(e)?1:0;if(null!=e){if((e=e.$$typeof)===B)return 11;if(e===N)return 14}return 2}(r),e=nl(r,e),a){case 0:t=Sl(null,t,r,e,n);break e;case 1:t=_l(null,t,r,e,n);break e;case 11:t=xl(null,t,r,e,n);break e;case 14:t=El(null,t,r,nl(r.type,e),n);break e}throw Error(o(306,r,""))}return t;case 0:return r=t.type,a=t.pendingProps,Sl(e,t,r,a=t.elementType===r?a:nl(r,a),n);case 1:return r=t.type,a=t.pendingProps,_l(e,t,r,a=t.elementType===r?a:nl(r,a),n);case 3:e:{if(Tl(t),null===e)throw Error(o(387));r=t.pendingProps,a=(i=t.memoizedState).element,Lo(e,t),Uo(t,r,null,n);var l=t.memoizedState;if(r=l.element,i.isDehydrated){if(i={element:r,isDehydrated:!1,cache:l.cache,pendingSuspenseBoundaries:l.pendingSuspenseBoundaries,transitions:l.transitions},t.updateQueue.baseState=i,t.memoizedState=i,256&t.flags){t=jl(e,t,r,n,a=ul(Error(o(423)),t));break e}if(r!==a){t=jl(e,t,r,n,a=ul(Error(o(424)),t));break e}for(ro=ua(t.stateNode.containerInfo.firstChild),no=t,ao=!0,oo=null,n=Eo(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(mo(),r===a){t=Vl(e,t,n);break e}bl(e,t,r,n)}t=t.child}return t;case 5:return Jo(t),null===e&&uo(t),r=t.type,a=t.pendingProps,i=null!==e?e.memoizedProps:null,l=a.children,na(r,a)?l=null:null!==i&&na(r,i)&&(t.flags|=32),kl(e,t),bl(e,t,l,n),t.child;case 6:return null===e&&uo(t),null;case 13:return Il(e,t,n);case 4:return Xo(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=xo(t,null,r,n):bl(e,t,r,n),t.child;case 11:return r=t.type,a=t.pendingProps,xl(e,t,r,a=t.elementType===r?a:nl(r,a),n);case 7:return bl(e,t,t.pendingProps,n),t.child;case 8:case 12:return bl(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,a=t.pendingProps,i=t.memoizedProps,l=a.value,Sa(Co,r._currentValue),r._currentValue=l,null!==i)if(lr(i.value,l)){if(i.children===a.children&&!Ta.current){t=Vl(e,t,n);break e}}else for(null!==(i=t.child)&&(i.return=t);null!==i;){var s=i.dependencies;if(null!==s){l=i.child;for(var u=s.firstContext;null!==u;){if(u.context===r){if(1===i.tag){(u=Fo(-1,n&-n)).tag=2;var c=i.updateQueue;if(null!==c){var d=(c=c.shared).pending;null===d?u.next=u:(u.next=d.next,d.next=u),c.pending=u}}i.lanes|=n,null!==(u=i.alternate)&&(u.lanes|=n),To(i.return,n,t),s.lanes|=n;break}u=u.next}}else if(10===i.tag)l=i.type===t.type?null:i.child;else if(18===i.tag){if(null===(l=i.return))throw Error(o(341));l.lanes|=n,null!==(s=l.alternate)&&(s.lanes|=n),To(l,n,t),l=i.sibling}else l=i.child;if(null!==l)l.return=i;else for(l=i;null!==l;){if(l===t){l=null;break}if(null!==(i=l.sibling)){i.return=l.return,l=i;break}l=l.return}i=l}bl(e,t,a.children,n),t=t.child}return t;case 9:return a=t.type,r=t.pendingProps.children,jo(t,n),r=r(a=No(a)),t.flags|=1,bl(e,t,r,n),t.child;case 14:return a=nl(r=t.type,t.pendingProps),El(e,t,r,a=nl(r.type,a),n);case 15:return Cl(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,a=t.pendingProps,a=t.elementType===r?a:nl(r,a),Ul(e,t),t.tag=1,Ra(r)?(e=!0,Ma(t)):e=!1,jo(t,n),il(t,r,a),sl(t,r,a,n),Bl(null,t,r,!0,e,n);case 19:return Wl(e,t,n);case 22:return wl(e,t,n)}throw Error(o(156,t.tag))};var Gu="function"==typeof reportError?reportError:function(e){console.error(e)};function qu(e){this._internalRoot=e}function Ku(e){this._internalRoot=e}function Xu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Qu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Ju(){}function Zu(e,t,n,r,a){var o=n._reactRootContainer;if(o){var i=o;if("function"==typeof a){var l=a;a=function(){var e=Vu(i);l.call(e)}}Uu(t,i,e,a)}else i=function(e,t,n,r,a){if(a){if("function"==typeof r){var o=r;r=function(){var e=Vu(i);o.call(e)}}var i=Wu(t,r,e,0,null,!1,0,"",Ju);return e._reactRootContainer=i,e[ma]=i.current,Wr(8===e.nodeType?e.parentNode:e),cu(),i}for(;a=e.lastChild;)e.removeChild(a);if("function"==typeof r){var l=r;r=function(){var e=Vu(s);l.call(e)}}var s=$u(e,0,!1,null,0,!1,0,"",Ju);return e._reactRootContainer=s,e[ma]=s.current,Wr(8===e.nodeType?e.parentNode:e),cu((function(){Uu(t,s,n,r)})),s}(n,t,e,a,r);return Vu(i)}Ku.prototype.render=qu.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(o(409));Uu(e,t,null,null)},Ku.prototype.unmount=qu.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;cu((function(){Uu(null,e,null,null)})),t[ma]=null}},Ku.prototype.unstable_scheduleHydration=function(e){if(e){var t=wt();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Pt.length&&0!==t&&t<Pt[n].priority;n++);Pt.splice(n,0,e),0===n&&It(e)}},xt=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=dt(t.pendingLanes);0!==n&&(yt(t,1|n),ru(t,Qe()),!(6&Bs)&&(Ws=Qe()+500,Wa()))}break;case 13:cu((function(){var t=zo(e,1);if(null!==t){var n=eu();nu(t,e,1,n)}})),Yu(e,1)}},Et=function(e){if(13===e.tag){var t=zo(e,134217728);null!==t&&nu(t,e,134217728,eu()),Yu(e,134217728)}},Ct=function(e){if(13===e.tag){var t=tu(e),n=zo(e,t);null!==n&&nu(n,e,t,eu()),Yu(e,t)}},wt=function(){return vt},kt=function(e,t){var n=vt;try{return vt=e,t()}finally{vt=n}},Ee=function(e,t,n){switch(t){case"input":if(J(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=xa(r);if(!a)throw Error(o(90));G(r),J(r,a)}}}break;case"textarea":oe(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Be=uu,Te=cu;var ec={usingClientEntryPoint:!1,Events:[va,ba,xa,Se,_e,uu]},tc={findFiberByHostInstance:ya,bundleType:0,version:"18.3.1",rendererPackageName:"react-dom"},nc={bundleType:tc.bundleType,version:tc.version,rendererPackageName:tc.rendererPackageName,rendererConfig:tc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:b.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=He(e))?null:e.stateNode},findFiberByHostInstance:tc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.3.1-next-f1338f8080-20240426"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var rc=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!rc.isDisabled&&rc.supportsFiber)try{at=rc.inject(nc),ot=rc}catch(ce){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ec,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Xu(t))throw Error(o(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:E,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.createRoot=function(e,t){if(!Xu(e))throw Error(o(299));var n=!1,r="",a=Gu;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(a=t.onRecoverableError)),t=$u(e,1,!1,null,0,n,0,r,a),e[ma]=t.current,Wr(8===e.nodeType?e.parentNode:e),new qu(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(o(188));throw e=Object.keys(e).join(","),Error(o(268,e))}return null===(e=He(t))?null:e.stateNode},t.flushSync=function(e){return cu(e)},t.hydrate=function(e,t,n){if(!Qu(t))throw Error(o(200));return Zu(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Xu(e))throw Error(o(405));var r=null!=n&&n.hydratedSources||null,a=!1,i="",l=Gu;if(null!=n&&(!0===n.unstable_strictMode&&(a=!0),void 0!==n.identifierPrefix&&(i=n.identifierPrefix),void 0!==n.onRecoverableError&&(l=n.onRecoverableError)),t=Wu(t,null,e,1,null!=n?n:null,a,0,i,l),e[ma]=t.current,Wr(e),r)for(e=0;e<r.length;e++)a=(a=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,a]:t.mutableSourceEagerHydrationData.push(n,a);return new Ku(t)},t.render=function(e,t,n){if(!Qu(t))throw Error(o(200));return Zu(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Qu(e))throw Error(o(40));return!!e._reactRootContainer&&(cu((function(){Zu(null,null,e,!1,(function(){e._reactRootContainer=null,e[ma]=null}))})),!0)},t.unstable_batchedUpdates=uu,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Qu(n))throw Error(o(200));if(null==e||void 0===e._reactInternals)throw Error(o(38));return Zu(e,t,n,!1,r)},t.version="18.3.1-next-f1338f8080-20240426"},7470:(e,t,n)=>{"use strict";var r=n(8325);t.H=r.createRoot,r.hydrateRoot},8325:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(6067)},2192:(e,t,n)=>{"use strict";var r=n(3696),a=Symbol.for("react.element"),o=Symbol.for("react.fragment"),i=Object.prototype.hasOwnProperty,l=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,s={key:!0,ref:!0,__self:!0,__source:!0};function u(e,t,n){var r,o={},u=null,c=null;for(r in void 0!==n&&(u=""+n),void 0!==t.key&&(u=""+t.key),void 0!==t.ref&&(c=t.ref),t)i.call(t,r)&&!s.hasOwnProperty(r)&&(o[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===o[r]&&(o[r]=t[r]);return{$$typeof:a,type:e,key:u,ref:c,props:o,_owner:l.current}}t.Fragment=o,t.jsx=u,t.jsxs=u},4403:(e,t)=>{"use strict";var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),a=Symbol.for("react.fragment"),o=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),l=Symbol.for("react.provider"),s=Symbol.for("react.context"),u=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),p=Symbol.for("react.lazy"),f=Symbol.iterator,m={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},h=Object.assign,A={};function g(e,t,n){this.props=e,this.context=t,this.refs=A,this.updater=n||m}function y(){}function v(e,t,n){this.props=e,this.context=t,this.refs=A,this.updater=n||m}g.prototype.isReactComponent={},g.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},g.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=g.prototype;var b=v.prototype=new y;b.constructor=v,h(b,g.prototype),b.isPureReactComponent=!0;var x=Array.isArray,E=Object.prototype.hasOwnProperty,C={current:null},w={key:!0,ref:!0,__self:!0,__source:!0};function k(e,t,r){var a,o={},i=null,l=null;if(null!=t)for(a in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)E.call(t,a)&&!w.hasOwnProperty(a)&&(o[a]=t[a]);var s=arguments.length-2;if(1===s)o.children=r;else if(1<s){for(var u=Array(s),c=0;c<s;c++)u[c]=arguments[c+2];o.children=u}if(e&&e.defaultProps)for(a in s=e.defaultProps)void 0===o[a]&&(o[a]=s[a]);return{$$typeof:n,type:e,key:i,ref:l,props:o,_owner:C.current}}function S(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var _=/\/+/g;function B(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function T(e,t,a,o,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var s=!1;if(null===e)s=!0;else switch(l){case"string":case"number":s=!0;break;case"object":switch(e.$$typeof){case n:case r:s=!0}}if(s)return i=i(s=e),e=""===o?"."+B(s,0):o,x(i)?(a="",null!=e&&(a=e.replace(_,"$&/")+"/"),T(i,t,a,"",(function(e){return e}))):null!=i&&(S(i)&&(i=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,a+(!i.key||s&&s.key===i.key?"":(""+i.key).replace(_,"$&/")+"/")+e)),t.push(i)),1;if(s=0,o=""===o?".":o+":",x(e))for(var u=0;u<e.length;u++){var c=o+B(l=e[u],u);s+=T(l,t,a,c,i)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=f&&e[f]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),u=0;!(l=e.next()).done;)s+=T(l=l.value,t,a,c=o+B(l,u++),i);else if("object"===l)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return s}function j(e,t,n){if(null==e)return e;var r=[],a=0;return T(e,r,"","",(function(e){return t.call(n,e,a++)})),r}function N(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var R={current:null},P={transition:null},O={ReactCurrentDispatcher:R,ReactCurrentBatchConfig:P,ReactCurrentOwner:C};function z(){throw Error("act(...) is not supported in production builds of React.")}t.Children={map:j,forEach:function(e,t,n){j(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return j(e,(function(){t++})),t},toArray:function(e){return j(e,(function(e){return e}))||[]},only:function(e){if(!S(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=g,t.Fragment=a,t.Profiler=i,t.PureComponent=v,t.StrictMode=o,t.Suspense=c,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=O,t.act=z,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var a=h({},e.props),o=e.key,i=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(i=t.ref,l=C.current),void 0!==t.key&&(o=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(u in t)E.call(t,u)&&!w.hasOwnProperty(u)&&(a[u]=void 0===t[u]&&void 0!==s?s[u]:t[u])}var u=arguments.length-2;if(1===u)a.children=r;else if(1<u){s=Array(u);for(var c=0;c<u;c++)s[c]=arguments[c+2];a.children=s}return{$$typeof:n,type:e.type,key:o,ref:i,props:a,_owner:l}},t.createContext=function(e){return(e={$$typeof:s,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:l,_context:e},e.Consumer=e},t.createElement=k,t.createFactory=function(e){var t=k.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=S,t.lazy=function(e){return{$$typeof:p,_payload:{_status:-1,_result:e},_init:N}},t.memo=function(e,t){return{$$typeof:d,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=P.transition;P.transition={};try{e()}finally{P.transition=t}},t.unstable_act=z,t.useCallback=function(e,t){return R.current.useCallback(e,t)},t.useContext=function(e){return R.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return R.current.useDeferredValue(e)},t.useEffect=function(e,t){return R.current.useEffect(e,t)},t.useId=function(){return R.current.useId()},t.useImperativeHandle=function(e,t,n){return R.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return R.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return R.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return R.current.useMemo(e,t)},t.useReducer=function(e,t,n){return R.current.useReducer(e,t,n)},t.useRef=function(e){return R.current.useRef(e)},t.useState=function(e){return R.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return R.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return R.current.useTransition()},t.version="18.3.1"},3696:(e,t,n)=>{"use strict";e.exports=n(4403)},2540:(e,t,n)=>{"use strict";e.exports=n(2192)},7699:(e,t)=>{"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,a=e[r];if(!(0<o(a,t)))break e;e[r]=t,e[n]=a,n=r}}function r(e){return 0===e.length?null:e[0]}function a(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,a=e.length,i=a>>>1;r<i;){var l=2*(r+1)-1,s=e[l],u=l+1,c=e[u];if(0>o(s,n))u<a&&0>o(c,s)?(e[r]=c,e[u]=n,r=u):(e[r]=s,e[l]=n,r=l);else{if(!(u<a&&0>o(c,n)))break e;e[r]=c,e[u]=n,r=u}}}return t}function o(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var l=Date,s=l.now();t.unstable_now=function(){return l.now()-s}}var u=[],c=[],d=1,p=null,f=3,m=!1,h=!1,A=!1,g="function"==typeof setTimeout?setTimeout:null,y="function"==typeof clearTimeout?clearTimeout:null,v="undefined"!=typeof setImmediate?setImmediate:null;function b(e){for(var t=r(c);null!==t;){if(null===t.callback)a(c);else{if(!(t.startTime<=e))break;a(c),t.sortIndex=t.expirationTime,n(u,t)}t=r(c)}}function x(e){if(A=!1,b(e),!h)if(null!==r(u))h=!0,P(E);else{var t=r(c);null!==t&&O(x,t.startTime-e)}}function E(e,n){h=!1,A&&(A=!1,y(S),S=-1),m=!0;var o=f;try{for(b(n),p=r(u);null!==p&&(!(p.expirationTime>n)||e&&!T());){var i=p.callback;if("function"==typeof i){p.callback=null,f=p.priorityLevel;var l=i(p.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?p.callback=l:p===r(u)&&a(u),b(n)}else a(u);p=r(u)}if(null!==p)var s=!0;else{var d=r(c);null!==d&&O(x,d.startTime-n),s=!1}return s}finally{p=null,f=o,m=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var C,w=!1,k=null,S=-1,_=5,B=-1;function T(){return!(t.unstable_now()-B<_)}function j(){if(null!==k){var e=t.unstable_now();B=e;var n=!0;try{n=k(!0,e)}finally{n?C():(w=!1,k=null)}}else w=!1}if("function"==typeof v)C=function(){v(j)};else if("undefined"!=typeof MessageChannel){var N=new MessageChannel,R=N.port2;N.port1.onmessage=j,C=function(){R.postMessage(null)}}else C=function(){g(j,0)};function P(e){k=e,w||(w=!0,C())}function O(e,n){S=g((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){h||m||(h=!0,P(E))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):_=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return f},t.unstable_getFirstCallbackNode=function(){return r(u)},t.unstable_next=function(e){switch(f){case 1:case 2:case 3:var t=3;break;default:t=f}var n=f;f=t;try{return e()}finally{f=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=f;f=e;try{return t()}finally{f=n}},t.unstable_scheduleCallback=function(e,a,o){var i=t.unstable_now();switch(o="object"==typeof o&&null!==o&&"number"==typeof(o=o.delay)&&0<o?i+o:i,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:d++,callback:a,priorityLevel:e,startTime:o,expirationTime:l=o+l,sortIndex:-1},o>i?(e.sortIndex=o,n(c,e),null===r(u)&&e===r(c)&&(A?(y(S),S=-1):A=!0,O(x,o-i))):(e.sortIndex=l,n(u,e),h||m||(h=!0,P(E))),e},t.unstable_shouldYield=T,t.unstable_wrapCallback=function(e){var t=f;return function(){var n=f;f=t;try{return e.apply(this,arguments)}finally{f=n}}}},1434:(e,t,n)=>{"use strict";e.exports=n(7699)},5292:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var o={},i=[],l=0;l<e.length;l++){var s=e[l],u=r.base?s[0]+r.base:s[0],c=o[u]||0,d="".concat(u," ").concat(c);o[u]=c+1;var p=n(d),f={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)t[p].references++,t[p].updater(f);else{var m=a(f,r);r.byIndex=l,t.splice(l,0,{identifier:d,updater:m,references:1})}i.push(d)}return i}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var l=n(o[i]);t[l].references--}for(var s=r(e,a),u=0;u<o.length;u++){var c=n(o[u]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}o=s}}},9383:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},9088:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},6884:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},9893:e=>{"use strict";e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},7997:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},7510:(e,t,n)=>{"use strict";var r=n(3696),a="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},o=r.useSyncExternalStore,i=r.useRef,l=r.useEffect,s=r.useMemo,u=r.useDebugValue;t.useSyncExternalStoreWithSelector=function(e,t,n,r,c){var d=i(null);if(null===d.current){var p={hasValue:!1,value:null};d.current=p}else p=d.current;d=s((function(){function e(e){if(!l){if(l=!0,o=e,e=r(e),void 0!==c&&p.hasValue){var t=p.value;if(c(t,e))return i=t}return i=e}if(t=i,a(o,e))return t;var n=r(e);return void 0!==c&&c(t,n)?t:(o=e,i=n)}var o,i,l=!1,s=void 0===n?null:n;return[function(){return e(t())},null===s?void 0:function(){return e(s())}]}),[t,n,r,c]);var f=o(e,d[0],d[1]);return l((function(){p.hasValue=!0,p.value=f}),[f]),u(f),f}},2254:(e,t,n)=>{"use strict";e.exports=n(7510)},2473:(e,t,n)=>{"use strict";e.exports=n.p+"f97122171ae84c7e3609.jpg"},8304:e=>{function t(){return e.exports=t=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},e.exports.__esModule=!0,e.exports.default=e.exports,t.apply(null,arguments)}e.exports=t,e.exports.__esModule=!0,e.exports.default=e.exports},6784:e=>{e.exports=function(e){return e&&e.__esModule?e:{default:e}},e.exports.__esModule=!0,e.exports.default=e.exports},739:e=>{e.exports=function(e,t){if(null==e)return{};var n={};for(var r in e)if({}.hasOwnProperty.call(e,r)){if(t.includes(r))continue;n[r]=e[r]}return n},e.exports.__esModule=!0,e.exports.default=e.exports},8102:(e,t,n)=>{"use strict";function r(){return r=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},r.apply(null,arguments)}n.d(t,{A:()=>r})},9257:(e,t,n)=>{"use strict";function r(e,t){if(null==e)return{};var n={};for(var r in e)if({}.hasOwnProperty.call(e,r)){if(t.includes(r))continue;n[r]=e[r]}return n}n.d(t,{A:()=>r})},1750:(e,t,n)=>{"use strict";function r(e){var t,n,a="";if("string"==typeof e||"number"==typeof e)a+=e;else if("object"==typeof e)if(Array.isArray(e)){var o=e.length;for(t=0;t<o;t++)e[t]&&(n=r(e[t]))&&(a&&(a+=" "),a+=n)}else for(n in e)e[n]&&(a&&(a+=" "),a+=n);return a}n.d(t,{A:()=>a});const a=function(){for(var e,t,n=0,a="",o=arguments.length;n<o;n++)(e=arguments[n])&&(t=r(e))&&(a&&(a+=" "),a+=t);return a}}},r={};function a(e){var t=r[e];if(void 0!==t)return t.exports;var o=r[e]={id:e,exports:{}};return n[e](o,o.exports,a),o.exports}a.m=n,a.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return a.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,a.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var o=Object.create(null);a.r(o);var i={};e=e||[null,t({}),t([]),t(t)];for(var l=2&r&&n;"object"==typeof l&&!~e.indexOf(l);l=t(l))Object.getOwnPropertyNames(l).forEach((e=>i[e]=()=>n[e]));return i.default=()=>n,a.d(o,i),o},a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.p="/calendar/",a.b=document.baseURI||self.location.href,a.nc=void 0,(()=>{"use strict";var e=a(7470),t=a(3696),n=a.t(t,2),r=a(2254),o=t,i=Symbol.for("react-redux-context"),l="undefined"!=typeof globalThis?globalThis:{};function s(){if(!o.createContext)return{};const e=l[i]??(l[i]=new Map);let t=e.get(o.createContext);return t||(t=o.createContext(null),e.set(o.createContext,t)),t}var u=s();function c(e=u){return function(){return o.useContext(e)}}var d=c(),p=()=>{throw new Error("uSES not initialized!")},f=(e,t)=>e===t;function m(e=u){const t=e===u?d:c(e),n=(e,n={})=>{const{equalityFn:r=f,devModeChecks:a={}}="function"==typeof n?{equalityFn:n}:n,{store:i,subscription:l,getServerState:s,stabilityCheck:u,identityFunctionCheck:c}=t(),d=(o.useRef(!0),o.useCallback({[e.name]:t=>e(t)}[e.name],[e,u,a.stabilityCheck])),m=p(l.addNestedSub,i.getState,s||i.getState,d,r);return o.useDebugValue(m),m};return Object.assign(n,{withTypes:()=>n}),n}var h=m();Symbol.for("react.element"),Symbol.for("react.portal"),Symbol.for("react.fragment"),Symbol.for("react.strict_mode"),Symbol.for("react.profiler"),Symbol.for("react.provider"),Symbol.for("react.context"),Symbol.for("react.server_context"),Symbol.for("react.forward_ref"),Symbol.for("react.suspense"),Symbol.for("react.suspense_list"),Symbol.for("react.memo"),Symbol.for("react.lazy"),Symbol.for("react.offscreen"),Symbol.for("react.client.reference");var A={notify(){},get:()=>[]};var g=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),y="undefined"!=typeof navigator&&"ReactNative"===navigator.product,v=g||y?o.useLayoutEffect:o.useEffect;Object.defineProperty,Object.getOwnPropertyNames,Object.getOwnPropertySymbols,Object.getOwnPropertyDescriptor,Object.getPrototypeOf,Object.prototype;var b=function({store:e,context:t,children:n,serverState:r,stabilityCheck:a="once",identityFunctionCheck:i="once"}){const l=o.useMemo((()=>{const t=function(e,t){let n,r=A,a=0,o=!1;function i(){u.onStateChange&&u.onStateChange()}function l(){a++,n||(n=t?t.addNestedSub(i):e.subscribe(i),r=function(){let e=null,t=null;return{clear(){e=null,t=null},notify(){(()=>{let t=e;for(;t;)t.callback(),t=t.next})()},get(){const t=[];let n=e;for(;n;)t.push(n),n=n.next;return t},subscribe(n){let r=!0;const a=t={callback:n,next:null,prev:t};return a.prev?a.prev.next=a:e=a,function(){r&&null!==e&&(r=!1,a.next?a.next.prev=a.prev:t=a.prev,a.prev?a.prev.next=a.next:e=a.next)}}}}())}function s(){a--,n&&0===a&&(n(),n=void 0,r.clear(),r=A)}const u={addNestedSub:function(e){l();const t=r.subscribe(e);let n=!1;return()=>{n||(n=!0,t(),s())}},notifyNestedSubs:function(){r.notify()},handleChangeWrapper:i,isSubscribed:function(){return o},trySubscribe:function(){o||(o=!0,l())},tryUnsubscribe:function(){o&&(o=!1,s())},getListeners:()=>r};return u}(e);return{store:e,subscription:t,getServerState:r?()=>r:void 0,stabilityCheck:a,identityFunctionCheck:i}}),[e,r,a,i]),s=o.useMemo((()=>e.getState()),[e]);v((()=>{const{subscription:t}=l;return t.onStateChange=t.notifyNestedSubs,t.trySubscribe(),s!==e.getState()&&t.notifyNestedSubs(),()=>{t.tryUnsubscribe(),t.onStateChange=void 0}}),[l,s]);const c=t||u;return o.createElement(c.Provider,{value:l},n)};function x(e=u){const t=e===u?d:c(e),n=()=>{const{store:e}=t();return e};return Object.assign(n,{withTypes:()=>n}),n}var E=x();function C(e=u){const t=e===u?E:x(e),n=()=>t().dispatch;return Object.assign(n,{withTypes:()=>n}),n}var w,k=C();w=r.useSyncExternalStoreWithSelector,p=w,t.useSyncExternalStore;var S,_=a(8325),B=a.t(_,2);function T(){return T=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},T.apply(this,arguments)}!function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(S||(S={}));const j="popstate";function N(e,t){if(!1===e||null==e)throw new Error(t)}function R(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}function P(e,t){return{usr:e.state,key:e.key,idx:t}}function O(e,t,n,r){return void 0===n&&(n=null),T({pathname:"string"==typeof e?e:e.pathname,search:"",hash:""},"string"==typeof t?M(t):t,{state:n,key:t&&t.key||r||Math.random().toString(36).substr(2,8)})}function z(e){let{pathname:t="/",search:n="",hash:r=""}=e;return n&&"?"!==n&&(t+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(t+="#"===r.charAt(0)?r:"#"+r),t}function M(e){let t={};if(e){let n=e.indexOf("#");n>=0&&(t.hash=e.substr(n),e=e.substr(0,n));let r=e.indexOf("?");r>=0&&(t.search=e.substr(r),e=e.substr(0,r)),e&&(t.pathname=e)}return t}var I;function L(e,t,n){return void 0===n&&(n="/"),function(e,t,n,r){let a=J(("string"==typeof t?M(t):t).pathname||"/",n);if(null==a)return null;let o=F(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){return e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]))?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(o);let i=null;for(let e=0;null==i&&e<o.length;++e){let t=Q(a);i=K(o[e],t,r)}return i}(e,t,n,!1)}function F(e,t,n,r){void 0===t&&(t=[]),void 0===n&&(n=[]),void 0===r&&(r="");let a=(e,a,o)=>{let i={relativePath:void 0===o?e.path||"":o,caseSensitive:!0===e.caseSensitive,childrenIndex:a,route:e};i.relativePath.startsWith("/")&&(N(i.relativePath.startsWith(r),'Absolute route path "'+i.relativePath+'" nested under path "'+r+'" is not valid. An absolute child route path must start with the combined path of all its parent routes.'),i.relativePath=i.relativePath.slice(r.length));let l=ne([r,i.relativePath]),s=n.concat(i);e.children&&e.children.length>0&&(N(!0!==e.index,'Index routes must not have child routes. Please remove all child routes from route path "'+l+'".'),F(e.children,t,s,l)),(null!=e.path||e.index)&&t.push({path:l,score:q(l,e.index),routesMeta:s})};return e.forEach(((e,t)=>{var n;if(""!==e.path&&null!=(n=e.path)&&n.includes("?"))for(let n of $(e.path))a(e,t,n);else a(e,t)})),t}function $(e){let t=e.split("/");if(0===t.length)return[];let[n,...r]=t,a=n.endsWith("?"),o=n.replace(/\?$/,"");if(0===r.length)return a?[o,""]:[o];let i=$(r.join("/")),l=[];return l.push(...i.map((e=>""===e?o:[o,e].join("/")))),a&&l.push(...i),l.map((t=>e.startsWith("/")&&""===t?"/":t))}!function(e){e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error"}(I||(I={})),new Set(["lazy","caseSensitive","path","id","index","children"]);const D=/^:[\w-]+$/,W=3,U=2,V=1,H=10,Y=-2,G=e=>"*"===e;function q(e,t){let n=e.split("/"),r=n.length;return n.some(G)&&(r+=Y),t&&(r+=U),n.filter((e=>!G(e))).reduce(((e,t)=>e+(D.test(t)?W:""===t?V:H)),r)}function K(e,t,n){void 0===n&&(n=!1);let{routesMeta:r}=e,a={},o="/",i=[];for(let e=0;e<r.length;++e){let l=r[e],s=e===r.length-1,u="/"===o?t:t.slice(o.length)||"/",c=X({path:l.relativePath,caseSensitive:l.caseSensitive,end:s},u),d=l.route;if(!c&&s&&n&&!r[r.length-1].route.index&&(c=X({path:l.relativePath,caseSensitive:l.caseSensitive,end:!1},u)),!c)return null;Object.assign(a,c.params),i.push({params:a,pathname:ne([o,c.pathname]),pathnameBase:re(ne([o,c.pathnameBase])),route:d}),"/"!==c.pathnameBase&&(o=ne([o,c.pathnameBase]))}return i}function X(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=function(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!0),R("*"===e||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were "'+e.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+e.replace(/\*$/,"/*")+'".');let r=[],a="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^${}|()[\]]/g,"\\$&").replace(/\/:([\w-]+)(\?)?/g,((e,t,n)=>(r.push({paramName:t,isOptional:null!=n}),n?"/?([^\\/]+)?":"/([^\\/]+)")));return e.endsWith("*")?(r.push({paramName:"*"}),a+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):n?a+="\\/*$":""!==e&&"/"!==e&&(a+="(?:(?=\\/|$))"),[new RegExp(a,t?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),a=t.match(n);if(!a)return null;let o=a[0],i=o.replace(/(.)\/+$/,"$1"),l=a.slice(1);return{params:r.reduce(((e,t,n)=>{let{paramName:r,isOptional:a}=t;if("*"===r){let e=l[n]||"";i=o.slice(0,o.length-e.length).replace(/(.)\/+$/,"$1")}const s=l[n];return e[r]=a&&!s?void 0:(s||"").replace(/%2F/g,"/"),e}),{}),pathname:o,pathnameBase:i,pattern:e}}function Q(e){try{return e.split("/").map((e=>decodeURIComponent(e).replace(/\//g,"%2F"))).join("/")}catch(t){return R(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding ('+t+")."),e}}function J(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=t.endsWith("/")?t.length-1:t.length,r=e.charAt(n);return r&&"/"!==r?null:e.slice(n)||"/"}function Z(e,t,n,r){return"Cannot include a '"+e+"' character in a manually specified `to."+t+"` field ["+JSON.stringify(r)+"].  Please separate it out to the `to."+n+'` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.'}function ee(e,t){let n=function(e){return e.filter(((e,t)=>0===t||e.route.path&&e.route.path.length>0))}(e);return t?n.map(((e,t)=>t===n.length-1?e.pathname:e.pathnameBase)):n.map((e=>e.pathnameBase))}function te(e,t,n,r){let a;void 0===r&&(r=!1),"string"==typeof e?a=M(e):(a=T({},e),N(!a.pathname||!a.pathname.includes("?"),Z("?","pathname","search",a)),N(!a.pathname||!a.pathname.includes("#"),Z("#","pathname","hash",a)),N(!a.search||!a.search.includes("#"),Z("#","search","hash",a)));let o,i=""===e||""===a.pathname,l=i?"/":a.pathname;if(null==l)o=n;else{let e=t.length-1;if(!r&&l.startsWith("..")){let t=l.split("/");for(;".."===t[0];)t.shift(),e-=1;a.pathname=t.join("/")}o=e>=0?t[e]:"/"}let s=function(e,t){void 0===t&&(t="/");let{pathname:n,search:r="",hash:a=""}="string"==typeof e?M(e):e,o=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:o,search:ae(r),hash:oe(a)}}(a,o),u=l&&"/"!==l&&l.endsWith("/"),c=(i||"."===l)&&n.endsWith("/");return s.pathname.endsWith("/")||!u&&!c||(s.pathname+="/"),s}const ne=e=>e.join("/").replace(/\/\/+/g,"/"),re=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),ae=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",oe=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";Error;const ie=["post","put","patch","delete"],le=(new Set(ie),["get",...ie]);function se(){return se=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},se.apply(this,arguments)}new Set(le),new Set([301,302,303,307,308]),new Set([307,308]),Symbol("deferred");const ue=t.createContext(null),ce=t.createContext(null),de=t.createContext(null),pe=t.createContext(null),fe=t.createContext({outlet:null,matches:[],isDataRoute:!1}),me=t.createContext(null);function he(){return null!=t.useContext(pe)}function Ae(){return he()||N(!1),t.useContext(pe).location}function ge(e){t.useContext(de).static||t.useLayoutEffect(e)}function ye(){let{isDataRoute:e}=t.useContext(fe);return e?function(){let{router:e}=function(e){let n=t.useContext(ue);return n||N(!1),n}(Se.UseNavigateStable),n=Be(_e.UseNavigateStable),r=t.useRef(!1);ge((()=>{r.current=!0}));let a=t.useCallback((function(t,a){void 0===a&&(a={}),r.current&&("number"==typeof t?e.navigate(t):e.navigate(t,se({fromRouteId:n},a)))}),[e,n]);return a}():function(){he()||N(!1);let e=t.useContext(ue),{basename:n,future:r,navigator:a}=t.useContext(de),{matches:o}=t.useContext(fe),{pathname:i}=Ae(),l=JSON.stringify(ee(o,r.v7_relativeSplatPath)),s=t.useRef(!1);ge((()=>{s.current=!0}));let u=t.useCallback((function(t,r){if(void 0===r&&(r={}),!s.current)return;if("number"==typeof t)return void a.go(t);let o=te(t,JSON.parse(l),i,"path"===r.relative);null==e&&"/"!==n&&(o.pathname="/"===o.pathname?n:ne([n,o.pathname])),(r.replace?a.replace:a.push)(o,r.state,r)}),[n,a,l,i,e]);return u}()}function ve(){let{matches:e}=t.useContext(fe),n=e[e.length-1];return n?n.params:{}}function be(e,n){let{relative:r}=void 0===n?{}:n,{future:a}=t.useContext(de),{matches:o}=t.useContext(fe),{pathname:i}=Ae(),l=JSON.stringify(ee(o,a.v7_relativeSplatPath));return t.useMemo((()=>te(e,JSON.parse(l),i,"path"===r)),[e,l,i,r])}function xe(e,n,r,a){he()||N(!1);let{navigator:o}=t.useContext(de),{matches:i}=t.useContext(fe),l=i[i.length-1],s=l?l.params:{},u=(l&&l.pathname,l?l.pathnameBase:"/");l&&l.route;let c,d=Ae();if(n){var p;let e="string"==typeof n?M(n):n;"/"===u||(null==(p=e.pathname)?void 0:p.startsWith(u))||N(!1),c=e}else c=d;let f=c.pathname||"/",m=f;if("/"!==u){let e=u.replace(/^\//,"").split("/");m="/"+f.replace(/^\//,"").split("/").slice(e.length).join("/")}let h=L(e,{pathname:m}),A=function(e,n,r,a){var o;if(void 0===n&&(n=[]),void 0===r&&(r=null),void 0===a&&(a=null),null==e){var i;if(null==(i=r)||!i.errors)return null;e=r.matches}let l=e,s=null==(o=r)?void 0:o.errors;if(null!=s){let e=l.findIndex((e=>e.route.id&&void 0!==(null==s?void 0:s[e.route.id])));e>=0||N(!1),l=l.slice(0,Math.min(l.length,e+1))}let u=!1,c=-1;if(r&&a&&a.v7_partialHydration)for(let e=0;e<l.length;e++){let t=l[e];if((t.route.HydrateFallback||t.route.hydrateFallbackElement)&&(c=e),t.route.id){let{loaderData:e,errors:n}=r,a=t.route.loader&&void 0===e[t.route.id]&&(!n||void 0===n[t.route.id]);if(t.route.lazy||a){u=!0,l=c>=0?l.slice(0,c+1):[l[0]];break}}}return l.reduceRight(((e,a,o)=>{let i,d=!1,p=null,f=null;var m;r&&(i=s&&a.route.id?s[a.route.id]:void 0,p=a.route.errorElement||Ce,u&&(c<0&&0===o?(Te[m="route-fallback"]||(Te[m]=!0),d=!0,f=null):c===o&&(d=!0,f=a.route.hydrateFallbackElement||null)));let h=n.concat(l.slice(0,o+1)),A=()=>{let n;return n=i?p:d?f:a.route.Component?t.createElement(a.route.Component,null):a.route.element?a.route.element:e,t.createElement(ke,{match:a,routeContext:{outlet:e,matches:h,isDataRoute:null!=r},children:n})};return r&&(a.route.ErrorBoundary||a.route.errorElement||0===o)?t.createElement(we,{location:r.location,revalidation:r.revalidation,component:p,error:i,children:A(),routeContext:{outlet:null,matches:h,isDataRoute:!0}}):A()}),null)}(h&&h.map((e=>Object.assign({},e,{params:Object.assign({},s,e.params),pathname:ne([u,o.encodeLocation?o.encodeLocation(e.pathname).pathname:e.pathname]),pathnameBase:"/"===e.pathnameBase?u:ne([u,o.encodeLocation?o.encodeLocation(e.pathnameBase).pathname:e.pathnameBase])}))),i,r,a);return n&&A?t.createElement(pe.Provider,{value:{location:se({pathname:"/",search:"",hash:"",state:null,key:"default"},c),navigationType:S.Pop}},A):A}function Ee(){let e=function(){var e;let n=t.useContext(me),r=function(e){let n=t.useContext(ce);return n||N(!1),n}(_e.UseRouteError),a=Be(_e.UseRouteError);return void 0!==n?n:null==(e=r.errors)?void 0:e[a]}(),n=function(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"boolean"==typeof e.internal&&"data"in e}(e)?e.status+" "+e.statusText:e instanceof Error?e.message:JSON.stringify(e),r=e instanceof Error?e.stack:null,a={padding:"0.5rem",backgroundColor:"rgba(200,200,200, 0.5)"};return t.createElement(t.Fragment,null,t.createElement("h2",null,"Unexpected Application Error!"),t.createElement("h3",{style:{fontStyle:"italic"}},n),r?t.createElement("pre",{style:a},r):null,null)}const Ce=t.createElement(Ee,null);class we extends t.Component{constructor(e){super(e),this.state={location:e.location,revalidation:e.revalidation,error:e.error}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,t){return t.location!==e.location||"idle"!==t.revalidation&&"idle"===e.revalidation?{error:e.error,location:e.location,revalidation:e.revalidation}:{error:void 0!==e.error?e.error:t.error,location:t.location,revalidation:e.revalidation||t.revalidation}}componentDidCatch(e,t){console.error("React Router caught the following error during render",e,t)}render(){return void 0!==this.state.error?t.createElement(fe.Provider,{value:this.props.routeContext},t.createElement(me.Provider,{value:this.state.error,children:this.props.component})):this.props.children}}function ke(e){let{routeContext:n,match:r,children:a}=e,o=t.useContext(ue);return o&&o.static&&o.staticContext&&(r.route.errorElement||r.route.ErrorBoundary)&&(o.staticContext._deepestRenderedBoundaryId=r.route.id),t.createElement(fe.Provider,{value:n},a)}var Se=function(e){return e.UseBlocker="useBlocker",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e}(Se||{}),_e=function(e){return e.UseBlocker="useBlocker",e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e.UseRouteId="useRouteId",e}(_e||{});function Be(e){let n=function(e){let n=t.useContext(fe);return n||N(!1),n}(),r=n.matches[n.matches.length-1];return r.route.id||N(!1),r.route.id}const Te={};function je(e){let{to:n,replace:r,state:a,relative:o}=e;he()||N(!1);let{future:i,static:l}=t.useContext(de),{matches:s}=t.useContext(fe),{pathname:u}=Ae(),c=ye(),d=te(n,ee(s,i.v7_relativeSplatPath),u,"path"===o),p=JSON.stringify(d);return t.useEffect((()=>c(JSON.parse(p),{replace:r,state:a,relative:o})),[c,p,o,r,a]),null}function Ne(e){N(!1)}function Re(e){let{basename:n="/",children:r=null,location:a,navigationType:o=S.Pop,navigator:i,static:l=!1,future:s}=e;he()&&N(!1);let u=n.replace(/^\/*/,"/"),c=t.useMemo((()=>({basename:u,navigator:i,static:l,future:se({v7_relativeSplatPath:!1},s)})),[u,s,i,l]);"string"==typeof a&&(a=M(a));let{pathname:d="/",search:p="",hash:f="",state:m=null,key:h="default"}=a,A=t.useMemo((()=>{let e=J(d,u);return null==e?null:{location:{pathname:e,search:p,hash:f,state:m,key:h},navigationType:o}}),[u,d,p,f,m,h,o]);return null==A?null:t.createElement(de.Provider,{value:c},t.createElement(pe.Provider,{children:r,value:A}))}function Pe(e){let{children:t,location:n}=e;return xe(Oe(t),n)}function Oe(e,n){void 0===n&&(n=[]);let r=[];return t.Children.forEach(e,((e,a)=>{if(!t.isValidElement(e))return;let o=[...n,a];if(e.type===t.Fragment)return void r.push.apply(r,Oe(e.props.children,o));e.type!==Ne&&N(!1),e.props.index&&e.props.children&&N(!1);let i={id:e.props.id||o.join("-"),caseSensitive:e.props.caseSensitive,element:e.props.element,Component:e.props.Component,index:e.props.index,path:e.props.path,loader:e.props.loader,action:e.props.action,errorElement:e.props.errorElement,ErrorBoundary:e.props.ErrorBoundary,hasErrorBoundary:null!=e.props.ErrorBoundary||null!=e.props.errorElement,shouldRevalidate:e.props.shouldRevalidate,handle:e.props.handle,lazy:e.props.lazy};e.props.children&&(i.children=Oe(e.props.children,o)),r.push(i)})),r}function ze(){return ze=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},ze.apply(this,arguments)}function Me(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}function Ie(e){return void 0===e&&(e=""),new URLSearchParams("string"==typeof e||Array.isArray(e)||e instanceof URLSearchParams?e:Object.keys(e).reduce(((t,n)=>{let r=e[n];return t.concat(Array.isArray(r)?r.map((e=>[n,e])):[[n,r]])}),[]))}n.startTransition,new Promise((()=>{})),t.Component,new Set(["application/x-www-form-urlencoded","multipart/form-data","text/plain"]);const Le=["onClick","relative","reloadDocument","replace","state","target","to","preventScrollReset","unstable_viewTransition"],Fe=["aria-current","caseSensitive","className","end","style","to","unstable_viewTransition","children"];try{window.__reactRouterVersion="6"}catch(e){}const $e=t.createContext({isTransitioning:!1});new Map;const De=n.startTransition;function We(e){let{basename:n,children:r,future:a,window:o}=e,i=t.useRef();null==i.current&&(i.current=function(e){return void 0===e&&(e={}),function(e,t,n,r){void 0===r&&(r={});let{window:a=document.defaultView,v5Compat:o=!1}=r,i=a.history,l=S.Pop,s=null,u=c();function c(){return(i.state||{idx:null}).idx}function d(){l=S.Pop;let e=c(),t=null==e?null:e-u;u=e,s&&s({action:l,location:f.location,delta:t})}function p(e){let t="null"!==a.location.origin?a.location.origin:a.location.href,n="string"==typeof e?e:z(e);return n=n.replace(/ $/,"%20"),N(t,"No window.location.(origin|href) available to create URL for href: "+n),new URL(n,t)}null==u&&(u=0,i.replaceState(T({},i.state,{idx:u}),""));let f={get action(){return l},get location(){return e(a,i)},listen(e){if(s)throw new Error("A history only accepts one active listener");return a.addEventListener(j,d),s=e,()=>{a.removeEventListener(j,d),s=null}},createHref:e=>t(a,e),createURL:p,encodeLocation(e){let t=p(e);return{pathname:t.pathname,search:t.search,hash:t.hash}},push:function(e,t){l=S.Push;let r=O(f.location,e,t);n&&n(r,e),u=c()+1;let d=P(r,u),p=f.createHref(r);try{i.pushState(d,"",p)}catch(e){if(e instanceof DOMException&&"DataCloneError"===e.name)throw e;a.location.assign(p)}o&&s&&s({action:l,location:f.location,delta:1})},replace:function(e,t){l=S.Replace;let r=O(f.location,e,t);n&&n(r,e),u=c();let a=P(r,u),d=f.createHref(r);i.replaceState(a,"",d),o&&s&&s({action:l,location:f.location,delta:0})},go:e=>i.go(e)};return f}((function(e,t){let{pathname:n,search:r,hash:a}=e.location;return O("",{pathname:n,search:r,hash:a},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){return"string"==typeof t?t:z(t)}),null,e)}({window:o,v5Compat:!0}));let l=i.current,[s,u]=t.useState({action:l.action,location:l.location}),{v7_startTransition:c}=a||{},d=t.useCallback((e=>{c&&De?De((()=>u(e))):u(e)}),[u,c]);return t.useLayoutEffect((()=>l.listen(d)),[l,d]),t.createElement(Re,{basename:n,children:r,location:s.location,navigationType:s.action,navigator:l,future:a})}B.flushSync,n.useId;const Ue="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement,Ve=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,He=t.forwardRef((function(e,n){let r,{onClick:a,relative:o,reloadDocument:i,replace:l,state:s,target:u,to:c,preventScrollReset:d,unstable_viewTransition:p}=e,f=Me(e,Le),{basename:m}=t.useContext(de),h=!1;if("string"==typeof c&&Ve.test(c)&&(r=c,Ue))try{let e=new URL(window.location.href),t=c.startsWith("//")?new URL(e.protocol+c):new URL(c),n=J(t.pathname,m);t.origin===e.origin&&null!=n?c=n+t.search+t.hash:h=!0}catch(e){}let A=function(e,n){let{relative:r}=void 0===n?{}:n;he()||N(!1);let{basename:a,navigator:o}=t.useContext(de),{hash:i,pathname:l,search:s}=be(e,{relative:r}),u=l;return"/"!==a&&(u="/"===l?a:ne([a,l])),o.createHref({pathname:u,search:s,hash:i})}(c,{relative:o}),g=function(e,n){let{target:r,replace:a,state:o,preventScrollReset:i,relative:l,unstable_viewTransition:s}=void 0===n?{}:n,u=ye(),c=Ae(),d=be(e,{relative:l});return t.useCallback((t=>{if(function(e,t){return!(0!==e.button||t&&"_self"!==t||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e))}(t,r)){t.preventDefault();let n=void 0!==a?a:z(c)===z(d);u(e,{replace:n,state:o,preventScrollReset:i,relative:l,unstable_viewTransition:s})}}),[c,u,d,a,o,r,e,i,l,s])}(c,{replace:l,state:s,target:u,preventScrollReset:d,relative:o,unstable_viewTransition:p});return t.createElement("a",ze({},f,{href:r||A,onClick:h||i?a:function(e){a&&a(e),e.defaultPrevented||g(e)},ref:n,target:u}))})),Ye=t.forwardRef((function(e,n){let{"aria-current":r="page",caseSensitive:a=!1,className:o="",end:i=!1,style:l,to:s,unstable_viewTransition:u,children:c}=e,d=Me(e,Fe),p=be(s,{relative:d.relative}),f=Ae(),m=t.useContext(ce),{navigator:h,basename:A}=t.useContext(de),g=null!=m&&function(e,n){void 0===n&&(n={});let r=t.useContext($e);null==r&&N(!1);let{basename:a}=function(e){let n=t.useContext(ue);return n||N(!1),n}(Ge.useViewTransitionState),o=be(e,{relative:n.relative});if(!r.isTransitioning)return!1;let i=J(r.currentLocation.pathname,a)||r.currentLocation.pathname,l=J(r.nextLocation.pathname,a)||r.nextLocation.pathname;return null!=X(o.pathname,l)||null!=X(o.pathname,i)}(p)&&!0===u,y=h.encodeLocation?h.encodeLocation(p).pathname:p.pathname,v=f.pathname,b=m&&m.navigation&&m.navigation.location?m.navigation.location.pathname:null;a||(v=v.toLowerCase(),b=b?b.toLowerCase():null,y=y.toLowerCase()),b&&A&&(b=J(b,A)||b);const x="/"!==y&&y.endsWith("/")?y.length-1:y.length;let E,C=v===y||!i&&v.startsWith(y)&&"/"===v.charAt(x),w=null!=b&&(b===y||!i&&b.startsWith(y)&&"/"===b.charAt(y.length)),k={isActive:C,isPending:w,isTransitioning:g},S=C?r:void 0;E="function"==typeof o?o(k):[o,C?"active":null,w?"pending":null,g?"transitioning":null].filter(Boolean).join(" ");let _="function"==typeof l?l(k):l;return t.createElement(He,ze({},d,{"aria-current":S,className:E,ref:n,style:_,to:s,unstable_viewTransition:u}),"function"==typeof c?c(k):c)}));var Ge,qe;function Ke(e){let n=t.useRef(Ie(e)),r=t.useRef(!1),a=Ae(),o=t.useMemo((()=>function(e,t){let n=Ie(e);return t&&t.forEach(((e,r)=>{n.has(r)||t.getAll(r).forEach((e=>{n.append(r,e)}))})),n}(a.search,r.current?null:n.current)),[a.search]),i=ye(),l=t.useCallback(((e,t)=>{const n=Ie("function"==typeof e?e(o):e);r.current=!0,i("?"+n,t)}),[i,o]);return[o,l]}function Xe(e){return`Minified Redux error #${e}; visit https://redux.js.org/Errors?code=${e} for the full message or use the non-minified dev environment for full errors. `}(function(e){e.UseScrollRestoration="useScrollRestoration",e.UseSubmit="useSubmit",e.UseSubmitFetcher="useSubmitFetcher",e.UseFetcher="useFetcher",e.useViewTransitionState="useViewTransitionState"})(Ge||(Ge={})),function(e){e.UseFetcher="useFetcher",e.UseFetchers="useFetchers",e.UseScrollRestoration="useScrollRestoration"}(qe||(qe={}));var Qe=(()=>"function"==typeof Symbol&&Symbol.observable||"@@observable")(),Je=()=>Math.random().toString(36).substring(7).split("").join("."),Ze={INIT:`@@redux/INIT${Je()}`,REPLACE:`@@redux/REPLACE${Je()}`,PROBE_UNKNOWN_ACTION:()=>`@@redux/PROBE_UNKNOWN_ACTION${Je()}`};function et(e){if("object"!=typeof e||null===e)return!1;let t=e;for(;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t||null===Object.getPrototypeOf(e)}function tt(e,t,n){if("function"!=typeof e)throw new Error(Xe(2));if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error(Xe(0));if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error(Xe(1));return n(tt)(e,t)}let r=e,a=t,o=new Map,i=o,l=0,s=!1;function u(){i===o&&(i=new Map,o.forEach(((e,t)=>{i.set(t,e)})))}function c(){if(s)throw new Error(Xe(3));return a}function d(e){if("function"!=typeof e)throw new Error(Xe(4));if(s)throw new Error(Xe(5));let t=!0;u();const n=l++;return i.set(n,e),function(){if(t){if(s)throw new Error(Xe(6));t=!1,u(),i.delete(n),o=null}}}function p(e){if(!et(e))throw new Error(Xe(7));if(void 0===e.type)throw new Error(Xe(8));if("string"!=typeof e.type)throw new Error(Xe(17));if(s)throw new Error(Xe(9));try{s=!0,a=r(a,e)}finally{s=!1}return(o=i).forEach((e=>{e()})),e}return p({type:Ze.INIT}),{dispatch:p,subscribe:d,getState:c,replaceReducer:function(e){if("function"!=typeof e)throw new Error(Xe(10));r=e,p({type:Ze.REPLACE})},[Qe]:function(){const e=d;return{subscribe(t){if("object"!=typeof t||null===t)throw new Error(Xe(11));function n(){const e=t;e.next&&e.next(c())}return n(),{unsubscribe:e(n)}},[Qe](){return this}}}}}function nt(e){const t=Object.keys(e),n={};for(let r=0;r<t.length;r++){const a=t[r];"function"==typeof e[a]&&(n[a]=e[a])}const r=Object.keys(n);let a;try{!function(e){Object.keys(e).forEach((t=>{const n=e[t];if(void 0===n(void 0,{type:Ze.INIT}))throw new Error(Xe(12));if(void 0===n(void 0,{type:Ze.PROBE_UNKNOWN_ACTION()}))throw new Error(Xe(13))}))}(n)}catch(e){a=e}return function(e={},t){if(a)throw a;let o=!1;const i={};for(let a=0;a<r.length;a++){const l=r[a],s=n[l],u=e[l],c=s(u,t);if(void 0===c)throw t&&t.type,new Error(Xe(14));i[l]=c,o=o||c!==u}return o=o||r.length!==Object.keys(e).length,o?i:e}}function rt(...e){return 0===e.length?e=>e:1===e.length?e[0]:e.reduce(((e,t)=>(...n)=>e(t(...n))))}var at=Symbol.for("immer-nothing"),ot=Symbol.for("immer-draftable"),it=Symbol.for("immer-state");function lt(e,...t){throw new Error(`[Immer] minified error nr: ${e}. Full error at: https://bit.ly/3cXEKWf`)}var st=Object.getPrototypeOf;function ut(e){return!!e&&!!e[it]}function ct(e){return!!e&&(pt(e)||Array.isArray(e)||!!e[ot]||!!e.constructor?.[ot]||gt(e)||yt(e))}var dt=Object.prototype.constructor.toString();function pt(e){if(!e||"object"!=typeof e)return!1;const t=st(e);if(null===t)return!0;const n=Object.hasOwnProperty.call(t,"constructor")&&t.constructor;return n===Object||"function"==typeof n&&Function.toString.call(n)===dt}function ft(e,t){0===mt(e)?Reflect.ownKeys(e).forEach((n=>{t(n,e[n],e)})):e.forEach(((n,r)=>t(r,n,e)))}function mt(e){const t=e[it];return t?t.type_:Array.isArray(e)?1:gt(e)?2:yt(e)?3:0}function ht(e,t){return 2===mt(e)?e.has(t):Object.prototype.hasOwnProperty.call(e,t)}function At(e,t,n){const r=mt(e);2===r?e.set(t,n):3===r?e.add(n):e[t]=n}function gt(e){return e instanceof Map}function yt(e){return e instanceof Set}function vt(e){return e.copy_||e.base_}function bt(e,t){if(gt(e))return new Map(e);if(yt(e))return new Set(e);if(Array.isArray(e))return Array.prototype.slice.call(e);const n=pt(e);if(!0===t||"class_only"===t&&!n){const t=Object.getOwnPropertyDescriptors(e);delete t[it];let n=Reflect.ownKeys(t);for(let r=0;r<n.length;r++){const a=n[r],o=t[a];!1===o.writable&&(o.writable=!0,o.configurable=!0),(o.get||o.set)&&(t[a]={configurable:!0,writable:!0,enumerable:o.enumerable,value:e[a]})}return Object.create(st(e),t)}{const t=st(e);if(null!==t&&n)return{...e};const r=Object.create(t);return Object.assign(r,e)}}function xt(e,t=!1){return Ct(e)||ut(e)||!ct(e)||(mt(e)>1&&(e.set=e.add=e.clear=e.delete=Et),Object.freeze(e),t&&Object.entries(e).forEach((([e,t])=>xt(t,!0)))),e}function Et(){lt(2)}function Ct(e){return Object.isFrozen(e)}var wt,kt={};function St(e){const t=kt[e];return t||lt(0),t}function _t(){return wt}function Bt(e,t){t&&(St("Patches"),e.patches_=[],e.inversePatches_=[],e.patchListener_=t)}function Tt(e){jt(e),e.drafts_.forEach(Rt),e.drafts_=null}function jt(e){e===wt&&(wt=e.parent_)}function Nt(e){return wt={drafts_:[],parent_:wt,immer_:e,canAutoFreeze_:!0,unfinalizedDrafts_:0}}function Rt(e){const t=e[it];0===t.type_||1===t.type_?t.revoke_():t.revoked_=!0}function Pt(e,t){t.unfinalizedDrafts_=t.drafts_.length;const n=t.drafts_[0];return void 0!==e&&e!==n?(n[it].modified_&&(Tt(t),lt(4)),ct(e)&&(e=Ot(t,e),t.parent_||Mt(t,e)),t.patches_&&St("Patches").generateReplacementPatches_(n[it].base_,e,t.patches_,t.inversePatches_)):e=Ot(t,n,[]),Tt(t),t.patches_&&t.patchListener_(t.patches_,t.inversePatches_),e!==at?e:void 0}function Ot(e,t,n){if(Ct(t))return t;const r=t[it];if(!r)return ft(t,((a,o)=>zt(e,r,t,a,o,n))),t;if(r.scope_!==e)return t;if(!r.modified_)return Mt(e,r.base_,!0),r.base_;if(!r.finalized_){r.finalized_=!0,r.scope_.unfinalizedDrafts_--;const t=r.copy_;let a=t,o=!1;3===r.type_&&(a=new Set(t),t.clear(),o=!0),ft(a,((a,i)=>zt(e,r,t,a,i,n,o))),Mt(e,t,!1),n&&e.patches_&&St("Patches").generatePatches_(r,n,e.patches_,e.inversePatches_)}return r.copy_}function zt(e,t,n,r,a,o,i){if(ut(a)){const i=Ot(e,a,o&&t&&3!==t.type_&&!ht(t.assigned_,r)?o.concat(r):void 0);if(At(n,r,i),!ut(i))return;e.canAutoFreeze_=!1}else i&&n.add(a);if(ct(a)&&!Ct(a)){if(!e.immer_.autoFreeze_&&e.unfinalizedDrafts_<1)return;Ot(e,a),t&&t.scope_.parent_||"symbol"==typeof r||!Object.prototype.propertyIsEnumerable.call(n,r)||Mt(e,a)}}function Mt(e,t,n=!1){!e.parent_&&e.immer_.autoFreeze_&&e.canAutoFreeze_&&xt(t,n)}var It={get(e,t){if(t===it)return e;const n=vt(e);if(!ht(n,t))return function(e,t,n){const r=$t(t,n);return r?"value"in r?r.value:r.get?.call(e.draft_):void 0}(e,n,t);const r=n[t];return e.finalized_||!ct(r)?r:r===Ft(e.base_,t)?(Wt(e),e.copy_[t]=Ut(r,e)):r},has:(e,t)=>t in vt(e),ownKeys:e=>Reflect.ownKeys(vt(e)),set(e,t,n){const r=$t(vt(e),t);if(r?.set)return r.set.call(e.draft_,n),!0;if(!e.modified_){const r=Ft(vt(e),t),i=r?.[it];if(i&&i.base_===n)return e.copy_[t]=n,e.assigned_[t]=!1,!0;if(((a=n)===(o=r)?0!==a||1/a==1/o:a!=a&&o!=o)&&(void 0!==n||ht(e.base_,t)))return!0;Wt(e),Dt(e)}var a,o;return e.copy_[t]===n&&(void 0!==n||t in e.copy_)||Number.isNaN(n)&&Number.isNaN(e.copy_[t])||(e.copy_[t]=n,e.assigned_[t]=!0),!0},deleteProperty:(e,t)=>(void 0!==Ft(e.base_,t)||t in e.base_?(e.assigned_[t]=!1,Wt(e),Dt(e)):delete e.assigned_[t],e.copy_&&delete e.copy_[t],!0),getOwnPropertyDescriptor(e,t){const n=vt(e),r=Reflect.getOwnPropertyDescriptor(n,t);return r?{writable:!0,configurable:1!==e.type_||"length"!==t,enumerable:r.enumerable,value:n[t]}:r},defineProperty(){lt(11)},getPrototypeOf:e=>st(e.base_),setPrototypeOf(){lt(12)}},Lt={};function Ft(e,t){const n=e[it];return(n?vt(n):e)[t]}function $t(e,t){if(!(t in e))return;let n=st(e);for(;n;){const e=Object.getOwnPropertyDescriptor(n,t);if(e)return e;n=st(n)}}function Dt(e){e.modified_||(e.modified_=!0,e.parent_&&Dt(e.parent_))}function Wt(e){e.copy_||(e.copy_=bt(e.base_,e.scope_.immer_.useStrictShallowCopy_))}function Ut(e,t){const n=gt(e)?St("MapSet").proxyMap_(e,t):yt(e)?St("MapSet").proxySet_(e,t):function(e,t){const n=Array.isArray(e),r={type_:n?1:0,scope_:t?t.scope_:_t(),modified_:!1,finalized_:!1,assigned_:{},parent_:t,base_:e,draft_:null,copy_:null,revoke_:null,isManual_:!1};let a=r,o=It;n&&(a=[r],o=Lt);const{revoke:i,proxy:l}=Proxy.revocable(a,o);return r.draft_=l,r.revoke_=i,l}(e,t);return(t?t.scope_:_t()).drafts_.push(n),n}function Vt(e){return ut(e)||lt(10),Ht(e)}function Ht(e){if(!ct(e)||Ct(e))return e;const t=e[it];let n;if(t){if(!t.modified_)return t.base_;t.finalized_=!0,n=bt(e,t.scope_.immer_.useStrictShallowCopy_)}else n=bt(e,!0);return ft(n,((e,t)=>{At(n,e,Ht(t))})),t&&(t.finalized_=!1),n}ft(It,((e,t)=>{Lt[e]=function(){return arguments[0]=arguments[0][0],t.apply(this,arguments)}})),Lt.deleteProperty=function(e,t){return Lt.set.call(this,e,t,void 0)},Lt.set=function(e,t,n){return It.set.call(this,e[0],t,n,e[0])};var Yt=new class{constructor(e){this.autoFreeze_=!0,this.useStrictShallowCopy_=!1,this.produce=(e,t,n)=>{if("function"==typeof e&&"function"!=typeof t){const n=t;t=e;const r=this;return function(e=n,...a){return r.produce(e,(e=>t.call(this,e,...a)))}}let r;if("function"!=typeof t&&lt(6),void 0!==n&&"function"!=typeof n&&lt(7),ct(e)){const a=Nt(this),o=Ut(e,void 0);let i=!0;try{r=t(o),i=!1}finally{i?Tt(a):jt(a)}return Bt(a,n),Pt(r,a)}if(!e||"object"!=typeof e){if(r=t(e),void 0===r&&(r=e),r===at&&(r=void 0),this.autoFreeze_&&xt(r,!0),n){const t=[],a=[];St("Patches").generateReplacementPatches_(e,r,t,a),n(t,a)}return r}lt(1)},this.produceWithPatches=(e,t)=>{if("function"==typeof e)return(t,...n)=>this.produceWithPatches(t,(t=>e(t,...n)));let n,r;return[this.produce(e,t,((e,t)=>{n=e,r=t})),n,r]},"boolean"==typeof e?.autoFreeze&&this.setAutoFreeze(e.autoFreeze),"boolean"==typeof e?.useStrictShallowCopy&&this.setUseStrictShallowCopy(e.useStrictShallowCopy)}createDraft(e){ct(e)||lt(8),ut(e)&&(e=Vt(e));const t=Nt(this),n=Ut(e,void 0);return n[it].isManual_=!0,jt(t),n}finishDraft(e,t){const n=e&&e[it];n&&n.isManual_||lt(9);const{scope_:r}=n;return Bt(r,t),Pt(void 0,r)}setAutoFreeze(e){this.autoFreeze_=e}setUseStrictShallowCopy(e){this.useStrictShallowCopy_=e}applyPatches(e,t){let n;for(n=t.length-1;n>=0;n--){const r=t[n];if(0===r.path.length&&"replace"===r.op){e=r.value;break}}n>-1&&(t=t.slice(n+1));const r=St("Patches").applyPatches_;return ut(e)?r(e,t):this.produce(e,(e=>r(e,t)))}},Gt=Yt.produce;Yt.produceWithPatches.bind(Yt),Yt.setAutoFreeze.bind(Yt),Yt.setUseStrictShallowCopy.bind(Yt),Yt.applyPatches.bind(Yt),Yt.createDraft.bind(Yt),Yt.finishDraft.bind(Yt);var qt=e=>Array.isArray(e)?e:[e];Symbol(),Object.getPrototypeOf({});var Kt="undefined"!=typeof WeakRef?WeakRef:class{constructor(e){this.value=e}deref(){return this.value}},Xt=0,Qt=1;function Jt(){return{s:Xt,v:void 0,o:null,p:null}}function Zt(e,t={}){let n=Jt();const{resultEqualityCheck:r}=t;let a,o=0;function i(){let t=n;const{length:i}=arguments;for(let e=0,n=i;e<n;e++){const n=arguments[e];if("function"==typeof n||"object"==typeof n&&null!==n){let e=t.o;null===e&&(t.o=e=new WeakMap);const r=e.get(n);void 0===r?(t=Jt(),e.set(n,t)):t=r}else{let e=t.p;null===e&&(t.p=e=new Map);const r=e.get(n);void 0===r?(t=Jt(),e.set(n,t)):t=r}}const l=t;let s;if(t.s===Qt)s=t.v;else if(s=e.apply(null,arguments),o++,r){const e=a?.deref?.()??a;null!=e&&r(e,s)&&(s=e,0!==o&&o--),a="object"==typeof s&&null!==s||"function"==typeof s?new Kt(s):s}return l.s=Qt,l.v=s,s}return i.clearCache=()=>{n=Jt(),i.resetResultsCount()},i.resultsCount=()=>o,i.resetResultsCount=()=>{o=0},i}function en(e,...t){const n="function"==typeof e?{memoize:e,memoizeOptions:t}:e,r=(...e)=>{let t,r=0,a=0,o={},i=e.pop();"object"==typeof i&&(o=i,i=e.pop()),function(e,t="expected a function, instead received "+typeof e){if("function"!=typeof e)throw new TypeError(t)}(i,`createSelector expects an output function after the inputs, but received: [${typeof i}]`);const l={...n,...o},{memoize:s,memoizeOptions:u=[],argsMemoize:c=Zt,argsMemoizeOptions:d=[],devModeChecks:p={}}=l,f=qt(u),m=qt(d),h=function(e){const t=Array.isArray(e[0])?e[0]:e;return function(e,t="expected all items to be functions, instead received the following types: "){if(!e.every((e=>"function"==typeof e))){const n=e.map((e=>"function"==typeof e?`function ${e.name||"unnamed"}()`:typeof e)).join(", ");throw new TypeError(`${t}[${n}]`)}}(t,"createSelector expects all input-selectors to be functions, but received the following types: "),t}(e),A=s((function(){return r++,i.apply(null,arguments)}),...f),g=c((function(){a++;const e=function(e,t){const n=[],{length:r}=e;for(let a=0;a<r;a++)n.push(e[a].apply(null,t));return n}(h,arguments);return t=A.apply(null,e),t}),...m);return Object.assign(g,{resultFunc:i,memoizedResultFunc:A,dependencies:h,dependencyRecomputations:()=>a,resetDependencyRecomputations:()=>{a=0},lastResult:()=>t,recomputations:()=>r,resetRecomputations:()=>{r=0},memoize:s,argsMemoize:c})};return Object.assign(r,{withTypes:()=>r}),r}var tn=en(Zt),nn=Object.assign(((e,t=tn)=>{!function(e,t="expected an object, instead received "+typeof e){if("object"!=typeof e)throw new TypeError(t)}(e,"createStructuredSelector expects first argument to be an object where each property is a selector, instead received a "+typeof e);const n=Object.keys(e);return t(n.map((t=>e[t])),((...e)=>e.reduce(((e,t,r)=>(e[n[r]]=t,e)),{})))}),{withTypes:()=>nn});function rn(e){return({dispatch:t,getState:n})=>r=>a=>"function"==typeof a?a(t,n,e):r(a)}var an=rn(),on=rn,ln=(((...e)=>{const t=en(...e),n=Object.assign(((...e)=>{const n=t(...e),r=(e,...t)=>n(ut(e)?Vt(e):e,...t);return Object.assign(r,n),r}),{withTypes:()=>n})})(Zt),"undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__:function(){if(0!==arguments.length)return"object"==typeof arguments[0]?rt:rt.apply(null,arguments)}),sn=("undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION__&&window.__REDUX_DEVTOOLS_EXTENSION__,e=>e&&"function"==typeof e.match);function un(e,t){function n(...n){if(t){let r=t(...n);if(!r)throw new Error(Mn(0));return{type:e,payload:r.payload,..."meta"in r&&{meta:r.meta},..."error"in r&&{error:r.error}}}return{type:e,payload:n[0]}}return n.toString=()=>`${e}`,n.type=e,n.match=t=>function(e){return et(e)&&"type"in e&&"string"==typeof e.type}(t)&&t.type===e,n}var cn=class e extends Array{constructor(...t){super(...t),Object.setPrototypeOf(this,e.prototype)}static get[Symbol.species](){return e}concat(...e){return super.concat.apply(this,e)}prepend(...t){return 1===t.length&&Array.isArray(t[0])?new e(...t[0].concat(this)):new e(...t.concat(this))}};function dn(e){return ct(e)?Gt(e,(()=>{})):e}function pn(e,t,n){if(e.has(t)){let r=e.get(t);return n.update&&(r=n.update(r,t,e),e.set(t,r)),r}if(!n.insert)throw new Error(Mn(10));const r=n.insert(t,e);return e.set(t,r),r}var fn=e=>t=>{setTimeout(t,e)},mn="undefined"!=typeof window&&window.requestAnimationFrame?window.requestAnimationFrame:fn(10);function hn(e){const t={},n=[];let r;const a={addCase(e,n){const r="string"==typeof e?e:e.type;if(!r)throw new Error(Mn(28));if(r in t)throw new Error(Mn(29));return t[r]=n,a},addMatcher:(e,t)=>(n.push({matcher:e,reducer:t}),a),addDefaultCase:e=>(r=e,a)};return e(a),[t,n,r]}var An=(e=21)=>{let t="",n=e;for(;n--;)t+="ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW"[64*Math.random()|0];return t};function gn(...e){return t=>e.some((e=>((e,t)=>sn(e)?e.match(t):e(t))(e,t)))}var yn=["name","message","stack","code"],vn=class{constructor(e,t){this.payload=e,this.meta=t}_type},bn=class{constructor(e,t){this.payload=e,this.meta=t}_type},xn=e=>{if("object"==typeof e&&null!==e){const t={};for(const n of yn)"string"==typeof e[n]&&(t[n]=e[n]);return t}return{message:String(e)}},En=(()=>{function e(e,t,n){const r=un(e+"/fulfilled",((e,t,n,r)=>({payload:e,meta:{...r||{},arg:n,requestId:t,requestStatus:"fulfilled"}}))),a=un(e+"/pending",((e,t,n)=>({payload:void 0,meta:{...n||{},arg:t,requestId:e,requestStatus:"pending"}}))),o=un(e+"/rejected",((e,t,r,a,o)=>({payload:a,error:(n&&n.serializeError||xn)(e||"Rejected"),meta:{...o||{},arg:r,requestId:t,rejectedWithValue:!!a,requestStatus:"rejected",aborted:"AbortError"===e?.name,condition:"ConditionError"===e?.name}})));return Object.assign((function(e){return(i,l,s)=>{const u=n?.idGenerator?n.idGenerator(e):An(),c=new AbortController;let d,p;function f(e){p=e,c.abort()}const m=async function(){let m;try{let o=n?.condition?.(e,{getState:l,extra:s});if(null!==(h=o)&&"object"==typeof h&&"function"==typeof h.then&&(o=await o),!1===o||c.signal.aborted)throw{name:"ConditionError",message:"Aborted due to condition callback returning false."};const A=new Promise(((e,t)=>{d=()=>{t({name:"AbortError",message:p||"Aborted"})},c.signal.addEventListener("abort",d)}));i(a(u,e,n?.getPendingMeta?.({requestId:u,arg:e},{getState:l,extra:s}))),m=await Promise.race([A,Promise.resolve(t(e,{dispatch:i,getState:l,extra:s,requestId:u,signal:c.signal,abort:f,rejectWithValue:(e,t)=>new vn(e,t),fulfillWithValue:(e,t)=>new bn(e,t)})).then((t=>{if(t instanceof vn)throw t;return t instanceof bn?r(t.payload,u,e,t.meta):r(t,u,e)}))])}catch(t){m=t instanceof vn?o(null,u,e,t.payload,t.meta):o(t,u,e)}finally{d&&c.signal.removeEventListener("abort",d)}var h;return n&&!n.dispatchConditionRejection&&o.match(m)&&m.meta.condition||i(m),m}();return Object.assign(m,{abort:f,requestId:u,arg:e,unwrap:()=>m.then(Cn)})}}),{pending:a,rejected:o,fulfilled:r,settled:gn(o,r),typePrefix:e})}return e.withTypes=()=>e,e})();function Cn(e){if(e.meta&&e.meta.rejectedWithValue)throw e.payload;if(e.error)throw e.error;return e.payload}var wn=Symbol.for("rtk-slice-createasyncthunk");function kn(e,t){return`${e}/${t}`}function Sn({creators:e}={}){const t=e?.asyncThunk?.[wn];return function(e){const{name:n,reducerPath:r=n}=e;if(!n)throw new Error(Mn(11));const a=("function"==typeof e.reducers?e.reducers(function(){function e(e,t){return{_reducerDefinitionType:"asyncThunk",payloadCreator:e,...t}}return e.withTypes=()=>e,{reducer:e=>Object.assign({[e.name]:(...t)=>e(...t)}[e.name],{_reducerDefinitionType:"reducer"}),preparedReducer:(e,t)=>({_reducerDefinitionType:"reducerWithPrepare",prepare:e,reducer:t}),asyncThunk:e}}()):e.reducers)||{},o=Object.keys(a),i={sliceCaseReducersByName:{},sliceCaseReducersByType:{},actionCreators:{},sliceMatchers:[]},l={addCase(e,t){const n="string"==typeof e?e:e.type;if(!n)throw new Error(Mn(12));if(n in i.sliceCaseReducersByType)throw new Error(Mn(13));return i.sliceCaseReducersByType[n]=t,l},addMatcher:(e,t)=>(i.sliceMatchers.push({matcher:e,reducer:t}),l),exposeAction:(e,t)=>(i.actionCreators[e]=t,l),exposeCaseReducer:(e,t)=>(i.sliceCaseReducersByName[e]=t,l)};function s(){const[t={},n=[],r]="function"==typeof e.extraReducers?hn(e.extraReducers):[e.extraReducers],a={...t,...i.sliceCaseReducersByType};return function(e,t){let o,[l,s,u]=hn((e=>{for(let t in a)e.addCase(t,a[t]);for(let t of i.sliceMatchers)e.addMatcher(t.matcher,t.reducer);for(let t of n)e.addMatcher(t.matcher,t.reducer);r&&e.addDefaultCase(r)}));if("function"==typeof e)o=()=>dn(e());else{const t=dn(e);o=()=>t}function c(e=o(),t){let n=[l[t.type],...s.filter((({matcher:e})=>e(t))).map((({reducer:e})=>e))];return 0===n.filter((e=>!!e)).length&&(n=[u]),n.reduce(((e,n)=>{if(n){if(ut(e)){const r=n(e,t);return void 0===r?e:r}if(ct(e))return Gt(e,(e=>n(e,t)));{const r=n(e,t);if(void 0===r){if(null===e)return e;throw new Error(Mn(9))}return r}}return e}),e)}return c.getInitialState=o,c}(e.initialState)}o.forEach((r=>{const o=a[r],i={reducerName:r,type:kn(n,r),createNotation:"function"==typeof e.reducers};!function(e){return"asyncThunk"===e._reducerDefinitionType}(o)?function({type:e,reducerName:t,createNotation:n},r,a){let o,i;if("reducer"in r){if(n&&!function(e){return"reducerWithPrepare"===e._reducerDefinitionType}(r))throw new Error(Mn(17));o=r.reducer,i=r.prepare}else o=r;a.addCase(e,o).exposeCaseReducer(t,o).exposeAction(t,i?un(e,i):un(e))}(i,o,l):function({type:e,reducerName:t},n,r,a){if(!a)throw new Error(Mn(18));const{payloadCreator:o,fulfilled:i,pending:l,rejected:s,settled:u,options:c}=n,d=a(e,o,c);r.exposeAction(t,d),i&&r.addCase(d.fulfilled,i),l&&r.addCase(d.pending,l),s&&r.addCase(d.rejected,s),u&&r.addMatcher(d.settled,u),r.exposeCaseReducer(t,{fulfilled:i||Tn,pending:l||Tn,rejected:s||Tn,settled:u||Tn})}(i,o,l,t)}));const u=e=>e,c=new Map;let d;function p(e,t){return d||(d=s()),d(e,t)}function f(){return d||(d=s()),d.getInitialState()}function m(t,n=!1){function r(e){let r=e[t];return void 0===r&&n&&(r=f()),r}function a(t=u){const r=pn(c,n,{insert:()=>new WeakMap});return pn(r,t,{insert:()=>{const r={};for(const[a,o]of Object.entries(e.selectors??{}))r[a]=_n(o,t,f,n);return r}})}return{reducerPath:t,getSelectors:a,get selectors(){return a(r)},selectSlice:r}}const h={name:n,reducer:p,actions:i.actionCreators,caseReducers:i.sliceCaseReducersByName,getInitialState:f,...m(r),injectInto(e,{reducerPath:t,...n}={}){const a=t??r;return e.inject({reducerPath:a,reducer:p},n),{...h,...m(a,!0)}}};return h}}function _n(e,t,n,r){function a(a,...o){let i=t(a);return void 0===i&&r&&(i=n()),e(i,...o)}return a.unwrapped=e,a}var Bn=Sn();function Tn(){}var{assign:jn}=Object,Nn="listenerMiddleware",Rn=e=>{let{type:t,actionCreator:n,matcher:r,predicate:a,effect:o}=e;if(t)a=un(t).match;else if(n)t=n.type,a=n.match;else if(r)a=r;else if(!a)throw new Error(Mn(21));return((e,t)=>{if("function"!=typeof e)throw new Error(Mn(32))})(o),{predicate:a,type:t,effect:o}},Pn=Object.assign((e=>{const{type:t,predicate:n,effect:r}=Rn(e);return{id:An(),effect:r,type:t,predicate:n,pending:new Set,unsubscribe:()=>{throw new Error(Mn(22))}}}),{withTypes:()=>Pn}),On=Object.assign(un(`${Nn}/add`),{withTypes:()=>On}),zn=(un(`${Nn}/removeAll`),Object.assign(un(`${Nn}/remove`),{withTypes:()=>zn}));function Mn(e){return`Minified Redux Toolkit error #${e}; visit https://redux-toolkit.js.org/Errors?code=${e} for the full message or use the non-minified dev environment for full errors. `}Symbol.for("rtk-state-proxy-original");const In="calendar";function Ln(e,t,n){const r={method:e||"GET"};return t&&(r.headers=t),e&&"GET"!==e&&(r.headers=r.headers||{"Content-Type":"application/json"},r.body=JSON.stringify(n)),r}const Fn="AIzaSyAn9_QITpEQMM1OT98HuJ-YuWmv9sEuFR0",$n="https://nv-otus-final-default-rtdb.firebaseio.com";class Dn{static instance=null;authData={localId:"",idToken:"",expiresIn:"0",refreshToken:""};constructor(e=In){this.appPrefix=e}static getInstance(){return Dn.instance||new Dn}setAuthData(e){return this.authData=e,e.refreshToken?(setTimeout((()=>this.renewAuth()),1e3*Number(this.authData.expiresIn)*.95),this.authData):null}async auth(e,t,n){const r=Ln("POST",null,{email:t,password:n,returnSecureToken:!0}),a=`https://identitytoolkit.googleapis.com/v1/accounts:${"signin"===e?"signInWithPassword":"signUp"}?key=${Fn}`,o=await fetch(a,r);if(!o.ok)return null;const i=await o.json();return this.setAuthData({...i})}async signIn(e,t){return await this.auth("signin",e,t)}async signUp(e,t){return await this.auth("signup",e,t)}async renewAuth(e){const t=Ln("POST",null,{refresh_token:e||this.authData.refreshToken,grant_type:"refresh_token"}),n=await fetch(`https://securetoken.googleapis.com/v1/token?key=${Fn}`,t);if(n.ok){const e=await n.json();return this.setAuthData({expiresIn:e.expires_in,refreshToken:e.refresh_token,idToken:e.id_token,localId:e.user_id})}return this.signOut(),null}async signOut(){this.authData={localId:"",idToken:"",expiresIn:"0",refreshToken:""}}async getUserData(){if(!this.authData.idToken)return null;const e=Ln("POST",null,{idToken:this.authData.idToken,returnSecureToken:!0}),t=await fetch(`https://identitytoolkit.googleapis.com/v1/accounts:lookup?key=${Fn}`,e);return t.ok?(await t.json()).users[0]:null}async updateEmail(e){if(!this.authData.idToken)return null;const t=Ln("POST",null,{idToken:this.authData.idToken,email:e,returnSecureToken:!0}),n=await fetch(`https://identitytoolkit.googleapis.com/v1/accounts:update?key=${Fn}`,t);return n.ok?(await n.json()).email:null}async resetPassword(e){const t=Ln("POST",null,{email:e,requestType:"PASSWORD_RESET"}),n=await fetch(`https://identitytoolkit.googleapis.com/v1/accounts:sendOobCode?key=${Fn}`,t);return n.ok?(await n.json()).email:null}async fetchEntity(e,t,n){if(!this.authData.idToken||!this.authData.localId)return Promise.reject(new Error("not authenticated"));const r=Ln(t?.method,null,t?.data),a={auth:this.authData.idToken,...t?.params},o=new URLSearchParams(a).toString(),i=n?`${$n}/${this.appPrefix}/${this.authData.localId}/${e}/${n}.json?${o}`:`${$n}/${this.appPrefix}/${this.authData.localId}/${e}.json?${o}`;try{let e=await fetch(i,r);if(!e.ok&&401===e.status){if(!await this.renewAuth())return void this.signOut();e=await fetch(i,r)}return e.ok?await e.json():void 0}catch(e){return}}async create(e,t){const n=await this.fetchEntity(e,{data:t,method:"POST"});if(n)return n.name}async read(e,t){const n={};t.dateFrom&&(n.startAt=t.dateFrom),t.dateTo&&(n.endAt=t.dateTo),(t.dateFrom||t.dateTo)&&(n.orderBy='"startDate"');return await this.fetchEntity(e,{method:"GET",params:n})||{}}async update(e,t){if(void 0===t?.id)return;const{id:n}=t;try{return await this.fetchEntity(e,{method:"PATCH",data:t},n)}catch(e){throw new Error(e.message)}}async delete(e,t){await this.fetchEntity(e,{method:"DELETE"},t)}}const Wn=Dn.getInstance(),Un=En("auth/checkAuth",(async(e,{rejectWithValue:t})=>{const n=localStorage.getItem(`${In}@token`);try{if(!n)return t("token not found");const e=await Wn.renewAuth(n);if(!e)throw new Error("User not found");return e}catch(e){return t(e.message)}})),Vn=En("auth/login",(async(e,{rejectWithValue:t})=>{try{const{email:t,password:n}=e,r=await Wn.signIn(t,n);if(!r)throw new Error("User not found");return r}catch(e){return t(e.message)}})),Hn=En("auth/logout",(async(e,t)=>{t.dispatch({type:"logout/LOGOUT"}),await Wn.signOut()})),Yn=En("auth/signUp",(async(e,{rejectWithValue:t})=>{try{const{email:t,password:n}=e,r=await Wn.signUp(t,n);if(!r)throw new Error("User not registered");return r}catch(e){return t(e.message)}})),Gn=En("@auth/resetPassword",(async(e,{rejectWithValue:t})=>{try{const{email:t}=e;if(!await Wn.resetPassword(t))throw new Error("Password reset is not possible")}catch(e){return t(e.message)}return null})),qn=En("@auth/updateEmail",(async(e,{rejectWithValue:t})=>{try{const{newEmail:t}=e;if(!await Wn.updateEmail(t))throw new Error("Email update is not possible")}catch(e){return t(e.message)}return null})),Kn=Bn({name:"user",initialState:{isLoading:!0,isAuthenticated:!1,errorState:"",refreshToken:""},reducers:{},extraReducers:e=>{e.addCase(Vn.pending,(e=>{const t=e;t.isLoading=!0,t.errorState=""})).addCase(Vn.fulfilled,((e,{payload:t})=>{const n=e;n.isLoading=!1,n.isAuthenticated=!0,n.user=t,localStorage.setItem(`${In}@token`,t.refreshToken)})).addCase(Vn.rejected,((e,{payload:t})=>{const n=e;n.isLoading=!1,n.errorState=t,n.isAuthenticated=!1,n.user=void 0})).addCase(Hn.pending,(e=>{const t=e;t.isLoading=!0,t.isAuthenticated=!1,t.user=void 0,t.errorState=""})).addCase(Hn.fulfilled,(e=>{e.isLoading=!1,localStorage.removeItem(`${In}@token`)})).addCase(Yn.pending,(e=>{const t=e;t.isLoading=!0,t.isAuthenticated=!1,t.errorState=""})).addCase(Yn.fulfilled,((e,t)=>{const n=e;n.isLoading=!1,n.isAuthenticated=!0,n.user=t.payload,localStorage.setItem(`${In}@token`,t.payload.refreshToken)})).addCase(Yn.rejected,((e,t)=>{const n=e;n.isLoading=!1,n.errorState=t.payload,n.isAuthenticated=!1,n.user={}})).addCase(Un.pending,(e=>{const t=e;t.isLoading=!0,t.isAuthenticated=!1,t.errorState=""})).addCase(Un.fulfilled,((e,t)=>{const n=e;n.isLoading=!1,n.isAuthenticated=!0,n.user=t.payload,localStorage.setItem(`${In}@token`,t.payload.refreshToken)})).addCase(Un.rejected,(e=>{const t=e;t.isLoading=!1,t.isAuthenticated=!1,t.user={},localStorage.removeItem(`${In}@token`)})).addCase(Gn.pending,(e=>{e.isLoading=!0})).addCase(Gn.fulfilled,(e=>{const t=e;t.isLoading=!1,t.errorState=""})).addCase(Gn.rejected,((e,t)=>{const n=e;n.isLoading=!1,n.errorState=t.payload})).addCase(qn.pending,(e=>{e.isLoading=!0})).addCase(qn.fulfilled,(e=>{const t=e;t.isLoading=!1,t.errorState=""})).addCase(qn.rejected,((e,t)=>{const n=e;n.isLoading=!1,n.errorState=t.payload}))}}),Xn=En("calendar/read",(async(e,{rejectWithValue:t})=>{try{const t=await Wn.read("tasks",e);return Object.entries(t).map((([e,t])=>({...t,id:e}))).sort(((e,t)=>e.startDate-t.startDate)).filter((t=>!(e.text&&!t.taskTitle.includes(e.text)&&!t.description.includes(e.text)||e.tagText&&!t.tags.includes(e.tagText))))}catch(e){return t(e.message)}})),Qn=En("calendar/create",(async(e,{rejectWithValue:t})=>{try{const t=await Wn.create("tasks",e);if(!t)throw new Error("Task is not created");return{...e,id:t}}catch(e){return t(e.message)}})),Jn=En("calendar/update",(async(e,{rejectWithValue:t})=>{try{const t=await Wn.update("tasks",e);if(!t)throw new Error("Can not update task");return t}catch(e){return t(e.message)}})),Zn=En("calendar/delete",(async(e,{rejectWithValue:t})=>{try{return await Wn.delete("tasks",e),e}catch(e){return t(e.message)}})),er=Bn({name:"calendar",initialState:{isLoading:!1,errorState:"",items:[],filteredItems:[]},reducers:{},extraReducers:e=>{e.addCase(Xn.pending,(e=>{const t=e;t.isLoading=!0,t.errorState=""})).addCase(Xn.fulfilled,((e,t)=>{const n=e;n.isLoading=!1,n.items=[...t.payload]})).addCase(Xn.rejected,((e,{payload:t})=>{const n=e;n.isLoading=!1,n.errorState=t})).addCase(Qn.pending,(e=>{const t=e;t.isLoading=!0,t.errorState=""})).addCase(Qn.fulfilled,((e,t)=>{const n=e;n.isLoading=!1,n.items.push(t.payload)})).addCase(Qn.rejected,((e,{payload:t})=>{const n=e;n.isLoading=!1,n.errorState=t})).addCase(Jn.pending,(e=>{const t=e;t.isLoading=!0,t.errorState=""})).addCase(Jn.fulfilled,((e,t)=>{const n=e;n.isLoading=!1;const r=n.items.findIndex((e=>e.id===t.payload.id));n.items[r]={...n.items[r],...t.payload}})).addCase(Jn.rejected,((e,{payload:t})=>{const n=e;n.isLoading=!1,n.errorState=t})).addCase(Zn.pending,(e=>{const t=e;t.isLoading=!0,t.errorState=""})).addCase(Zn.fulfilled,((e,t)=>{const n=e;n.isLoading=!1,n.items=n.items.filter((e=>e.id!==t.payload))})).addCase(Zn.rejected,((e,{payload:t})=>{const n=e;n.isLoading=!1,n.errorState=t}))}}),tr=En("user/getData",(async(e,{rejectWithValue:t})=>{try{const e=await Wn.getUserData();if(!e)throw new Error("Could not get user data");return e}catch(e){return t(e.message)}})),nr=Bn({name:"user",initialState:{isLoading:!1,errorState:"",user:null},reducers:{},extraReducers:e=>{e.addCase(tr.pending,(e=>{const t=e;return t.isLoading=!0,t})).addCase(tr.fulfilled,((e,t)=>{const n=e;return n.user=t.payload,n.isLoading=!1,n.errorState="",n})).addCase(tr.rejected,((e,{payload:t})=>{const n=e;return n.isLoading=!1,n.errorState=t,n}))}}),rr=nt({auth:Kn.reducer,calendar:er.reducer,user:nr.reducer}),ar=function(e){const t=function(e){const{thunk:t=!0,immutableCheck:n=!0,serializableCheck:r=!0,actionCreatorCheck:a=!0}=e??{};let o=new cn;return t&&("boolean"==typeof t?o.push(an):o.push(on(t.extraArgument))),o},{reducer:n,middleware:r,devTools:a=!0,preloadedState:o,enhancers:i}=e||{};let l,s;if("function"==typeof n)l=n;else{if(!et(n))throw new Error(Mn(1));l=nt(n)}s="function"==typeof r?r(t):t();let u=rt;a&&(u=ln({trace:!1,..."object"==typeof a&&a}));const c=function(...e){return t=>(n,r)=>{const a=t(n,r);let o=()=>{throw new Error(Xe(15))};const i={getState:a.getState,dispatch:(e,...t)=>o(e,...t)},l=e.map((e=>e(i)));return o=rt(...l)(a.dispatch),{...a,dispatch:o}}}(...s),d=(e=>function(t){const{autoBatch:n=!0}=t??{};let r=new cn(e);return n&&r.push(((e={type:"raf"})=>t=>(...n)=>{const r=t(...n);let a=!0,o=!1,i=!1;const l=new Set,s="tick"===e.type?queueMicrotask:"raf"===e.type?mn:"callback"===e.type?e.queueNotification:fn(e.timeout),u=()=>{i=!1,o&&(o=!1,l.forEach((e=>e())))};return Object.assign({},r,{subscribe(e){const t=r.subscribe((()=>a&&e()));return l.add(e),()=>{t(),l.delete(e)}},dispatch(e){try{return a=!e?.meta?.RTK_autoBatch,o=!a,o&&(i||(i=!0,s(u))),r.dispatch(e)}finally{a=!0}}})})("object"==typeof n?n:void 0)),r})(c);return tt(l,o,u(..."function"==typeof i?i(d):d()))}({reducer:(e,t)=>"logout/LOGOUT"===t.type?rr(void 0,t):rr(e,t),middleware:e=>e()});var or=a(5292),ir=a.n(or),lr=a(9893),sr=a.n(lr),ur=a(9383),cr=a.n(ur),dr=a(6884),pr=a.n(dr),fr=a(9088),mr=a.n(fr),hr=a(7997),Ar=a.n(hr),gr=a(4086),yr={};yr.styleTagTransform=Ar(),yr.setAttributes=pr(),yr.insert=cr().bind(null,"head"),yr.domAPI=sr(),yr.insertStyleElement=mr(),ir()(gr.A,yr),gr.A&&gr.A.locals&&gr.A.locals;var vr=a(2540);function br({isAuthenticated:e,onSignOut:t}){return(0,vr.jsx)("header",{className:"page__header header",children:(0,vr.jsxs)("div",{className:"container",children:[(0,vr.jsx)("div",{className:"header__logo_text",children:(0,vr.jsx)(Ye,{className:"header__logo-link",to:"/",children:"🗓️"})}),(0,vr.jsx)("nav",{className:"header__nav nav",children:(0,vr.jsxs)("ul",{className:"nav__list",children:[(0,vr.jsx)("li",{className:"nav__list-item",children:(0,vr.jsx)(Ye,{className:"nav__link",to:"/",children:"Home"})}),(0,vr.jsx)("li",{className:"nav__list-item",children:(0,vr.jsx)(Ye,{className:"nav__link",to:"calendar",children:"Calendar"})}),(0,vr.jsx)("li",{className:"nav__list-item",children:(0,vr.jsx)(Ye,{className:"nav__link",to:"about",children:"About"})}),e&&(0,vr.jsx)("li",{className:"nav__list-item",children:(0,vr.jsx)(Ye,{className:"nav__link",to:"profile",children:"Profile"})}),!e&&(0,vr.jsx)("li",{className:"nav__list-item",children:(0,vr.jsx)(Ye,{className:"nav__link",to:"auth/signin",children:"Sign In"})}),!e&&(0,vr.jsx)("li",{className:"nav__list-item",children:(0,vr.jsx)(Ye,{className:"nav__link",to:"auth/signup",children:"Sign Up"})}),e&&(0,vr.jsx)("li",{className:"nav__list-item",children:(0,vr.jsx)(Ye,{className:"nav__link",to:"auth/signout",onClick:e=>{e.preventDefault(),t()},children:"Sign Out"})})]})})]})})}function xr({children:e,isAuthenticated:n}){const r=Ae(),a=ye();return(0,t.useLayoutEffect)((()=>{n||a("/auth/signin",{state:{from:r.pathname}})}),[n]),n?e:null}const Er=e=>e.auth,Cr=e=>e.user,wr=e=>e.calendar;var kr=a(8301),Sr={};function _r(){return(0,vr.jsx)("main",{className:"page__home",children:(0,vr.jsx)("div",{className:"container home__wrapper",children:(0,vr.jsxs)("div",{className:"content-frame",children:[(0,vr.jsx)("h1",{children:'"Календарь событий с авторизацией"'}),(0,vr.jsx)("p",{children:"Выполнено с применением технологий:"}),(0,vr.jsxs)("ul",{children:[(0,vr.jsx)("li",{children:"Typescript"}),(0,vr.jsx)("li",{children:"React"}),(0,vr.jsx)("li",{children:"Redux (react-redux, redux/toolkit)"}),(0,vr.jsx)("li",{children:"React-router"}),(0,vr.jsx)("li",{children:"Jest"}),(0,vr.jsx)("li",{children:"Playwright"}),(0,vr.jsx)("li",{children:"React-testing-library"}),(0,vr.jsx)("li",{children:"Firebase"})]}),(0,vr.jsx)("p",{children:"Приложение поддерживает регистрацию новых пользователей"}),(0,vr.jsx)("p",{children:"Хранение данных в Firebase осуществляется раздельно для каждого пользователя"}),(0,vr.jsx)("p",{children:"Авторизация пользователей выполнена с использованием email и пароля"})]})})})}Sr.styleTagTransform=Ar(),Sr.setAttributes=pr(),Sr.insert=cr().bind(null,"head"),Sr.domAPI=sr(),Sr.insertStyleElement=mr(),ir()(kr.A,Sr),kr.A&&kr.A.locals&&kr.A.locals;var Br=a(5449),Tr={};Tr.styleTagTransform=Ar(),Tr.setAttributes=pr(),Tr.insert=cr().bind(null,"head"),Tr.domAPI=sr(),Tr.insertStyleElement=mr(),ir()(Br.A,Tr);const jr=Br.A&&Br.A.locals?Br.A.locals:void 0,Nr={signin:{title:"Sign in",altForm:"signup",altHref:"/auth/signup",altTitle:"Sign up"},signup:{title:"Sign up",altForm:"signin",altHref:"/auth/signin",altTitle:"Sign in"},recover:{title:"Recover",altForm:"signin",altHref:"/auth/signin",altTitle:"Sign in"}};function Rr({activeForm:e,onSubmit:n,onChangeForm:r,errorState:a}){const o=(0,t.useRef)(null),i={onSubmit:e=>{e.preventDefault();const t=o.current;if(t.checkValidity()){const e=t.elements.namedItem("email"),r=t.elements.namedItem("password");n(e.value,r.value)}},changeForm(e){e.preventDefault();const t=e.target;r(t.pathname)}},l=Nr[e];return(0,vr.jsx)("div",{className:jr.auth,children:(0,vr.jsxs)("form",{id:"sign-up-form",className:jr.form,noValidate:!0,onSubmit:i.onSubmit,ref:o,children:[(0,vr.jsx)("h1",{className:jr.title,children:l.title}),(0,vr.jsxs)("div",{className:jr.inputGroup,children:[(0,vr.jsx)("label",{className:jr.label,htmlFor:"email",children:"Email"}),(0,vr.jsx)("input",{type:"email",name:"email",id:"email",className:jr.inputField,placeholder:"Email",required:!0})]}),"recover"!==e&&(0,vr.jsxs)("div",{className:jr.inputGroup,children:[(0,vr.jsx)("label",{className:jr.label,htmlFor:"password",children:"Password"}),(0,vr.jsx)("input",{type:"password",name:"password",id:"password",minLength:6,className:jr.inputField,placeholder:"Password",required:!0})]}),a&&(0,vr.jsx)("p",{className:jr.error,children:a}),(0,vr.jsx)("div",{className:jr.btnGroup,children:(0,vr.jsx)("button",{type:"submit",className:[jr.btn,jr.btnSubmit].join(" "),children:l.title})}),(0,vr.jsxs)("div",{className:jr.linkGroup,children:[(0,vr.jsx)("a",{href:l.altHref,className:jr.change,onClick:i.changeForm,children:l.altTitle}),"recover"!==e&&(0,vr.jsx)("a",{href:"/auth/recover",className:jr.recover,onClick:i.changeForm,children:"Forgot password?"})]})]})})}var Pr=a(7774),Or={};function zr(){const e=ye(),n=Ae(),r=ve().action||"",a=function({activeForm:e,from:t,navigate:n}){const r=k();return{onSubmit:(t,n)=>{"signin"===e?r(Vn({email:t,password:n})):"signup"===e?r(Yn({email:t,password:n})):"recover"===e&&r(Gn({email:t}))},changeForm(e){n(e,{replace:!0,state:{state:t}})}}}({activeForm:r,from:null!==n.state?n.state.from:null,navigate:e}),o=h(Er);return(0,t.useLayoutEffect)((()=>{o.isAuthenticated&&!o.isLoading&&(n.state&&null!==n.state.from?e(-1):e("/"))}),[o.isAuthenticated]),["signin","signup","recover"].includes(r)?!o.isLoading&&!o.isAuthenticated&&(0,vr.jsx)("div",{className:"page__auth",children:(0,vr.jsx)(Rr,{activeForm:r,onSubmit:a.onSubmit,onChangeForm:a.changeForm,errorState:o.errorState})}):(0,vr.jsx)(je,{to:"/",replace:!0})}Or.styleTagTransform=Ar(),Or.setAttributes=pr(),Or.insert=cr().bind(null,"head"),Or.domAPI=sr(),Or.insertStyleElement=mr(),ir()(Pr.A,Or),Pr.A&&Pr.A.locals&&Pr.A.locals;var Mr=a(6074),Ir=a(9257),Lr=a(8102),Fr=a(1750),$r=a(1023),Dr=a(7308),Wr=a(4939),Ur=a(9424),Vr=a(2398),Hr=a(7900);function Yr(e,t){return Yr=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},Yr(e,t)}function Gr(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,Yr(e,t)}const qr=t.createContext(null);function Kr(e,n){var r=Object.create(null);return e&&t.Children.map(e,(function(e){return e})).forEach((function(e){r[e.key]=function(e){return n&&(0,t.isValidElement)(e)?n(e):e}(e)})),r}function Xr(e,t,n){return null!=n[t]?n[t]:e.props[t]}function Qr(e,n,r){var a=Kr(e.children),o=function(e,t){function n(n){return n in t?t[n]:e[n]}e=e||{},t=t||{};var r,a=Object.create(null),o=[];for(var i in e)i in t?o.length&&(a[i]=o,o=[]):o.push(i);var l={};for(var s in t){if(a[s])for(r=0;r<a[s].length;r++){var u=a[s][r];l[a[s][r]]=n(u)}l[s]=n(s)}for(r=0;r<o.length;r++)l[o[r]]=n(o[r]);return l}(n,a);return Object.keys(o).forEach((function(i){var l=o[i];if((0,t.isValidElement)(l)){var s=i in n,u=i in a,c=n[i],d=(0,t.isValidElement)(c)&&!c.props.in;!u||s&&!d?u||!s||d?u&&s&&(0,t.isValidElement)(c)&&(o[i]=(0,t.cloneElement)(l,{onExited:r.bind(null,l),in:c.props.in,exit:Xr(l,"exit",e),enter:Xr(l,"enter",e)})):o[i]=(0,t.cloneElement)(l,{in:!1}):o[i]=(0,t.cloneElement)(l,{onExited:r.bind(null,l),in:!0,exit:Xr(l,"exit",e),enter:Xr(l,"enter",e)})}})),o}var Jr=Object.values||function(e){return Object.keys(e).map((function(t){return e[t]}))},Zr=function(e){function n(t,n){var r,a=(r=e.call(this,t,n)||this).handleExited.bind(function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(r));return r.state={contextValue:{isMounting:!0},handleExited:a,firstRender:!0},r}Gr(n,e);var r=n.prototype;return r.componentDidMount=function(){this.mounted=!0,this.setState({contextValue:{isMounting:!1}})},r.componentWillUnmount=function(){this.mounted=!1},n.getDerivedStateFromProps=function(e,n){var r,a,o=n.children,i=n.handleExited;return{children:n.firstRender?(r=e,a=i,Kr(r.children,(function(e){return(0,t.cloneElement)(e,{onExited:a.bind(null,e),in:!0,appear:Xr(e,"appear",r),enter:Xr(e,"enter",r),exit:Xr(e,"exit",r)})}))):Qr(e,o,i),firstRender:!1}},r.handleExited=function(e,t){var n=Kr(this.props.children);e.key in n||(e.props.onExited&&e.props.onExited(t),this.mounted&&this.setState((function(t){var n=(0,Lr.A)({},t.children);return delete n[e.key],{children:n}})))},r.render=function(){var e=this.props,n=e.component,r=e.childFactory,a=(0,Ir.A)(e,["component","childFactory"]),o=this.state.contextValue,i=Jr(this.state.children).map(r);return delete a.appear,delete a.enter,delete a.exit,null===n?t.createElement(qr.Provider,{value:o},i):t.createElement(qr.Provider,{value:o},t.createElement(n,a,i))},n}(t.Component);Zr.propTypes={},Zr.defaultProps={component:"div",childFactory:function(e){return e}};const ea=Zr;var ta=a(1785),na=a(8016);var ra=a(9009);const aa=(0,ra.A)("MuiTouchRipple",["root","ripple","rippleVisible","ripplePulsate","child","childLeaving","childPulsate"]),oa=["center","classes","className"];let ia,la,sa,ua,ca=e=>e;const da=(0,ta.i7)(ia||(ia=ca`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`)),pa=(0,ta.i7)(la||(la=ca`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`)),fa=(0,ta.i7)(sa||(sa=ca`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`)),ma=(0,Dr.Ay)("span",{name:"MuiTouchRipple",slot:"Root"})({overflow:"hidden",pointerEvents:"none",position:"absolute",zIndex:0,top:0,right:0,bottom:0,left:0,borderRadius:"inherit"}),ha=(0,Dr.Ay)((function(e){const{className:n,classes:r,pulsate:a=!1,rippleX:o,rippleY:i,rippleSize:l,in:s,onExited:u,timeout:c}=e,[d,p]=t.useState(!1),f=(0,Fr.A)(n,r.ripple,r.rippleVisible,a&&r.ripplePulsate),m={width:l,height:l,top:-l/2+i,left:-l/2+o},h=(0,Fr.A)(r.child,d&&r.childLeaving,a&&r.childPulsate);return s||d||p(!0),t.useEffect((()=>{if(!s&&null!=u){const e=setTimeout(u,c);return()=>{clearTimeout(e)}}}),[u,s,c]),(0,vr.jsx)("span",{className:f,style:m,children:(0,vr.jsx)("span",{className:h})})}),{name:"MuiTouchRipple",slot:"Ripple"})(ua||(ua=ca`
  opacity: 0;
  position: absolute;

  &.${0} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  &.${0} {
    animation-duration: ${0}ms;
  }

  & .${0} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${0} {
    opacity: 0;
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  & .${0} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${0};
    animation-duration: 2500ms;
    animation-timing-function: ${0};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`),aa.rippleVisible,da,550,(({theme:e})=>e.transitions.easing.easeInOut),aa.ripplePulsate,(({theme:e})=>e.transitions.duration.shorter),aa.child,aa.childLeaving,pa,550,(({theme:e})=>e.transitions.easing.easeInOut),aa.childPulsate,fa,(({theme:e})=>e.transitions.easing.easeInOut)),Aa=t.forwardRef((function(e,n){const r=(0,Wr.b)({props:e,name:"MuiTouchRipple"}),{center:a=!1,classes:o={},className:i}=r,l=(0,Ir.A)(r,oa),[s,u]=t.useState([]),c=t.useRef(0),d=t.useRef(null);t.useEffect((()=>{d.current&&(d.current(),d.current=null)}),[s]);const p=t.useRef(!1),f=(0,na.A)(),m=t.useRef(null),h=t.useRef(null),A=t.useCallback((e=>{const{pulsate:t,rippleX:n,rippleY:r,rippleSize:a,cb:i}=e;u((e=>[...e,(0,vr.jsx)(ha,{classes:{ripple:(0,Fr.A)(o.ripple,aa.ripple),rippleVisible:(0,Fr.A)(o.rippleVisible,aa.rippleVisible),ripplePulsate:(0,Fr.A)(o.ripplePulsate,aa.ripplePulsate),child:(0,Fr.A)(o.child,aa.child),childLeaving:(0,Fr.A)(o.childLeaving,aa.childLeaving),childPulsate:(0,Fr.A)(o.childPulsate,aa.childPulsate)},timeout:550,pulsate:t,rippleX:n,rippleY:r,rippleSize:a},c.current)])),c.current+=1,d.current=i}),[o]),g=t.useCallback(((e={},t={},n=()=>{})=>{const{pulsate:r=!1,center:o=a||t.pulsate,fakeElement:i=!1}=t;if("mousedown"===(null==e?void 0:e.type)&&p.current)return void(p.current=!1);"touchstart"===(null==e?void 0:e.type)&&(p.current=!0);const l=i?null:h.current,s=l?l.getBoundingClientRect():{width:0,height:0,left:0,top:0};let u,c,d;if(o||void 0===e||0===e.clientX&&0===e.clientY||!e.clientX&&!e.touches)u=Math.round(s.width/2),c=Math.round(s.height/2);else{const{clientX:t,clientY:n}=e.touches&&e.touches.length>0?e.touches[0]:e;u=Math.round(t-s.left),c=Math.round(n-s.top)}if(o)d=Math.sqrt((2*s.width**2+s.height**2)/3),d%2==0&&(d+=1);else{const e=2*Math.max(Math.abs((l?l.clientWidth:0)-u),u)+2,t=2*Math.max(Math.abs((l?l.clientHeight:0)-c),c)+2;d=Math.sqrt(e**2+t**2)}null!=e&&e.touches?null===m.current&&(m.current=()=>{A({pulsate:r,rippleX:u,rippleY:c,rippleSize:d,cb:n})},f.start(80,(()=>{m.current&&(m.current(),m.current=null)}))):A({pulsate:r,rippleX:u,rippleY:c,rippleSize:d,cb:n})}),[a,A,f]),y=t.useCallback((()=>{g({},{pulsate:!0})}),[g]),v=t.useCallback(((e,t)=>{if(f.clear(),"touchend"===(null==e?void 0:e.type)&&m.current)return m.current(),m.current=null,void f.start(0,(()=>{v(e,t)}));m.current=null,u((e=>e.length>0?e.slice(1):e)),d.current=t}),[f]);return t.useImperativeHandle(n,(()=>({pulsate:y,start:g,stop:v})),[y,g,v]),(0,vr.jsx)(ma,(0,Lr.A)({className:(0,Fr.A)(aa.root,o.root,i),ref:h},l,{children:(0,vr.jsx)(ea,{component:null,exit:!0,children:s})}))})),ga=Aa;var ya=a(6733);function va(e){return(0,ya.Ay)("MuiButtonBase",e)}const ba=(0,ra.A)("MuiButtonBase",["root","disabled","focusVisible"]),xa=["action","centerRipple","children","className","component","disabled","disableRipple","disableTouchRipple","focusRipple","focusVisibleClassName","LinkComponent","onBlur","onClick","onContextMenu","onDragLeave","onFocus","onFocusVisible","onKeyDown","onKeyUp","onMouseDown","onMouseLeave","onMouseUp","onTouchEnd","onTouchMove","onTouchStart","tabIndex","TouchRippleProps","touchRippleRef","type"],Ea=(0,Dr.Ay)("button",{name:"MuiButtonBase",slot:"Root",overridesResolver:(e,t)=>t.root})({display:"inline-flex",alignItems:"center",justifyContent:"center",position:"relative",boxSizing:"border-box",WebkitTapHighlightColor:"transparent",backgroundColor:"transparent",outline:0,border:0,margin:0,borderRadius:0,padding:0,cursor:"pointer",userSelect:"none",verticalAlign:"middle",MozAppearance:"none",WebkitAppearance:"none",textDecoration:"none",color:"inherit","&::-moz-focus-inner":{borderStyle:"none"},[`&.${ba.disabled}`]:{pointerEvents:"none",cursor:"default"},"@media print":{colorAdjust:"exact"}}),Ca=t.forwardRef((function(e,n){const r=(0,Wr.b)({props:e,name:"MuiButtonBase"}),{action:a,centerRipple:o=!1,children:i,className:l,component:s="button",disabled:u=!1,disableRipple:c=!1,disableTouchRipple:d=!1,focusRipple:p=!1,LinkComponent:f="a",onBlur:m,onClick:h,onContextMenu:A,onDragLeave:g,onFocus:y,onFocusVisible:v,onKeyDown:b,onKeyUp:x,onMouseDown:E,onMouseLeave:C,onMouseUp:w,onTouchEnd:k,onTouchMove:S,onTouchStart:_,tabIndex:B=0,TouchRippleProps:T,touchRippleRef:j,type:N}=r,R=(0,Ir.A)(r,xa),P=t.useRef(null),O=t.useRef(null),z=(0,Ur.A)(O,j),{isFocusVisibleRef:M,onFocus:I,onBlur:L,ref:F}=(0,Hr.A)(),[$,D]=t.useState(!1);u&&$&&D(!1),t.useImperativeHandle(a,(()=>({focusVisible:()=>{D(!0),P.current.focus()}})),[]);const[W,U]=t.useState(!1);t.useEffect((()=>{U(!0)}),[]);const V=W&&!c&&!u;function H(e,t,n=d){return(0,Vr.A)((r=>(t&&t(r),!n&&O.current&&O.current[e](r),!0)))}t.useEffect((()=>{$&&p&&!c&&W&&O.current.pulsate()}),[c,p,$,W]);const Y=H("start",E),G=H("stop",A),q=H("stop",g),K=H("stop",w),X=H("stop",(e=>{$&&e.preventDefault(),C&&C(e)})),Q=H("start",_),J=H("stop",k),Z=H("stop",S),ee=H("stop",(e=>{L(e),!1===M.current&&D(!1),m&&m(e)}),!1),te=(0,Vr.A)((e=>{P.current||(P.current=e.currentTarget),I(e),!0===M.current&&(D(!0),v&&v(e)),y&&y(e)})),ne=()=>{const e=P.current;return s&&"button"!==s&&!("A"===e.tagName&&e.href)},re=t.useRef(!1),ae=(0,Vr.A)((e=>{p&&!re.current&&$&&O.current&&" "===e.key&&(re.current=!0,O.current.stop(e,(()=>{O.current.start(e)}))),e.target===e.currentTarget&&ne()&&" "===e.key&&e.preventDefault(),b&&b(e),e.target===e.currentTarget&&ne()&&"Enter"===e.key&&!u&&(e.preventDefault(),h&&h(e))})),oe=(0,Vr.A)((e=>{p&&" "===e.key&&O.current&&$&&!e.defaultPrevented&&(re.current=!1,O.current.stop(e,(()=>{O.current.pulsate(e)}))),x&&x(e),h&&e.target===e.currentTarget&&ne()&&" "===e.key&&!e.defaultPrevented&&h(e)}));let ie=s;"button"===ie&&(R.href||R.to)&&(ie=f);const le={};"button"===ie?(le.type=void 0===N?"button":N,le.disabled=u):(R.href||R.to||(le.role="button"),u&&(le["aria-disabled"]=u));const se=(0,Ur.A)(n,F,P),ue=(0,Lr.A)({},r,{centerRipple:o,component:s,disabled:u,disableRipple:c,disableTouchRipple:d,focusRipple:p,tabIndex:B,focusVisible:$}),ce=(e=>{const{disabled:t,focusVisible:n,focusVisibleClassName:r,classes:a}=e,o={root:["root",t&&"disabled",n&&"focusVisible"]},i=(0,$r.A)(o,va,a);return n&&r&&(i.root+=` ${r}`),i})(ue);return(0,vr.jsxs)(Ea,(0,Lr.A)({as:ie,className:(0,Fr.A)(ce.root,l),ownerState:ue,onBlur:ee,onClick:h,onContextMenu:G,onFocus:te,onKeyDown:ae,onKeyUp:oe,onMouseDown:Y,onMouseLeave:X,onMouseUp:K,onDragLeave:q,onTouchEnd:J,onTouchMove:Z,onTouchStart:Q,ref:se,tabIndex:u?-1:B,type:N},le,R,{children:[i,V?(0,vr.jsx)(ga,(0,Lr.A)({ref:z,center:o},T)):null]}))}));var wa=a(4726);function ka(e){return(0,ya.Ay)("MuiFab",e)}const Sa=(0,ra.A)("MuiFab",["root","primary","secondary","extended","circular","focusVisible","disabled","colorInherit","sizeSmall","sizeMedium","sizeLarge","info","error","warning","success"]);var _a=a(3926);const Ba=["children","className","color","component","disabled","disableFocusRipple","focusVisibleClassName","size","variant"],Ta=(0,Dr.Ay)(Ca,{name:"MuiFab",slot:"Root",shouldForwardProp:e=>(0,_a.A)(e)||"classes"===e,overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[n.variant],t[`size${(0,wa.A)(n.size)}`],"inherit"===n.color&&t.colorInherit,t[(0,wa.A)(n.size)],t[n.color]]}})((({theme:e,ownerState:t})=>{var n,r;return(0,Lr.A)({},e.typography.button,{minHeight:36,transition:e.transitions.create(["background-color","box-shadow","border-color"],{duration:e.transitions.duration.short}),borderRadius:"50%",padding:0,minWidth:0,width:56,height:56,zIndex:(e.vars||e).zIndex.fab,boxShadow:(e.vars||e).shadows[6],"&:active":{boxShadow:(e.vars||e).shadows[12]},color:e.vars?e.vars.palette.text.primary:null==(n=(r=e.palette).getContrastText)?void 0:n.call(r,e.palette.grey[300]),backgroundColor:(e.vars||e).palette.grey[300],"&:hover":{backgroundColor:(e.vars||e).palette.grey.A100,"@media (hover: none)":{backgroundColor:(e.vars||e).palette.grey[300]},textDecoration:"none"},[`&.${Sa.focusVisible}`]:{boxShadow:(e.vars||e).shadows[6]}},"small"===t.size&&{width:40,height:40},"medium"===t.size&&{width:48,height:48},"extended"===t.variant&&{borderRadius:24,padding:"0 16px",width:"auto",minHeight:"auto",minWidth:48,height:48},"extended"===t.variant&&"small"===t.size&&{width:"auto",padding:"0 8px",borderRadius:17,minWidth:34,height:34},"extended"===t.variant&&"medium"===t.size&&{width:"auto",padding:"0 16px",borderRadius:20,minWidth:40,height:40},"inherit"===t.color&&{color:"inherit"})}),(({theme:e,ownerState:t})=>(0,Lr.A)({},"inherit"!==t.color&&"default"!==t.color&&null!=(e.vars||e).palette[t.color]&&{color:(e.vars||e).palette[t.color].contrastText,backgroundColor:(e.vars||e).palette[t.color].main,"&:hover":{backgroundColor:(e.vars||e).palette[t.color].dark,"@media (hover: none)":{backgroundColor:(e.vars||e).palette[t.color].main}}})),(({theme:e})=>({[`&.${Sa.disabled}`]:{color:(e.vars||e).palette.action.disabled,boxShadow:(e.vars||e).shadows[0],backgroundColor:(e.vars||e).palette.action.disabledBackground}}))),ja=t.forwardRef((function(e,t){const n=(0,Wr.b)({props:e,name:"MuiFab"}),{children:r,className:a,color:o="default",component:i="button",disabled:l=!1,disableFocusRipple:s=!1,focusVisibleClassName:u,size:c="large",variant:d="circular"}=n,p=(0,Ir.A)(n,Ba),f=(0,Lr.A)({},n,{color:o,component:i,disabled:l,disableFocusRipple:s,size:c,variant:d}),m=(e=>{const{color:t,variant:n,classes:r,size:a}=e,o={root:["root",n,`size${(0,wa.A)(a)}`,"inherit"===t?"colorInherit":t]},i=(0,$r.A)(o,ka,r);return(0,Lr.A)({},r,i)})(f);return(0,vr.jsx)(Ta,(0,Lr.A)({className:(0,Fr.A)(m.root,a),component:i,disabled:l,focusRipple:!s,focusVisibleClassName:(0,Fr.A)(m.focusVisible,u),ownerState:f,ref:t},p,{classes:m,children:r}))})),Na=864e5;function Ra(){return(new Date).setHours(0,0,0,0)}function Pa(e){if(!e)return"";let t;return t="string"==typeof e?new Date(Number(e)):new Date(e),`${String(t.getFullYear()).padStart(4,"0")}-${String(t.getMonth()+1).padStart(2,"0")}-${String(t.getDate()).padStart(2,"0")}`}function Oa(e=""){const t=e.split("-"),n=Number(t[0]),r=Number(t[1])-1,a=Number(t[2]);return new Date(n,r,a).setHours(0,0,0,0)}function za(e){return Ra()===(e instanceof Date?e:new Date(e.year,e.month,e.date)).setHours(0,0,0,0)}function Ma(e){return`${Pa(e.getTime())}T${e.getHours().toString().padStart(2,"0")}:${e.getMinutes().toString().padStart(2,"0")}`}var Ia=a(9972),La={};La.styleTagTransform=Ar(),La.setAttributes=pr(),La.insert=cr().bind(null,"head"),La.domAPI=sr(),La.insertStyleElement=mr(),ir()(Ia.A,La);const Fa=Ia.A&&Ia.A.locals?Ia.A.locals:void 0;function $a({task:e,onChange:t}){return(0,vr.jsx)("div",{children:(0,vr.jsxs)("form",{id:"task-edit",onSubmit:e=>{e.preventDefault();const n=e.target.elements,r=new Date(n.startDate.value).getTime(),a=new Date(n.endDate.value).getTime(),o=n.taskTitle.value,i=n.description.value,l=n.tags.value;t({taskTitle:o,description:i,startDate:r,endDate:a,tags:l})},children:[(0,vr.jsxs)("div",{className:Fa.editGroup,children:[(0,vr.jsx)("label",{className:Fa.label,htmlFor:"taskTitle",children:"Task title"}),(0,vr.jsx)("input",{className:Fa.input,type:"text",name:"taskTitle",id:"taskTitle",defaultValue:e.taskTitle})]}),(0,vr.jsxs)("div",{className:Fa.editGroup,children:[(0,vr.jsx)("label",{className:Fa.label,htmlFor:"description",children:"Description"}),(0,vr.jsx)("textarea",{rows:3,className:Fa.input,name:"description",id:"description",defaultValue:e.description})]}),(0,vr.jsxs)("div",{className:Fa.editGroup,children:[(0,vr.jsx)("label",{className:Fa.label,htmlFor:"startDate",children:"Start date"}),(0,vr.jsx)("input",{className:Fa.input,type:"datetime-local",name:"startDate",id:"startDate",defaultValue:Ma(new Date(e.startDate))})]}),(0,vr.jsxs)("div",{className:Fa.editGroup,children:[(0,vr.jsx)("label",{className:Fa.label,htmlFor:"endDate",children:"End date"}),(0,vr.jsx)("input",{className:Fa.input,type:"datetime-local",name:"endDate",id:"endDate",defaultValue:Ma(new Date(e.endDate))})]}),(0,vr.jsxs)("div",{className:Fa.editGroup,children:[(0,vr.jsx)("label",{className:Fa.label,htmlFor:"tags",children:"Tags"}),(0,vr.jsx)("input",{className:Fa.input,type:"text",name:"tags",id:"tags",defaultValue:e.tags})]}),(0,vr.jsx)("input",{className:Fa.btn,type:"submit",value:"Save task"})]})})}var Da=a(1067),Wa={};Wa.styleTagTransform=Ar(),Wa.setAttributes=pr(),Wa.insert=cr().bind(null,"head"),Wa.domAPI=sr(),Wa.insertStyleElement=mr(),ir()(Da.A,Wa);const Ua=Da.A&&Da.A.locals?Da.A.locals:void 0;function Va({task:e,onEdit:t,onCheck:n}){const r={onCheck:e=>{const t=e.target.checked;n({status:t})}};return(0,vr.jsxs)(vr.Fragment,{children:[(0,vr.jsxs)("div",{className:Ua.taskGroup,children:[(0,vr.jsx)("input",{className:Ua.checkbox,type:"checkbox",name:"status",id:"status",checked:e.status,onChange:r.onCheck}),(0,vr.jsx)("h1",{className:Ua.taskTitle,children:e.taskTitle})]}),(0,vr.jsxs)("p",{className:Ua.taskField,children:[(0,vr.jsx)("span",{className:Ua.fieldName,children:"description:"})," ",e?.description]}),(0,vr.jsxs)("p",{className:Ua.taskField,children:[(0,vr.jsx)("span",{className:Ua.fieldName,children:"Start:"})," ",new Date(e.startDate).toLocaleString()]}),(0,vr.jsxs)("p",{className:Ua.taskField,children:[(0,vr.jsx)("span",{className:Ua.fieldName,children:"End:"})," ",new Date(e.endDate??e.startDate).toLocaleString()]}),(0,vr.jsxs)("div",{className:Ua.taskField,children:[(0,vr.jsx)("span",{className:Ua.fieldName,children:"Tags:"}),e.tags?.length?(0,vr.jsx)("ul",{className:Ua.tagsList,children:e.tags?.split(",").map((e=>(0,vr.jsx)("li",{className:Ua.tag,children:(0,vr.jsx)("a",{href:`filter=%7B"tagText"%3A"${e}"%7D`,children:e})},e)))}):(0,vr.jsx)("p",{className:Ua.taskNoTags,children:"no tags"}),(0,vr.jsx)("button",{type:"button",onClick:t,children:"Edit"})]})]})}var Ha=a(2304),Ya={};Ya.styleTagTransform=Ar(),Ya.setAttributes=pr(),Ya.insert=cr().bind(null,"head"),Ya.domAPI=sr(),Ya.insertStyleElement=mr(),ir()(Ha.A,Ya);const Ga=Ha.A&&Ha.A.locals?Ha.A.locals:void 0,qa=()=>{const e=ye(),{action:n}=ve(),[r]=Ke(),a=Object.fromEntries(new URLSearchParams(r)),{id:o}=a,i=k();(0,t.useEffect)((()=>{i(Xn({}))}),[]);const l=h((e=>e.calendar.items)).filter((e=>e.id===o))[0],s={onChange:(0,t.useCallback)((t=>{i(Jn({id:o,...t})),"edit"===n&&e(`/task/view?id=${o}`,{replace:!0})}),[o]),onEdit:(0,t.useCallback)((()=>{e(`/task/edit?id=${o}`,{replace:!0})}),[o])};return l?(0,vr.jsxs)("div",{className:Ga.task,children:["view"===n&&(0,vr.jsx)(Va,{task:l,onCheck:s.onChange,onEdit:s.onEdit}),"edit"===n&&(0,vr.jsx)($a,{task:l,onChange:s.onChange})]}):null};function Ka(e){const[t,n]=e.split("-W").map(Number),r=new Date(t,0,1);let a=0;return a=(r.getDay()||7)<=4?1-r.getDay():8-(r.getDay()||7),r.setDate(1+a+7*(n-1)),r.getTime()}function Xa(e){const t=new Date(e);t.setHours(0,0,0,0),t.setDate(t.getDate()+4-(t.getDay()||7));const n=new Date(t.getFullYear(),0,1),r=Math.ceil(((t.getTime()-n.getTime())/Na+1)/7);return[t.getFullYear(),r]}function Qa(){return Xa((new Date).getTime())}function Ja({name:e,year:t=(new Date).getFullYear(),month:n=0,date:r=1,week:a=Qa()[1]}){let o={};switch(e){case"year":o={year:"numeric"};break;case"month":o={month:"long",year:"numeric"};break;case"date":o={month:"long",year:"numeric",day:"numeric"};break;case"week":return`Week ${a} of ${t}`;default:return""}return Intl.DateTimeFormat("en",o).format(new Date(t,n,r))}var Za=a(5994),eo={};eo.styleTagTransform=Ar(),eo.setAttributes=pr(),eo.insert=cr().bind(null,"head"),eo.domAPI=sr(),eo.insertStyleElement=mr(),ir()(Za.A,eo);const to=Za.A&&Za.A.locals?Za.A.locals:void 0;function no({tasks:e,renderItem:t,isToday:n}){const r=function(e){return e.reduce(((e,t)=>{const n=new Date(t.startDate).getHours();return void 0===e[n]&&(e[n]=[]),e[n].push(t),e}),Array(24))}(e);return(0,vr.jsx)("ul",{className:to.hours,children:Array.from({length:24},((e,a)=>{const o=n&&(new Date).getHours()===a?"currentHour":"";return(0,vr.jsxs)("li",{id:o,className:[to.hour,to[o]].join(" "),children:[(0,vr.jsx)("div",{className:to.hourTitle,children:`${String(a).padStart(2,"0")}:00`}),(0,vr.jsx)("ul",{className:to.tasks,children:r[a]&&r[a].map((e=>t(e)))})]},a)}))})}var ro=a(3665),ao={};ao.styleTagTransform=Ar(),ao.setAttributes=pr(),ao.insert=cr().bind(null,"head"),ao.domAPI=sr(),ao.insertStyleElement=mr(),ir()(ro.A,ao);const oo=ro.A&&ro.A.locals?ro.A.locals:void 0;function io(e){let t;return t=0===e.length?[]:e.split(",").map((e=>(0,vr.jsx)("li",{className:oo.tagItem,children:(0,vr.jsx)(He,{to:`/calendar/list?filter=${JSON.stringify({tagText:e.trim()})}`,className:oo.tag,children:e.trim()})},e))),t}function lo(e){const{itemData:t,onDelete:n,onEdit:r,onCheck:a}=e;if(void 0===t.id)return null;const o={deleteHandler:()=>{n(t.id)},editHandler:()=>{r(t.id)},checkHandler:e=>{const n=e.target.checked;a(t.id,n)}};return(0,vr.jsxs)("li",{className:oo.item,"data-id":t.id,children:[(0,vr.jsx)("div",{className:oo.checkboxBlock,children:(0,vr.jsx)("input",{className:oo.checkbox,type:"checkbox",checked:t.status,onChange:o.checkHandler})}),(0,vr.jsxs)("div",{className:oo.titleGroup,children:[(0,vr.jsx)(He,{to:`../task/view?id=${t.id}`,className:oo.title,children:t.taskTitle}),(0,vr.jsx)("p",{className:oo.description,children:t.description})]}),(0,vr.jsxs)("div",{className:oo.datesGroup,children:[(0,vr.jsxs)("span",{children:["Created: ",new Date(t.creationDate).toLocaleDateString()]}),(0,vr.jsxs)("span",{children:["Start time: ",new Date(t.startDate).toLocaleDateString()]})]}),(0,vr.jsxs)("div",{className:oo.btnGroup,children:[(0,vr.jsx)("button",{className:[oo.btn,oo.btnEdit].join(" "),"data-id":t.id,onClick:o.editHandler,children:"✏️"}),(0,vr.jsx)("button",{className:[oo.btn,oo.btnDelete].join(" "),"data-id":t.id,onClick:o.deleteHandler,children:"🗑️"})]}),t.tags&&(0,vr.jsx)("ul",{className:oo.tagsGroup,children:io(t.tags)})]})}var so=a(8752),uo={};uo.styleTagTransform=Ar(),uo.setAttributes=pr(),uo.insert=cr().bind(null,"head"),uo.domAPI=sr(),uo.insertStyleElement=mr(),ir()(so.A,uo);const co=so.A&&so.A.locals?so.A.locals:void 0;function po({tasks:e,onEdit:n,onCheck:r,year:a,month:o,date:i}){const l=k(),s=document.querySelector("#currentHour");s&&setTimeout((()=>s.scrollIntoView({behavior:"smooth",block:"start"})),100);const u={onDelete:(0,t.useCallback)((e=>{l(Zn(e))}),[])},c=(0,t.useCallback)((e=>(0,vr.jsx)(lo,{itemData:e,onEdit:n,onDelete:u.onDelete,onCheck:r},e.id)),[n]);return(0,vr.jsx)("div",{className:co.day,children:(0,vr.jsx)(no,{tasks:e,renderItem:c,isToday:za({year:a,month:o,date:i})})})}function fo(e,t){return new Date(t,e+1,0).getDate()}const mo=({options:e})=>{const{year:t,month:n,dayFrom:r,dayTo:a,additionalClass:o,tasks:i=[]}=e,l=Ra();return Array.from({length:a-r+1},((e,a)=>{const s=r+a,u=new Date(t,n,s),c=l===new Date(t,n,s).setHours(0,0,0,0),d=i.filter((e=>new Date(e.startDate).setHours(0,0,0,0)===u.valueOf())),p=d.length>0?" date_has-tasks":"",f=`date${o?` ${o}`:""}${p}${c?" date_current":""}`;return(0,vr.jsxs)("div",{className:f,"data-date":u.valueOf(),"data-tasks":d.length,children:[(0,vr.jsx)(He,{to:`/calendar/date/?year=${t}&month=${n}&date=${s}`,className:"date__link",children:Intl.DateTimeFormat("en",{day:"numeric",month:"long"}).format(u)}),d&&(0,vr.jsx)("ul",{children:d.map((e=>(0,vr.jsx)("li",{className:"date__task",children:(0,vr.jsx)(He,{to:`../task/view?id=${e.id}`,className:"task__link",children:e.taskTitle})},e.id)))})]},u.valueOf())}))};var ho=a(9055),Ao={};Ao.styleTagTransform=Ar(),Ao.setAttributes=pr(),Ao.insert=cr().bind(null,"head"),Ao.domAPI=sr(),Ao.insertStyleElement=mr(),ir()(ho.A,Ao),ho.A&&ho.A.locals&&ho.A.locals;const go=function({year:e,month:t,tasks:n}){const r=(new Date(e,t,1).getDay()+6)%7;let a=e,o=t-1;o<0&&(a=e-1,o=11);const i=fo(o,a),l={year:a,month:o,dayFrom:i-(r-1),dayTo:i,additionalClass:"year__month-day_prev-month"},s={year:e,month:t,dayFrom:1,dayTo:fo(t,e),additionalClass:"",tasks:n};let u=e,c=t+1;c>11&&(u=e+1,c=0);const d=(l.dayTo-l.dayFrom+fo(t,e)+1)%7,p={year:u,month:c,dayFrom:1,dayTo:7-d,additionalClass:"year__month-day_next-month"};return(0,vr.jsxs)("div",{className:"month",children:[(0,vr.jsx)(mo,{options:l}),(0,vr.jsx)(mo,{options:s}),d&&(0,vr.jsx)(mo,{options:p})]})};var yo=a(7581),vo={};vo.styleTagTransform=Ar(),vo.setAttributes=pr(),vo.insert=cr().bind(null,"head"),vo.domAPI=sr(),vo.insertStyleElement=mr(),ir()(yo.A,vo),yo.A&&yo.A.locals&&yo.A.locals;function bo({onEdit:e,tasks:n}){const r=function({onEdit:e}){const n=k();return{onDelete:(0,t.useCallback)((e=>{n(Zn(e))}),[]),onEdit:t=>{e(t)},onCheck:(0,t.useCallback)(((e,t)=>{n(Jn({id:e,status:t}))}),[])}}({onEdit:e}),a=n;return(0,vr.jsx)("div",{className:"task-list",children:a.map((e=>(0,vr.jsx)(lo,{itemData:e,onDelete:r.onDelete,onEdit:r.onEdit,onCheck:r.onCheck},e.id)))})}var xo=a(2107),Eo={};Eo.styleTagTransform=Ar(),Eo.setAttributes=pr(),Eo.insert=cr().bind(null,"head"),Eo.domAPI=sr(),Eo.insertStyleElement=mr(),ir()(xo.A,Eo);const Co=xo.A&&xo.A.locals?xo.A.locals:void 0;function wo({year:e,week:t,tasks:n}){const r=Ka(`${e}-W${t}`),a=Array.from({length:7},((e,t)=>{const a=r+Na*t;return{date:a,tasks:n.filter((e=>e.startDate>=a&&e.startDate<a+Na-1))}}));return(0,vr.jsx)("div",{className:Co.week,children:a.map((t=>{const n=new Date(t.date),r=`${["Sun","Mon","Tue","Wen","Thu","Fri","Sat"][n.getDay()]}, ${Ja({name:"date",date:n.getDate(),month:n.getMonth(),year:n.getFullYear()})}`;return(0,vr.jsxs)("div",{className:Co.weekDay,children:[(0,vr.jsx)(He,{className:Co.link,to:`/calendar/date?year=${e}&month=${n.getMonth()}&date=${n.getDate()}`,children:(0,vr.jsx)("div",{className:Co.title,children:r})}),(0,vr.jsx)("ul",{className:Co.taskList,children:t.tasks.map((e=>(0,vr.jsx)("li",{className:Co.task,children:(0,vr.jsx)(He,{className:Co.link,to:`/task/view?id=${e.id}`,children:(0,vr.jsxs)("div",{className:Co.taskContent,children:[(0,vr.jsx)("p",{className:Co.taskTitle,children:e.taskTitle}),e.description&&(0,vr.jsx)("div",{className:Co.divider}),(0,vr.jsx)("p",{className:Co.description,children:e.description.substring(0,30)})]})})},e.id)))})]},t.date)}))})}var ko=a(1850),So={};So.styleTagTransform=Ar(),So.setAttributes=pr(),So.insert=cr().bind(null,"head"),So.domAPI=sr(),So.insertStyleElement=mr(),ir()(ko.A,So),ko.A&&ko.A.locals&&ko.A.locals;const _o=function({year:e,month:t,day:n,addtitionalClass:r,tasks:a=[]}){const o=Ra(),i=new Date(e,t,n).setHours(0,0,0,0);let l="";a?.find((e=>new Date(e.startDate).setHours(0,0,0,0)===i))&&(l+=" year__month-day_has-tasks");const s=o===new Date(e,t,n).setHours(0,0,0,0);return(0,vr.jsx)(He,{to:`/calendar/date?year=${e}&month=${t}&date=${n}`,className:`year__month-day${l} ${r} ${s?"year__month-day_current":""}`.trim(),"data-date":i,children:n},`${e}- ${t} -${n} `)};function Bo(e){const{year:t,month:n,dayFrom:r,dayTo:a,addtitionalClass:o,tasks:i}=e;return Array.from({length:a-r+1},((e,a)=>{const l=r+a;return(0,vr.jsx)(_o,{year:t,month:n,day:l,addtitionalClass:o,tasks:i},`${t}-${n}-${l}`)}))}const To=({elementDate:e,year:t,month:n,tasks:r=[]})=>{const a=(new Date).getFullYear(),o=(new Date).getMonth(),i=["Mn","Tu","We","Th","Fr","Sa","Su"].map((e=>(0,vr.jsx)("div",{className:"year__month-weekday",children:e},e))),l=Intl.DateTimeFormat("en",{month:"long"}),s=(e.getDay()+6)%7;let u=t,c=n-1;c<0&&(u=t-1,c=11);const d=fo(c,u),p=Bo({year:u,month:c,dayFrom:d-(s-1),dayTo:d,addtitionalClass:"year__month-day_prev-month"}),f=Bo({year:t,month:n,dayFrom:1,dayTo:fo(n,t),addtitionalClass:"year__month-day_curr-month",tasks:r});let m=t,h=n+1;h>11&&(m=t+1,h=0);let A=(p.length+f.length)%7;0===A&&(A=7);const g=Bo({year:m,month:h,dayFrom:1,dayTo:7-A,addtitionalClass:"year__month-day_next-month"}),y=a===t&&o===n?"current":"";return(0,vr.jsxs)("div",{className:"year__month","data-date":e.valueOf(),"data-tasks":r.length,children:[(0,vr.jsx)(He,{to:`/calendar/month?year=${t}&month=${n}`,className:`year__month-title ${y}`,children:l.format(e)}),(0,vr.jsx)("div",{className:"year__month-weekdays",children:i}),(0,vr.jsxs)("div",{className:"year__month-days",children:[p,f,g]})]},`${t}-${n}`)};function jo({year:e,tasks:t}){const n=Array.from({length:12},((n,r)=>{const a=new Date(e,r,1);return(0,vr.jsx)(To,{elementDate:a,year:e,month:r,tasks:t},a.valueOf())}));return(0,vr.jsx)("div",{className:"year",children:n})}const No=({items:e,view:n,setViewTitle:r,onEdit:a,onCheck:o,year:i,month:l,date:s,week:u})=>{(0,t.useEffect)((()=>{const e=Ja({name:n,year:i,month:l,date:s,week:u});r(e),document.title=e?`Calendar - ${e}`:"Calendar"}),[n,i,l,s]);const c={year:(0,vr.jsx)(jo,{year:i,tasks:e}),month:(0,vr.jsx)(go,{year:i,month:l,tasks:e}),date:(0,vr.jsx)(po,{year:i,month:l,date:s,tasks:e,onEdit:a,onCheck:o}),list:(0,vr.jsx)(bo,{onEdit:a,tasks:e}),task:(0,vr.jsx)(qa,{}),week:(0,vr.jsx)(wo,{year:i,week:u,tasks:e})}[n];return(0,vr.jsx)("div",{className:"calendar__content",children:c})},Ro=({className:e="",title:t="",imageType:n,type:r="button",onClick:a})=>{let o=t;if(""===o)switch(n){case"search":o=(0,vr.jsxs)("svg",{"data-name":"search",viewBox:"0 0 24 24",fill:"none",xmlns:"http://www.w3.org/2000/svg",children:[(0,vr.jsx)("g",{id:"SVGRepo_bgCarrier",strokeWidth:"0"}),(0,vr.jsx)("g",{id:"SVGRepo_tracerCarrier",strokeLinecap:"round",strokeLinejoin:"round"}),(0,vr.jsxs)("g",{id:"SVGRepo_iconCarrier",children:[" ",(0,vr.jsx)("path",{d:"M15.7955 15.8111L21 21M18 10.5C18 14.6421 14.6421 18 10.5 18C6.35786  18 3 14.6421 3 10.5C3 6.35786 6.35786 3 10.5 3C14.6421 3 18 6.35786 18 10.5Z",stroke:"#000000",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round"})," "]})]});break;case"prevArrow":o=(0,vr.jsx)("svg",{"data-name":"prevArrow",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 16 16",children:(0,vr.jsx)("path",{d:"M11.62 3.81 7.43 8l4.19 4.19-1.53 1.52L4.38 8l5.71-5.71 1.53 1.52z"})});break;case"nextArrow":o=(0,vr.jsx)("svg",{"data-name":"nextArrow",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 16 16",children:(0,vr.jsx)("path",{d:"M4.38 12.19 8.57 8 4.38 3.81l1.53-1.52L11.62 8l-5.71 5.71-1.53-1.52z"})});break;default:o=""}return(0,vr.jsx)("button",{type:r,name:t||n,onClick:a,className:e,children:o})};var Po=a(4487);const Oo=(0,Po.A)((0,vr.jsx)("path",{d:"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14"}),"Search");var zo=a(4553),Mo=a(6121),Io=a(7425);const Lo=function(e){return"string"==typeof e};var Fo=a(5591),$o=a(2097),Do=a(1789),Wo=a(1493);const Uo=["onChange","maxRows","minRows","style","value"];function Vo(e){return parseInt(e,10)||0}const Ho={visibility:"hidden",position:"absolute",overflow:"hidden",height:0,top:0,left:0,transform:"translateZ(0)"},Yo=t.forwardRef((function(e,n){const{onChange:r,maxRows:a,minRows:o=1,style:i,value:l}=e,s=(0,Ir.A)(e,Uo),{current:u}=t.useRef(null!=l),c=t.useRef(null),d=(0,Fo.A)(n,c),p=t.useRef(null),f=t.useRef(null),m=t.useCallback((()=>{const t=c.current,n=(0,$o.A)(t).getComputedStyle(t);if("0px"===n.width)return{outerHeightStyle:0,overflowing:!1};const r=f.current;r.style.width=n.width,r.value=t.value||e.placeholder||"x","\n"===r.value.slice(-1)&&(r.value+=" ");const i=n.boxSizing,l=Vo(n.paddingBottom)+Vo(n.paddingTop),s=Vo(n.borderBottomWidth)+Vo(n.borderTopWidth),u=r.scrollHeight;r.value="x";const d=r.scrollHeight;let p=u;return o&&(p=Math.max(Number(o)*d,p)),a&&(p=Math.min(Number(a)*d,p)),p=Math.max(p,d),{outerHeightStyle:p+("border-box"===i?l+s:0),overflowing:Math.abs(p-u)<=1}}),[a,o,e.placeholder]),h=t.useCallback((()=>{const e=m();if(null==(t=e)||0===Object.keys(t).length||0===t.outerHeightStyle&&!t.overflowing)return;var t;const n=e.outerHeightStyle,r=c.current;p.current!==n&&(p.current=n,r.style.height=`${n}px`),r.style.overflow=e.overflowing?"hidden":""}),[m]);return(0,Do.A)((()=>{const e=()=>{h()};const t=(0,Wo.A)(e),n=c.current,r=(0,$o.A)(n);let a;return r.addEventListener("resize",t),"undefined"!=typeof ResizeObserver&&(a=new ResizeObserver(e),a.observe(n)),()=>{t.clear(),cancelAnimationFrame(undefined),r.removeEventListener("resize",t),a&&a.disconnect()}}),[m,h]),(0,Do.A)((()=>{h()})),(0,vr.jsxs)(t.Fragment,{children:[(0,vr.jsx)("textarea",(0,Lr.A)({value:l,onChange:e=>{u||h(),r&&r(e)},ref:d,rows:o,style:i},s)),(0,vr.jsx)("textarea",{"aria-hidden":!0,className:e.className,readOnly:!0,ref:f,tabIndex:-1,style:(0,Lr.A)({},Ho,i,{paddingTop:0,paddingBottom:0})})]})})),Go=Yo;function qo({props:e,states:t,muiFormControl:n}){return t.reduce(((t,r)=>(t[r]=e[r],n&&void 0===e[r]&&(t[r]=n[r]),t)),{})}const Ko=t.createContext(void 0);function Xo(){return t.useContext(Ko)}var Qo=a(4382),Jo=a(1928),Zo=a(8953),ei=a(9842);const ti=(0,Zo.A)(),ni=function(e=ti){return function(e=null){const n=t.useContext(ei.T);return n&&(r=n,0!==Object.keys(r).length)?n:e;var r}(e)},ri=function({styles:e,themeId:t,defaultTheme:n={}}){const r=ni(n),a="function"==typeof e?e(t&&r[t]||r):e;return(0,vr.jsx)(Jo.A,{styles:a})};var ai=a(9575),oi=a(3724);const ii=function(e){return(0,vr.jsx)(ri,(0,Lr.A)({},e,{defaultTheme:ai.A,themeId:oi.A}))};function li(e){return null!=e&&!(Array.isArray(e)&&0===e.length)}function si(e,t=!1){return e&&(li(e.value)&&""!==e.value||t&&li(e.defaultValue)&&""!==e.defaultValue)}function ui(e){return(0,ya.Ay)("MuiInputBase",e)}const ci=(0,ra.A)("MuiInputBase",["root","formControl","focused","disabled","adornedStart","adornedEnd","error","sizeSmall","multiline","colorSecondary","fullWidth","hiddenLabel","readOnly","input","inputSizeSmall","inputMultiline","inputTypeSearch","inputAdornedStart","inputAdornedEnd","inputHiddenLabel"]),di=["aria-describedby","autoComplete","autoFocus","className","color","components","componentsProps","defaultValue","disabled","disableInjectingGlobalStyles","endAdornment","error","fullWidth","id","inputComponent","inputProps","inputRef","margin","maxRows","minRows","multiline","name","onBlur","onChange","onClick","onFocus","onKeyDown","onKeyUp","placeholder","readOnly","renderSuffix","rows","size","slotProps","slots","startAdornment","type","value"],pi=(e,t)=>{const{ownerState:n}=e;return[t.root,n.formControl&&t.formControl,n.startAdornment&&t.adornedStart,n.endAdornment&&t.adornedEnd,n.error&&t.error,"small"===n.size&&t.sizeSmall,n.multiline&&t.multiline,n.color&&t[`color${(0,wa.A)(n.color)}`],n.fullWidth&&t.fullWidth,n.hiddenLabel&&t.hiddenLabel]},fi=(e,t)=>{const{ownerState:n}=e;return[t.input,"small"===n.size&&t.inputSizeSmall,n.multiline&&t.inputMultiline,"search"===n.type&&t.inputTypeSearch,n.startAdornment&&t.inputAdornedStart,n.endAdornment&&t.inputAdornedEnd,n.hiddenLabel&&t.inputHiddenLabel]},mi=(0,Dr.Ay)("div",{name:"MuiInputBase",slot:"Root",overridesResolver:pi})((({theme:e,ownerState:t})=>(0,Lr.A)({},e.typography.body1,{color:(e.vars||e).palette.text.primary,lineHeight:"1.4375em",boxSizing:"border-box",position:"relative",cursor:"text",display:"inline-flex",alignItems:"center",[`&.${ci.disabled}`]:{color:(e.vars||e).palette.text.disabled,cursor:"default"}},t.multiline&&(0,Lr.A)({padding:"4px 0 5px"},"small"===t.size&&{paddingTop:1}),t.fullWidth&&{width:"100%"}))),hi=(0,Dr.Ay)("input",{name:"MuiInputBase",slot:"Input",overridesResolver:fi})((({theme:e,ownerState:t})=>{const n="light"===e.palette.mode,r=(0,Lr.A)({color:"currentColor"},e.vars?{opacity:e.vars.opacity.inputPlaceholder}:{opacity:n?.42:.5},{transition:e.transitions.create("opacity",{duration:e.transitions.duration.shorter})}),a={opacity:"0 !important"},o=e.vars?{opacity:e.vars.opacity.inputPlaceholder}:{opacity:n?.42:.5};return(0,Lr.A)({font:"inherit",letterSpacing:"inherit",color:"currentColor",padding:"4px 0 5px",border:0,boxSizing:"content-box",background:"none",height:"1.4375em",margin:0,WebkitTapHighlightColor:"transparent",display:"block",minWidth:0,width:"100%",animationName:"mui-auto-fill-cancel",animationDuration:"10ms","&::-webkit-input-placeholder":r,"&::-moz-placeholder":r,"&:-ms-input-placeholder":r,"&::-ms-input-placeholder":r,"&:focus":{outline:0},"&:invalid":{boxShadow:"none"},"&::-webkit-search-decoration":{WebkitAppearance:"none"},[`label[data-shrink=false] + .${ci.formControl} &`]:{"&::-webkit-input-placeholder":a,"&::-moz-placeholder":a,"&:-ms-input-placeholder":a,"&::-ms-input-placeholder":a,"&:focus::-webkit-input-placeholder":o,"&:focus::-moz-placeholder":o,"&:focus:-ms-input-placeholder":o,"&:focus::-ms-input-placeholder":o},[`&.${ci.disabled}`]:{opacity:1,WebkitTextFillColor:(e.vars||e).palette.text.disabled},"&:-webkit-autofill":{animationDuration:"5000s",animationName:"mui-auto-fill"}},"small"===t.size&&{paddingTop:1},t.multiline&&{height:"auto",resize:"none",padding:0,paddingTop:0},"search"===t.type&&{MozAppearance:"textfield"})})),Ai=(0,vr.jsx)(ii,{styles:{"@keyframes mui-auto-fill":{from:{display:"block"}},"@keyframes mui-auto-fill-cancel":{from:{display:"block"}}}}),gi=t.forwardRef((function(e,n){var r;const a=(0,Wr.b)({props:e,name:"MuiInputBase"}),{"aria-describedby":o,autoComplete:i,autoFocus:l,className:s,components:u={},componentsProps:c={},defaultValue:d,disabled:p,disableInjectingGlobalStyles:f,endAdornment:m,fullWidth:h=!1,id:A,inputComponent:g="input",inputProps:y={},inputRef:v,maxRows:b,minRows:x,multiline:E=!1,name:C,onBlur:w,onChange:k,onClick:S,onFocus:_,onKeyDown:B,onKeyUp:T,placeholder:j,readOnly:N,renderSuffix:R,rows:P,slotProps:O={},slots:z={},startAdornment:M,type:I="text",value:L}=a,F=(0,Ir.A)(a,di),$=null!=y.value?y.value:L,{current:D}=t.useRef(null!=$),W=t.useRef(),U=t.useCallback((e=>{}),[]),V=(0,Ur.A)(W,v,y.ref,U),[H,Y]=t.useState(!1),G=Xo(),q=qo({props:a,muiFormControl:G,states:["color","disabled","error","hiddenLabel","size","required","filled"]});q.focused=G?G.focused:H,t.useEffect((()=>{!G&&p&&H&&(Y(!1),w&&w())}),[G,p,H,w]);const K=G&&G.onFilled,X=G&&G.onEmpty,Q=t.useCallback((e=>{si(e)?K&&K():X&&X()}),[K,X]);(0,Qo.A)((()=>{D&&Q({value:$})}),[$,Q,D]),t.useEffect((()=>{Q(W.current)}),[]);let J=g,Z=y;E&&"input"===J&&(Z=P?(0,Lr.A)({type:void 0,minRows:P,maxRows:P},Z):(0,Lr.A)({type:void 0,maxRows:b,minRows:x},Z),J=Go),t.useEffect((()=>{G&&G.setAdornedStart(Boolean(M))}),[G,M]);const ee=(0,Lr.A)({},a,{color:q.color||"primary",disabled:q.disabled,endAdornment:m,error:q.error,focused:q.focused,formControl:G,fullWidth:h,hiddenLabel:q.hiddenLabel,multiline:E,size:q.size,startAdornment:M,type:I}),te=(e=>{const{classes:t,color:n,disabled:r,error:a,endAdornment:o,focused:i,formControl:l,fullWidth:s,hiddenLabel:u,multiline:c,readOnly:d,size:p,startAdornment:f,type:m}=e,h={root:["root",`color${(0,wa.A)(n)}`,r&&"disabled",a&&"error",s&&"fullWidth",i&&"focused",l&&"formControl",p&&"medium"!==p&&`size${(0,wa.A)(p)}`,c&&"multiline",f&&"adornedStart",o&&"adornedEnd",u&&"hiddenLabel",d&&"readOnly"],input:["input",r&&"disabled","search"===m&&"inputTypeSearch",c&&"inputMultiline","small"===p&&"inputSizeSmall",u&&"inputHiddenLabel",f&&"inputAdornedStart",o&&"inputAdornedEnd",d&&"readOnly"]};return(0,$r.A)(h,ui,t)})(ee),ne=z.root||u.Root||mi,re=O.root||c.root||{},ae=z.input||u.Input||hi;return Z=(0,Lr.A)({},Z,null!=(r=O.input)?r:c.input),(0,vr.jsxs)(t.Fragment,{children:[!f&&Ai,(0,vr.jsxs)(ne,(0,Lr.A)({},re,!Lo(ne)&&{ownerState:(0,Lr.A)({},ee,re.ownerState)},{ref:n,onClick:e=>{W.current&&e.currentTarget===e.target&&W.current.focus(),S&&S(e)}},F,{className:(0,Fr.A)(te.root,re.className,s,N&&"MuiInputBase-readOnly"),children:[M,(0,vr.jsx)(Ko.Provider,{value:null,children:(0,vr.jsx)(ae,(0,Lr.A)({ownerState:ee,"aria-invalid":q.error,"aria-describedby":o,autoComplete:i,autoFocus:l,defaultValue:d,disabled:q.disabled,id:A,onAnimationStart:e=>{Q("mui-auto-fill-cancel"===e.animationName?W.current:{value:"x"})},name:C,placeholder:j,readOnly:N,required:q.required,rows:P,value:$,onKeyDown:B,onKeyUp:T,type:I},Z,!Lo(ae)&&{as:J,ownerState:(0,Lr.A)({},ee,Z.ownerState)},{ref:V,className:(0,Fr.A)(te.input,Z.className,N&&"MuiInputBase-readOnly"),onBlur:e=>{w&&w(e),y.onBlur&&y.onBlur(e),G&&G.onBlur?G.onBlur(e):Y(!1)},onChange:(e,...t)=>{if(!D){const t=e.target||W.current;if(null==t)throw new Error((0,Io.A)(1));Q({value:t.value})}y.onChange&&y.onChange(e,...t),k&&k(e,...t)},onFocus:e=>{q.disabled?e.stopPropagation():(_&&_(e),y.onFocus&&y.onFocus(e),G&&G.onFocus?G.onFocus(e):Y(!0))}}))}),m,R?R((0,Lr.A)({},q,{startAdornment:M})):null]}))]})})),yi=gi;function vi(e){return(0,ya.Ay)("MuiInput",e)}const bi=(0,Lr.A)({},ci,(0,ra.A)("MuiInput",["root","underline","input"])),xi=["disableUnderline","components","componentsProps","fullWidth","inputComponent","multiline","slotProps","slots","type"],Ei=(0,Dr.Ay)(mi,{shouldForwardProp:e=>(0,_a.A)(e)||"classes"===e,name:"MuiInput",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[...pi(e,t),!n.disableUnderline&&t.underline]}})((({theme:e,ownerState:t})=>{let n="light"===e.palette.mode?"rgba(0, 0, 0, 0.42)":"rgba(255, 255, 255, 0.7)";return e.vars&&(n=`rgba(${e.vars.palette.common.onBackgroundChannel} / ${e.vars.opacity.inputUnderline})`),(0,Lr.A)({position:"relative"},t.formControl&&{"label + &":{marginTop:16}},!t.disableUnderline&&{"&::after":{borderBottom:`2px solid ${(e.vars||e).palette[t.color].main}`,left:0,bottom:0,content:'""',position:"absolute",right:0,transform:"scaleX(0)",transition:e.transitions.create("transform",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),pointerEvents:"none"},[`&.${bi.focused}:after`]:{transform:"scaleX(1) translateX(0)"},[`&.${bi.error}`]:{"&::before, &::after":{borderBottomColor:(e.vars||e).palette.error.main}},"&::before":{borderBottom:`1px solid ${n}`,left:0,bottom:0,content:'"\\00a0"',position:"absolute",right:0,transition:e.transitions.create("border-bottom-color",{duration:e.transitions.duration.shorter}),pointerEvents:"none"},[`&:hover:not(.${bi.disabled}, .${bi.error}):before`]:{borderBottom:`2px solid ${(e.vars||e).palette.text.primary}`,"@media (hover: none)":{borderBottom:`1px solid ${n}`}},[`&.${bi.disabled}:before`]:{borderBottomStyle:"dotted"}})})),Ci=(0,Dr.Ay)(hi,{name:"MuiInput",slot:"Input",overridesResolver:fi})({}),wi=t.forwardRef((function(e,t){var n,r,a,o;const i=(0,Wr.b)({props:e,name:"MuiInput"}),{disableUnderline:l,components:s={},componentsProps:u,fullWidth:c=!1,inputComponent:d="input",multiline:p=!1,slotProps:f,slots:m={},type:h="text"}=i,A=(0,Ir.A)(i,xi),g=(e=>{const{classes:t,disableUnderline:n}=e,r={root:["root",!n&&"underline"],input:["input"]},a=(0,$r.A)(r,vi,t);return(0,Lr.A)({},t,a)})(i),y={root:{ownerState:{disableUnderline:l}}},v=(null!=f?f:u)?(0,Mo.A)(null!=f?f:u,y):y,b=null!=(n=null!=(r=m.root)?r:s.Root)?n:Ei,x=null!=(a=null!=(o=m.input)?o:s.Input)?a:Ci;return(0,vr.jsx)(yi,(0,Lr.A)({slots:{root:b,input:x},slotProps:v,fullWidth:c,inputComponent:d,multiline:p,ref:t,type:h},A,{classes:g}))}));wi.muiName="Input";const ki=wi;function Si(e){return(0,ya.Ay)("MuiFilledInput",e)}const _i=(0,Lr.A)({},ci,(0,ra.A)("MuiFilledInput",["root","underline","input"])),Bi=["disableUnderline","components","componentsProps","fullWidth","hiddenLabel","inputComponent","multiline","slotProps","slots","type"],Ti=(0,Dr.Ay)(mi,{shouldForwardProp:e=>(0,_a.A)(e)||"classes"===e,name:"MuiFilledInput",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[...pi(e,t),!n.disableUnderline&&t.underline]}})((({theme:e,ownerState:t})=>{var n;const r="light"===e.palette.mode,a=r?"rgba(0, 0, 0, 0.42)":"rgba(255, 255, 255, 0.7)",o=r?"rgba(0, 0, 0, 0.06)":"rgba(255, 255, 255, 0.09)",i=r?"rgba(0, 0, 0, 0.09)":"rgba(255, 255, 255, 0.13)",l=r?"rgba(0, 0, 0, 0.12)":"rgba(255, 255, 255, 0.12)";return(0,Lr.A)({position:"relative",backgroundColor:e.vars?e.vars.palette.FilledInput.bg:o,borderTopLeftRadius:(e.vars||e).shape.borderRadius,borderTopRightRadius:(e.vars||e).shape.borderRadius,transition:e.transitions.create("background-color",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),"&:hover":{backgroundColor:e.vars?e.vars.palette.FilledInput.hoverBg:i,"@media (hover: none)":{backgroundColor:e.vars?e.vars.palette.FilledInput.bg:o}},[`&.${_i.focused}`]:{backgroundColor:e.vars?e.vars.palette.FilledInput.bg:o},[`&.${_i.disabled}`]:{backgroundColor:e.vars?e.vars.palette.FilledInput.disabledBg:l}},!t.disableUnderline&&{"&::after":{borderBottom:`2px solid ${null==(n=(e.vars||e).palette[t.color||"primary"])?void 0:n.main}`,left:0,bottom:0,content:'""',position:"absolute",right:0,transform:"scaleX(0)",transition:e.transitions.create("transform",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),pointerEvents:"none"},[`&.${_i.focused}:after`]:{transform:"scaleX(1) translateX(0)"},[`&.${_i.error}`]:{"&::before, &::after":{borderBottomColor:(e.vars||e).palette.error.main}},"&::before":{borderBottom:`1px solid ${e.vars?`rgba(${e.vars.palette.common.onBackgroundChannel} / ${e.vars.opacity.inputUnderline})`:a}`,left:0,bottom:0,content:'"\\00a0"',position:"absolute",right:0,transition:e.transitions.create("border-bottom-color",{duration:e.transitions.duration.shorter}),pointerEvents:"none"},[`&:hover:not(.${_i.disabled}, .${_i.error}):before`]:{borderBottom:`1px solid ${(e.vars||e).palette.text.primary}`},[`&.${_i.disabled}:before`]:{borderBottomStyle:"dotted"}},t.startAdornment&&{paddingLeft:12},t.endAdornment&&{paddingRight:12},t.multiline&&(0,Lr.A)({padding:"25px 12px 8px"},"small"===t.size&&{paddingTop:21,paddingBottom:4},t.hiddenLabel&&{paddingTop:16,paddingBottom:17},t.hiddenLabel&&"small"===t.size&&{paddingTop:8,paddingBottom:9}))})),ji=(0,Dr.Ay)(hi,{name:"MuiFilledInput",slot:"Input",overridesResolver:fi})((({theme:e,ownerState:t})=>(0,Lr.A)({paddingTop:25,paddingRight:12,paddingBottom:8,paddingLeft:12},!e.vars&&{"&:-webkit-autofill":{WebkitBoxShadow:"light"===e.palette.mode?null:"0 0 0 100px #266798 inset",WebkitTextFillColor:"light"===e.palette.mode?null:"#fff",caretColor:"light"===e.palette.mode?null:"#fff",borderTopLeftRadius:"inherit",borderTopRightRadius:"inherit"}},e.vars&&{"&:-webkit-autofill":{borderTopLeftRadius:"inherit",borderTopRightRadius:"inherit"},[e.getColorSchemeSelector("dark")]:{"&:-webkit-autofill":{WebkitBoxShadow:"0 0 0 100px #266798 inset",WebkitTextFillColor:"#fff",caretColor:"#fff"}}},"small"===t.size&&{paddingTop:21,paddingBottom:4},t.hiddenLabel&&{paddingTop:16,paddingBottom:17},t.startAdornment&&{paddingLeft:0},t.endAdornment&&{paddingRight:0},t.hiddenLabel&&"small"===t.size&&{paddingTop:8,paddingBottom:9},t.multiline&&{paddingTop:0,paddingBottom:0,paddingLeft:0,paddingRight:0}))),Ni=t.forwardRef((function(e,t){var n,r,a,o;const i=(0,Wr.b)({props:e,name:"MuiFilledInput"}),{components:l={},componentsProps:s,fullWidth:u=!1,inputComponent:c="input",multiline:d=!1,slotProps:p,slots:f={},type:m="text"}=i,h=(0,Ir.A)(i,Bi),A=(0,Lr.A)({},i,{fullWidth:u,inputComponent:c,multiline:d,type:m}),g=(e=>{const{classes:t,disableUnderline:n}=e,r={root:["root",!n&&"underline"],input:["input"]},a=(0,$r.A)(r,Si,t);return(0,Lr.A)({},t,a)})(i),y={root:{ownerState:A},input:{ownerState:A}},v=(null!=p?p:s)?(0,Mo.A)(y,null!=p?p:s):y,b=null!=(n=null!=(r=f.root)?r:l.Root)?n:Ti,x=null!=(a=null!=(o=f.input)?o:l.Input)?a:ji;return(0,vr.jsx)(yi,(0,Lr.A)({slots:{root:b,input:x},componentsProps:v,fullWidth:u,inputComponent:c,multiline:d,ref:t,type:m},h,{classes:g}))}));Ni.muiName="Input";const Ri=Ni;var Pi;const Oi=["children","classes","className","label","notched"],zi=(0,Dr.Ay)("fieldset",{shouldForwardProp:_a.A})({textAlign:"left",position:"absolute",bottom:0,right:0,top:-5,left:0,margin:0,padding:"0 8px",pointerEvents:"none",borderRadius:"inherit",borderStyle:"solid",borderWidth:1,overflow:"hidden",minWidth:"0%"}),Mi=(0,Dr.Ay)("legend",{shouldForwardProp:_a.A})((({ownerState:e,theme:t})=>(0,Lr.A)({float:"unset",width:"auto",overflow:"hidden"},!e.withLabel&&{padding:0,lineHeight:"11px",transition:t.transitions.create("width",{duration:150,easing:t.transitions.easing.easeOut})},e.withLabel&&(0,Lr.A)({display:"block",padding:0,height:11,fontSize:"0.75em",visibility:"hidden",maxWidth:.01,transition:t.transitions.create("max-width",{duration:50,easing:t.transitions.easing.easeOut}),whiteSpace:"nowrap","& > span":{paddingLeft:5,paddingRight:5,display:"inline-block",opacity:0,visibility:"visible"}},e.notched&&{maxWidth:"100%",transition:t.transitions.create("max-width",{duration:100,easing:t.transitions.easing.easeOut,delay:50})}))));function Ii(e){return(0,ya.Ay)("MuiOutlinedInput",e)}const Li=(0,Lr.A)({},ci,(0,ra.A)("MuiOutlinedInput",["root","notchedOutline","input"])),Fi=["components","fullWidth","inputComponent","label","multiline","notched","slots","type"],$i=(0,Dr.Ay)(mi,{shouldForwardProp:e=>(0,_a.A)(e)||"classes"===e,name:"MuiOutlinedInput",slot:"Root",overridesResolver:pi})((({theme:e,ownerState:t})=>{const n="light"===e.palette.mode?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)";return(0,Lr.A)({position:"relative",borderRadius:(e.vars||e).shape.borderRadius,[`&:hover .${Li.notchedOutline}`]:{borderColor:(e.vars||e).palette.text.primary},"@media (hover: none)":{[`&:hover .${Li.notchedOutline}`]:{borderColor:e.vars?`rgba(${e.vars.palette.common.onBackgroundChannel} / 0.23)`:n}},[`&.${Li.focused} .${Li.notchedOutline}`]:{borderColor:(e.vars||e).palette[t.color].main,borderWidth:2},[`&.${Li.error} .${Li.notchedOutline}`]:{borderColor:(e.vars||e).palette.error.main},[`&.${Li.disabled} .${Li.notchedOutline}`]:{borderColor:(e.vars||e).palette.action.disabled}},t.startAdornment&&{paddingLeft:14},t.endAdornment&&{paddingRight:14},t.multiline&&(0,Lr.A)({padding:"16.5px 14px"},"small"===t.size&&{padding:"8.5px 14px"}))})),Di=(0,Dr.Ay)((function(e){const{className:t,label:n,notched:r}=e,a=(0,Ir.A)(e,Oi),o=null!=n&&""!==n,i=(0,Lr.A)({},e,{notched:r,withLabel:o});return(0,vr.jsx)(zi,(0,Lr.A)({"aria-hidden":!0,className:t,ownerState:i},a,{children:(0,vr.jsx)(Mi,{ownerState:i,children:o?(0,vr.jsx)("span",{children:n}):Pi||(Pi=(0,vr.jsx)("span",{className:"notranslate",children:"​"}))})}))}),{name:"MuiOutlinedInput",slot:"NotchedOutline",overridesResolver:(e,t)=>t.notchedOutline})((({theme:e})=>{const t="light"===e.palette.mode?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)";return{borderColor:e.vars?`rgba(${e.vars.palette.common.onBackgroundChannel} / 0.23)`:t}})),Wi=(0,Dr.Ay)(hi,{name:"MuiOutlinedInput",slot:"Input",overridesResolver:fi})((({theme:e,ownerState:t})=>(0,Lr.A)({padding:"16.5px 14px"},!e.vars&&{"&:-webkit-autofill":{WebkitBoxShadow:"light"===e.palette.mode?null:"0 0 0 100px #266798 inset",WebkitTextFillColor:"light"===e.palette.mode?null:"#fff",caretColor:"light"===e.palette.mode?null:"#fff",borderRadius:"inherit"}},e.vars&&{"&:-webkit-autofill":{borderRadius:"inherit"},[e.getColorSchemeSelector("dark")]:{"&:-webkit-autofill":{WebkitBoxShadow:"0 0 0 100px #266798 inset",WebkitTextFillColor:"#fff",caretColor:"#fff"}}},"small"===t.size&&{padding:"8.5px 14px"},t.multiline&&{padding:0},t.startAdornment&&{paddingLeft:0},t.endAdornment&&{paddingRight:0}))),Ui=t.forwardRef((function(e,n){var r,a,o,i,l;const s=(0,Wr.b)({props:e,name:"MuiOutlinedInput"}),{components:u={},fullWidth:c=!1,inputComponent:d="input",label:p,multiline:f=!1,notched:m,slots:h={},type:A="text"}=s,g=(0,Ir.A)(s,Fi),y=(e=>{const{classes:t}=e,n=(0,$r.A)({root:["root"],notchedOutline:["notchedOutline"],input:["input"]},Ii,t);return(0,Lr.A)({},t,n)})(s),v=Xo(),b=qo({props:s,muiFormControl:v,states:["color","disabled","error","focused","hiddenLabel","size","required"]}),x=(0,Lr.A)({},s,{color:b.color||"primary",disabled:b.disabled,error:b.error,focused:b.focused,formControl:v,fullWidth:c,hiddenLabel:b.hiddenLabel,multiline:f,size:b.size,type:A}),E=null!=(r=null!=(a=h.root)?a:u.Root)?r:$i,C=null!=(o=null!=(i=h.input)?i:u.Input)?o:Wi;return(0,vr.jsx)(yi,(0,Lr.A)({slots:{root:E,input:C},renderSuffix:e=>(0,vr.jsx)(Di,{ownerState:x,className:y.notchedOutline,label:null!=p&&""!==p&&b.required?l||(l=(0,vr.jsxs)(t.Fragment,{children:[p," ","*"]})):p,notched:void 0!==m?m:Boolean(e.startAdornment||e.filled||e.focused)}),fullWidth:c,inputComponent:d,multiline:f,ref:n,type:A},g,{classes:(0,Lr.A)({},y,{notchedOutline:null})}))}));Ui.muiName="Input";const Vi=Ui;function Hi(e){return(0,ya.Ay)("MuiFormLabel",e)}const Yi=(0,ra.A)("MuiFormLabel",["root","colorSecondary","focused","disabled","error","filled","required","asterisk"]),Gi=["children","className","color","component","disabled","error","filled","focused","required"],qi=(0,Dr.Ay)("label",{name:"MuiFormLabel",slot:"Root",overridesResolver:({ownerState:e},t)=>(0,Lr.A)({},t.root,"secondary"===e.color&&t.colorSecondary,e.filled&&t.filled)})((({theme:e,ownerState:t})=>(0,Lr.A)({color:(e.vars||e).palette.text.secondary},e.typography.body1,{lineHeight:"1.4375em",padding:0,position:"relative",[`&.${Yi.focused}`]:{color:(e.vars||e).palette[t.color].main},[`&.${Yi.disabled}`]:{color:(e.vars||e).palette.text.disabled},[`&.${Yi.error}`]:{color:(e.vars||e).palette.error.main}}))),Ki=(0,Dr.Ay)("span",{name:"MuiFormLabel",slot:"Asterisk",overridesResolver:(e,t)=>t.asterisk})((({theme:e})=>({[`&.${Yi.error}`]:{color:(e.vars||e).palette.error.main}}))),Xi=t.forwardRef((function(e,t){const n=(0,Wr.b)({props:e,name:"MuiFormLabel"}),{children:r,className:a,component:o="label"}=n,i=(0,Ir.A)(n,Gi),l=qo({props:n,muiFormControl:Xo(),states:["color","required","focused","disabled","error","filled"]}),s=(0,Lr.A)({},n,{color:l.color||"primary",component:o,disabled:l.disabled,error:l.error,filled:l.filled,focused:l.focused,required:l.required}),u=(e=>{const{classes:t,color:n,focused:r,disabled:a,error:o,filled:i,required:l}=e,s={root:["root",`color${(0,wa.A)(n)}`,a&&"disabled",o&&"error",i&&"filled",r&&"focused",l&&"required"],asterisk:["asterisk",o&&"error"]};return(0,$r.A)(s,Hi,t)})(s);return(0,vr.jsxs)(qi,(0,Lr.A)({as:o,ownerState:s,className:(0,Fr.A)(u.root,a),ref:t},i,{children:[r,l.required&&(0,vr.jsxs)(Ki,{ownerState:s,"aria-hidden":!0,className:u.asterisk,children:[" ","*"]})]}))}));function Qi(e){return(0,ya.Ay)("MuiInputLabel",e)}(0,ra.A)("MuiInputLabel",["root","focused","disabled","error","required","asterisk","formControl","sizeSmall","shrink","animated","standard","filled","outlined"]);const Ji=["disableAnimation","margin","shrink","variant","className"],Zi=(0,Dr.Ay)(Xi,{shouldForwardProp:e=>(0,_a.A)(e)||"classes"===e,name:"MuiInputLabel",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[{[`& .${Yi.asterisk}`]:t.asterisk},t.root,n.formControl&&t.formControl,"small"===n.size&&t.sizeSmall,n.shrink&&t.shrink,!n.disableAnimation&&t.animated,n.focused&&t.focused,t[n.variant]]}})((({theme:e,ownerState:t})=>(0,Lr.A)({display:"block",transformOrigin:"top left",whiteSpace:"nowrap",overflow:"hidden",textOverflow:"ellipsis",maxWidth:"100%"},t.formControl&&{position:"absolute",left:0,top:0,transform:"translate(0, 20px) scale(1)"},"small"===t.size&&{transform:"translate(0, 17px) scale(1)"},t.shrink&&{transform:"translate(0, -1.5px) scale(0.75)",transformOrigin:"top left",maxWidth:"133%"},!t.disableAnimation&&{transition:e.transitions.create(["color","transform","max-width"],{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut})},"filled"===t.variant&&(0,Lr.A)({zIndex:1,pointerEvents:"none",transform:"translate(12px, 16px) scale(1)",maxWidth:"calc(100% - 24px)"},"small"===t.size&&{transform:"translate(12px, 13px) scale(1)"},t.shrink&&(0,Lr.A)({userSelect:"none",pointerEvents:"auto",transform:"translate(12px, 7px) scale(0.75)",maxWidth:"calc(133% - 24px)"},"small"===t.size&&{transform:"translate(12px, 4px) scale(0.75)"})),"outlined"===t.variant&&(0,Lr.A)({zIndex:1,pointerEvents:"none",transform:"translate(14px, 16px) scale(1)",maxWidth:"calc(100% - 24px)"},"small"===t.size&&{transform:"translate(14px, 9px) scale(1)"},t.shrink&&{userSelect:"none",pointerEvents:"auto",maxWidth:"calc(133% - 32px)",transform:"translate(14px, -9px) scale(0.75)"})))),el=t.forwardRef((function(e,t){const n=(0,Wr.b)({name:"MuiInputLabel",props:e}),{disableAnimation:r=!1,shrink:a,className:o}=n,i=(0,Ir.A)(n,Ji),l=Xo();let s=a;void 0===s&&l&&(s=l.filled||l.focused||l.adornedStart);const u=qo({props:n,muiFormControl:l,states:["size","variant","required","focused"]}),c=(0,Lr.A)({},n,{disableAnimation:r,formControl:l,shrink:s,size:u.size,variant:u.variant,required:u.required,focused:u.focused}),d=(e=>{const{classes:t,formControl:n,size:r,shrink:a,disableAnimation:o,variant:i,required:l}=e,s={root:["root",n&&"formControl",!o&&"animated",a&&"shrink",r&&"normal"!==r&&`size${(0,wa.A)(r)}`,i],asterisk:[l&&"asterisk"]},u=(0,$r.A)(s,Qi,t);return(0,Lr.A)({},t,u)})(c);return(0,vr.jsx)(Zi,(0,Lr.A)({"data-shrink":s,ownerState:c,ref:t,className:(0,Fr.A)(d.root,o)},i,{classes:d}))}));var tl=a(6421);function nl(e){return(0,ya.Ay)("MuiFormControl",e)}(0,ra.A)("MuiFormControl",["root","marginNone","marginNormal","marginDense","fullWidth","disabled"]);const rl=["children","className","color","component","disabled","error","focused","fullWidth","hiddenLabel","margin","required","size","variant"],al=(0,Dr.Ay)("div",{name:"MuiFormControl",slot:"Root",overridesResolver:({ownerState:e},t)=>(0,Lr.A)({},t.root,t[`margin${(0,wa.A)(e.margin)}`],e.fullWidth&&t.fullWidth)})((({ownerState:e})=>(0,Lr.A)({display:"inline-flex",flexDirection:"column",position:"relative",minWidth:0,padding:0,margin:0,border:0,verticalAlign:"top"},"normal"===e.margin&&{marginTop:16,marginBottom:8},"dense"===e.margin&&{marginTop:8,marginBottom:4},e.fullWidth&&{width:"100%"}))),ol=t.forwardRef((function(e,n){const r=(0,Wr.b)({props:e,name:"MuiFormControl"}),{children:a,className:o,color:i="primary",component:l="div",disabled:s=!1,error:u=!1,focused:c,fullWidth:d=!1,hiddenLabel:p=!1,margin:f="none",required:m=!1,size:h="medium",variant:A="outlined"}=r,g=(0,Ir.A)(r,rl),y=(0,Lr.A)({},r,{color:i,component:l,disabled:s,error:u,fullWidth:d,hiddenLabel:p,margin:f,required:m,size:h,variant:A}),v=(e=>{const{classes:t,margin:n,fullWidth:r}=e,a={root:["root","none"!==n&&`margin${(0,wa.A)(n)}`,r&&"fullWidth"]};return(0,$r.A)(a,nl,t)})(y),[b,x]=t.useState((()=>{let e=!1;return a&&t.Children.forEach(a,(t=>{if(!(0,tl.A)(t,["Input","Select"]))return;const n=(0,tl.A)(t,["Select"])?t.props.input:t;n&&n.props.startAdornment&&(e=!0)})),e})),[E,C]=t.useState((()=>{let e=!1;return a&&t.Children.forEach(a,(t=>{(0,tl.A)(t,["Input","Select"])&&(si(t.props,!0)||si(t.props.inputProps,!0))&&(e=!0)})),e})),[w,k]=t.useState(!1);s&&w&&k(!1);const S=void 0===c||s?w:c;let _;const B=t.useMemo((()=>({adornedStart:b,setAdornedStart:x,color:i,disabled:s,error:u,filled:E,focused:S,fullWidth:d,hiddenLabel:p,size:h,onBlur:()=>{k(!1)},onEmpty:()=>{C(!1)},onFilled:()=>{C(!0)},onFocus:()=>{k(!0)},registerEffect:_,required:m,variant:A})),[b,i,s,u,E,S,d,p,_,m,h,A]);return(0,vr.jsx)(Ko.Provider,{value:B,children:(0,vr.jsx)(al,(0,Lr.A)({as:l,ownerState:y,className:(0,Fr.A)(v.root,o),ref:n},g,{children:a}))})}));function il(e){return(0,ya.Ay)("MuiFormHelperText",e)}const ll=(0,ra.A)("MuiFormHelperText",["root","error","disabled","sizeSmall","sizeMedium","contained","focused","filled","required"]);var sl;const ul=["children","className","component","disabled","error","filled","focused","margin","required","variant"],cl=(0,Dr.Ay)("p",{name:"MuiFormHelperText",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,n.size&&t[`size${(0,wa.A)(n.size)}`],n.contained&&t.contained,n.filled&&t.filled]}})((({theme:e,ownerState:t})=>(0,Lr.A)({color:(e.vars||e).palette.text.secondary},e.typography.caption,{textAlign:"left",marginTop:3,marginRight:0,marginBottom:0,marginLeft:0,[`&.${ll.disabled}`]:{color:(e.vars||e).palette.text.disabled},[`&.${ll.error}`]:{color:(e.vars||e).palette.error.main}},"small"===t.size&&{marginTop:4},t.contained&&{marginLeft:14,marginRight:14}))),dl=t.forwardRef((function(e,t){const n=(0,Wr.b)({props:e,name:"MuiFormHelperText"}),{children:r,className:a,component:o="p"}=n,i=(0,Ir.A)(n,ul),l=qo({props:n,muiFormControl:Xo(),states:["variant","size","disabled","error","filled","focused","required"]}),s=(0,Lr.A)({},n,{component:o,contained:"filled"===l.variant||"outlined"===l.variant,variant:l.variant,size:l.size,disabled:l.disabled,error:l.error,filled:l.filled,focused:l.focused,required:l.required}),u=(e=>{const{classes:t,contained:n,size:r,disabled:a,error:o,filled:i,focused:l,required:s}=e,u={root:["root",a&&"disabled",o&&"error",r&&`size${(0,wa.A)(r)}`,n&&"contained",l&&"focused",i&&"filled",s&&"required"]};return(0,$r.A)(u,il,t)})(s);return(0,vr.jsx)(cl,(0,Lr.A)({as:o,ownerState:s,className:(0,Fr.A)(u.root,a),ref:t},i,{children:" "===r?sl||(sl=(0,vr.jsx)("span",{className:"notranslate",children:"​"})):r}))}));a(6542);var pl=a(1092);const fl=t.createContext(),ml=function(e,t=[]){if(void 0===e)return{};const n={};return Object.keys(e).filter((n=>n.match(/^on[A-Z]/)&&"function"==typeof e[n]&&!t.includes(n))).forEach((t=>{n[t]=e[t]})),n},hl=function(e){if(void 0===e)return{};const t={};return Object.keys(e).filter((t=>!(t.match(/^on[A-Z]/)&&"function"==typeof e[t]))).forEach((n=>{t[n]=e[n]})),t},Al=["elementType","externalSlotProps","ownerState","skipResolvingSlotProps"],gl=function(e){var t;const{elementType:n,externalSlotProps:r,ownerState:a,skipResolvingSlotProps:o=!1}=e,i=(0,Ir.A)(e,Al),l=o?{}:function(e,t,n){return"function"==typeof e?e(t,n):e}(r,a),{props:s,internalRef:u}=function(e){const{getSlotProps:t,additionalProps:n,externalSlotProps:r,externalForwardedProps:a,className:o}=e;if(!t){const e=(0,Fr.A)(null==n?void 0:n.className,o,null==a?void 0:a.className,null==r?void 0:r.className),t=(0,Lr.A)({},null==n?void 0:n.style,null==a?void 0:a.style,null==r?void 0:r.style),i=(0,Lr.A)({},n,a,r);return e.length>0&&(i.className=e),Object.keys(t).length>0&&(i.style=t),{props:i,internalRef:void 0}}const i=ml((0,Lr.A)({},a,r)),l=hl(r),s=hl(a),u=t(i),c=(0,Fr.A)(null==u?void 0:u.className,null==n?void 0:n.className,o,null==a?void 0:a.className,null==r?void 0:r.className),d=(0,Lr.A)({},null==u?void 0:u.style,null==n?void 0:n.style,null==a?void 0:a.style,null==r?void 0:r.style),p=(0,Lr.A)({},u,n,s,l);return c.length>0&&(p.className=c),Object.keys(d).length>0&&(p.style=d),{props:p,internalRef:u.ref}}((0,Lr.A)({},i,{externalSlotProps:l})),c=(0,Fo.A)(u,null==l?void 0:l.ref,null==(t=e.additionalProps)?void 0:t.ref);return function(e,t,n){return void 0===e||Lo(e)?t:(0,Lr.A)({},t,{ownerState:(0,Lr.A)({},t.ownerState,n)})}(n,(0,Lr.A)({},s,{ref:c}),a)},yl=t.createContext({});function vl(e){return(0,ya.Ay)("MuiList",e)}(0,ra.A)("MuiList",["root","padding","dense","subheader"]);const bl=["children","className","component","dense","disablePadding","subheader"],xl=(0,Dr.Ay)("ul",{name:"MuiList",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,!n.disablePadding&&t.padding,n.dense&&t.dense,n.subheader&&t.subheader]}})((({ownerState:e})=>(0,Lr.A)({listStyle:"none",margin:0,padding:0,position:"relative"},!e.disablePadding&&{paddingTop:8,paddingBottom:8},e.subheader&&{paddingTop:0}))),El=t.forwardRef((function(e,n){const r=(0,Wr.b)({props:e,name:"MuiList"}),{children:a,className:o,component:i="ul",dense:l=!1,disablePadding:s=!1,subheader:u}=r,c=(0,Ir.A)(r,bl),d=t.useMemo((()=>({dense:l})),[l]),p=(0,Lr.A)({},r,{component:i,dense:l,disablePadding:s}),f=(e=>{const{classes:t,disablePadding:n,dense:r,subheader:a}=e,o={root:["root",!n&&"padding",r&&"dense",a&&"subheader"]};return(0,$r.A)(o,vl,t)})(p);return(0,vr.jsx)(yl.Provider,{value:d,children:(0,vr.jsxs)(xl,(0,Lr.A)({as:i,className:(0,Fr.A)(f.root,o),ref:n,ownerState:p},c,{children:[u,a]}))})}));function Cl(e){const t=e.documentElement.clientWidth;return Math.abs(window.innerWidth-t)}const wl=Cl,kl=["actions","autoFocus","autoFocusItem","children","className","disabledItemsFocusable","disableListWrap","onKeyDown","variant"];function Sl(e,t,n){return e===t?e.firstChild:t&&t.nextElementSibling?t.nextElementSibling:n?null:e.firstChild}function _l(e,t,n){return e===t?n?e.firstChild:e.lastChild:t&&t.previousElementSibling?t.previousElementSibling:n?null:e.lastChild}function Bl(e,t){if(void 0===t)return!0;let n=e.innerText;return void 0===n&&(n=e.textContent),n=n.trim().toLowerCase(),0!==n.length&&(t.repeating?n[0]===t.keys[0]:0===n.indexOf(t.keys.join("")))}function Tl(e,t,n,r,a,o){let i=!1,l=a(e,t,!!t&&n);for(;l;){if(l===e.firstChild){if(i)return!1;i=!0}const t=!r&&(l.disabled||"true"===l.getAttribute("aria-disabled"));if(l.hasAttribute("tabindex")&&Bl(l,o)&&!t)return l.focus(),!0;l=a(e,l,n)}return!1}const jl=t.forwardRef((function(e,n){const{actions:r,autoFocus:a=!1,autoFocusItem:o=!1,children:i,className:l,disabledItemsFocusable:s=!1,disableListWrap:u=!1,onKeyDown:c,variant:d="selectedMenu"}=e,p=(0,Ir.A)(e,kl),f=t.useRef(null),m=t.useRef({keys:[],repeating:!0,previousKeyMatched:!0,lastTime:null});(0,Qo.A)((()=>{a&&f.current.focus()}),[a]),t.useImperativeHandle(r,(()=>({adjustStyleForScrollbar:(e,{direction:t})=>{const n=!f.current.style.width;if(e.clientHeight<f.current.clientHeight&&n){const n=`${wl((0,pl.A)(e))}px`;f.current.style["rtl"===t?"paddingLeft":"paddingRight"]=n,f.current.style.width=`calc(100% + ${n})`}return f.current}})),[]);const h=(0,Ur.A)(f,n);let A=-1;t.Children.forEach(i,((e,n)=>{t.isValidElement(e)?(e.props.disabled||("selectedMenu"===d&&e.props.selected||-1===A)&&(A=n),A===n&&(e.props.disabled||e.props.muiSkipListHighlight||e.type.muiSkipListHighlight)&&(A+=1,A>=i.length&&(A=-1))):A===n&&(A+=1,A>=i.length&&(A=-1))}));const g=t.Children.map(i,((e,n)=>{if(n===A){const n={};return o&&(n.autoFocus=!0),void 0===e.props.tabIndex&&"selectedMenu"===d&&(n.tabIndex=0),t.cloneElement(e,n)}return e}));return(0,vr.jsx)(El,(0,Lr.A)({role:"menu",ref:h,className:l,onKeyDown:e=>{const t=f.current,n=e.key,r=(0,pl.A)(t).activeElement;if("ArrowDown"===n)e.preventDefault(),Tl(t,r,u,s,Sl);else if("ArrowUp"===n)e.preventDefault(),Tl(t,r,u,s,_l);else if("Home"===n)e.preventDefault(),Tl(t,null,u,s,Sl);else if("End"===n)e.preventDefault(),Tl(t,null,u,s,_l);else if(1===n.length){const a=m.current,o=n.toLowerCase(),i=performance.now();a.keys.length>0&&(i-a.lastTime>500?(a.keys=[],a.repeating=!0,a.previousKeyMatched=!0):a.repeating&&o!==a.keys[0]&&(a.repeating=!1)),a.lastTime=i,a.keys.push(o);const l=r&&!a.repeating&&Bl(r,a);a.previousKeyMatched&&(l||Tl(t,r,!1,s,Sl,a))?e.preventDefault():a.previousKeyMatched=!1}c&&c(e)},tabIndex:a?0:-1},p,{children:g}))}));var Nl=a(5403),Rl=a(3025);var Pl="unmounted",Ol="exited",zl="entering",Ml="entered",Il="exiting",Ll=function(e){function n(t,n){var r;r=e.call(this,t,n)||this;var a,o=n&&!n.isMounting?t.enter:t.appear;return r.appearStatus=null,t.in?o?(a=Ol,r.appearStatus=zl):a=Ml:a=t.unmountOnExit||t.mountOnEnter?Pl:Ol,r.state={status:a},r.nextCallback=null,r}Gr(n,e),n.getDerivedStateFromProps=function(e,t){return e.in&&t.status===Pl?{status:Ol}:null};var r=n.prototype;return r.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},r.componentDidUpdate=function(e){var t=null;if(e!==this.props){var n=this.state.status;this.props.in?n!==zl&&n!==Ml&&(t=zl):n!==zl&&n!==Ml||(t=Il)}this.updateStatus(!1,t)},r.componentWillUnmount=function(){this.cancelNextCallback()},r.getTimeouts=function(){var e,t,n,r=this.props.timeout;return e=t=n=r,null!=r&&"number"!=typeof r&&(e=r.exit,t=r.enter,n=void 0!==r.appear?r.appear:t),{exit:e,enter:t,appear:n}},r.updateStatus=function(e,t){if(void 0===e&&(e=!1),null!==t)if(this.cancelNextCallback(),t===zl){if(this.props.unmountOnExit||this.props.mountOnEnter){var n=this.props.nodeRef?this.props.nodeRef.current:_.findDOMNode(this);n&&function(e){e.scrollTop}(n)}this.performEnter(e)}else this.performExit();else this.props.unmountOnExit&&this.state.status===Ol&&this.setState({status:Pl})},r.performEnter=function(e){var t=this,n=this.props.enter,r=this.context?this.context.isMounting:e,a=this.props.nodeRef?[r]:[_.findDOMNode(this),r],o=a[0],i=a[1],l=this.getTimeouts(),s=r?l.appear:l.enter;e||n?(this.props.onEnter(o,i),this.safeSetState({status:zl},(function(){t.props.onEntering(o,i),t.onTransitionEnd(s,(function(){t.safeSetState({status:Ml},(function(){t.props.onEntered(o,i)}))}))}))):this.safeSetState({status:Ml},(function(){t.props.onEntered(o)}))},r.performExit=function(){var e=this,t=this.props.exit,n=this.getTimeouts(),r=this.props.nodeRef?void 0:_.findDOMNode(this);t?(this.props.onExit(r),this.safeSetState({status:Il},(function(){e.props.onExiting(r),e.onTransitionEnd(n.exit,(function(){e.safeSetState({status:Ol},(function(){e.props.onExited(r)}))}))}))):this.safeSetState({status:Ol},(function(){e.props.onExited(r)}))},r.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},r.safeSetState=function(e,t){t=this.setNextCallback(t),this.setState(e,t)},r.setNextCallback=function(e){var t=this,n=!0;return this.nextCallback=function(r){n&&(n=!1,t.nextCallback=null,e(r))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},r.onTransitionEnd=function(e,t){this.setNextCallback(t);var n=this.props.nodeRef?this.props.nodeRef.current:_.findDOMNode(this),r=null==e&&!this.props.addEndListener;if(n&&!r){if(this.props.addEndListener){var a=this.props.nodeRef?[this.nextCallback]:[n,this.nextCallback],o=a[0],i=a[1];this.props.addEndListener(o,i)}null!=e&&setTimeout(this.nextCallback,e)}else setTimeout(this.nextCallback,0)},r.render=function(){var e=this.state.status;if(e===Pl)return null;var n=this.props,r=n.children,a=(n.in,n.mountOnEnter,n.unmountOnExit,n.appear,n.enter,n.exit,n.timeout,n.addEndListener,n.onEnter,n.onEntering,n.onEntered,n.onExit,n.onExiting,n.onExited,n.nodeRef,(0,Ir.A)(n,["children","in","mountOnEnter","unmountOnExit","appear","enter","exit","timeout","addEndListener","onEnter","onEntering","onEntered","onExit","onExiting","onExited","nodeRef"]));return t.createElement(qr.Provider,{value:null},"function"==typeof r?r(e,a):t.cloneElement(t.Children.only(r),a))},n}(t.Component);function Fl(){}Ll.contextType=qr,Ll.propTypes={},Ll.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:Fl,onEntering:Fl,onEntered:Fl,onExit:Fl,onExiting:Fl,onExited:Fl},Ll.UNMOUNTED=Pl,Ll.EXITED=Ol,Ll.ENTERING=zl,Ll.ENTERED=Ml,Ll.EXITING=Il;const $l=Ll;function Dl(){const e=ni(ai.A);return e[oi.A]||e}const Wl=e=>e.scrollTop;function Ul(e,t){var n,r;const{timeout:a,easing:o,style:i={}}=e;return{duration:null!=(n=i.transitionDuration)?n:"number"==typeof a?a:a[t.mode]||0,easing:null!=(r=i.transitionTimingFunction)?r:"object"==typeof o?o[t.mode]:o,delay:i.transitionDelay}}const Vl=["addEndListener","appear","children","easing","in","onEnter","onEntered","onEntering","onExit","onExited","onExiting","style","timeout","TransitionComponent"];function Hl(e){return`scale(${e}, ${e**2})`}const Yl={entering:{opacity:1,transform:Hl(1)},entered:{opacity:1,transform:"none"}},Gl="undefined"!=typeof navigator&&/^((?!chrome|android).)*(safari|mobile)/i.test(navigator.userAgent)&&/(os |version\/)15(.|_)4/i.test(navigator.userAgent),ql=t.forwardRef((function(e,n){const{addEndListener:r,appear:a=!0,children:o,easing:i,in:l,onEnter:s,onEntered:u,onEntering:c,onExit:d,onExited:p,onExiting:f,style:m,timeout:h="auto",TransitionComponent:A=$l}=e,g=(0,Ir.A)(e,Vl),y=(0,na.A)(),v=t.useRef(),b=Dl(),x=t.useRef(null),E=(0,Ur.A)(x,o.ref,n),C=e=>t=>{if(e){const n=x.current;void 0===t?e(n):e(n,t)}},w=C(c),k=C(((e,t)=>{Wl(e);const{duration:n,delay:r,easing:a}=Ul({style:m,timeout:h,easing:i},{mode:"enter"});let o;"auto"===h?(o=b.transitions.getAutoHeightDuration(e.clientHeight),v.current=o):o=n,e.style.transition=[b.transitions.create("opacity",{duration:o,delay:r}),b.transitions.create("transform",{duration:Gl?o:.666*o,delay:r,easing:a})].join(","),s&&s(e,t)})),S=C(u),_=C(f),B=C((e=>{const{duration:t,delay:n,easing:r}=Ul({style:m,timeout:h,easing:i},{mode:"exit"});let a;"auto"===h?(a=b.transitions.getAutoHeightDuration(e.clientHeight),v.current=a):a=t,e.style.transition=[b.transitions.create("opacity",{duration:a,delay:n}),b.transitions.create("transform",{duration:Gl?a:.666*a,delay:Gl?n:n||.333*a,easing:r})].join(","),e.style.opacity=0,e.style.transform=Hl(.75),d&&d(e)})),T=C(p);return(0,vr.jsx)(A,(0,Lr.A)({appear:a,in:l,nodeRef:x,onEnter:k,onEntered:S,onEntering:w,onExit:B,onExited:T,onExiting:_,addEndListener:e=>{"auto"===h&&y.start(v.current||0,e),r&&r(x.current,e)},timeout:"auto"===h?null:h},g,{children:(e,n)=>t.cloneElement(o,(0,Lr.A)({style:(0,Lr.A)({opacity:0,transform:Hl(.75),visibility:"exited"!==e||l?void 0:"hidden"},Yl[e],m,o.props.style),ref:E},n))}))}));ql.muiSupportAuto=!0;const Kl=ql;var Xl=a(713);const Ql=["input","select","textarea","a[href]","button","[tabindex]","audio[controls]","video[controls]",'[contenteditable]:not([contenteditable="false"])'].join(",");function Jl(e){const t=[],n=[];return Array.from(e.querySelectorAll(Ql)).forEach(((e,r)=>{const a=function(e){const t=parseInt(e.getAttribute("tabindex")||"",10);return Number.isNaN(t)?"true"===e.contentEditable||("AUDIO"===e.nodeName||"VIDEO"===e.nodeName||"DETAILS"===e.nodeName)&&null===e.getAttribute("tabindex")?0:e.tabIndex:t}(e);-1!==a&&function(e){return!(e.disabled||"INPUT"===e.tagName&&"hidden"===e.type||function(e){if("INPUT"!==e.tagName||"radio"!==e.type)return!1;if(!e.name)return!1;const t=t=>e.ownerDocument.querySelector(`input[type="radio"]${t}`);let n=t(`[name="${e.name}"]:checked`);return n||(n=t(`[name="${e.name}"]`)),n!==e}(e))}(e)&&(0===a?t.push(e):n.push({documentOrder:r,tabIndex:a,node:e}))})),n.sort(((e,t)=>e.tabIndex===t.tabIndex?e.documentOrder-t.documentOrder:e.tabIndex-t.tabIndex)).map((e=>e.node)).concat(t)}function Zl(){return!0}const es=function(e){const{children:n,disableAutoFocus:r=!1,disableEnforceFocus:a=!1,disableRestoreFocus:o=!1,getTabbable:i=Jl,isEnabled:l=Zl,open:s}=e,u=t.useRef(!1),c=t.useRef(null),d=t.useRef(null),p=t.useRef(null),f=t.useRef(null),m=t.useRef(!1),h=t.useRef(null),A=(0,Fo.A)(n.ref,h),g=t.useRef(null);t.useEffect((()=>{s&&h.current&&(m.current=!r)}),[r,s]),t.useEffect((()=>{if(!s||!h.current)return;const e=(0,Xl.A)(h.current);return h.current.contains(e.activeElement)||(h.current.hasAttribute("tabIndex")||h.current.setAttribute("tabIndex","-1"),m.current&&h.current.focus()),()=>{o||(p.current&&p.current.focus&&(u.current=!0,p.current.focus()),p.current=null)}}),[s]),t.useEffect((()=>{if(!s||!h.current)return;const e=(0,Xl.A)(h.current),t=t=>{g.current=t,!a&&l()&&"Tab"===t.key&&e.activeElement===h.current&&t.shiftKey&&(u.current=!0,d.current&&d.current.focus())},n=()=>{const t=h.current;if(null===t)return;if(!e.hasFocus()||!l()||u.current)return void(u.current=!1);if(t.contains(e.activeElement))return;if(a&&e.activeElement!==c.current&&e.activeElement!==d.current)return;if(e.activeElement!==f.current)f.current=null;else if(null!==f.current)return;if(!m.current)return;let n=[];if(e.activeElement!==c.current&&e.activeElement!==d.current||(n=i(h.current)),n.length>0){var r,o;const e=Boolean((null==(r=g.current)?void 0:r.shiftKey)&&"Tab"===(null==(o=g.current)?void 0:o.key)),t=n[0],a=n[n.length-1];"string"!=typeof t&&"string"!=typeof a&&(e?a.focus():t.focus())}else t.focus()};e.addEventListener("focusin",n),e.addEventListener("keydown",t,!0);const r=setInterval((()=>{e.activeElement&&"BODY"===e.activeElement.tagName&&n()}),50);return()=>{clearInterval(r),e.removeEventListener("focusin",n),e.removeEventListener("keydown",t,!0)}}),[r,a,o,l,s,i]);const y=e=>{null===p.current&&(p.current=e.relatedTarget),m.current=!0};return(0,vr.jsxs)(t.Fragment,{children:[(0,vr.jsx)("div",{tabIndex:s?0:-1,onFocus:y,ref:c,"data-testid":"sentinelStart"}),t.cloneElement(n,{ref:A,onFocus:e=>{null===p.current&&(p.current=e.relatedTarget),m.current=!0,f.current=e.target;const t=n.props.onFocus;t&&t(e)}}),(0,vr.jsx)("div",{tabIndex:s?0:-1,onFocus:y,ref:d,"data-testid":"sentinelEnd"})]})};var ts=a(1849);const ns=t.forwardRef((function(e,n){const{children:r,container:a,disablePortal:o=!1}=e,[i,l]=t.useState(null),s=(0,Fo.A)(t.isValidElement(r)?r.ref:null,n);if((0,Do.A)((()=>{o||l(function(e){return"function"==typeof e?e():e}(a)||document.body)}),[a,o]),(0,Do.A)((()=>{if(i&&!o)return(0,ts.A)(n,i),()=>{(0,ts.A)(n,null)}}),[n,i,o]),o){if(t.isValidElement(r)){const e={ref:s};return t.cloneElement(r,e)}return(0,vr.jsx)(t.Fragment,{children:r})}return(0,vr.jsx)(t.Fragment,{children:i?_.createPortal(r,i):i})})),rs=["addEndListener","appear","children","easing","in","onEnter","onEntered","onEntering","onExit","onExited","onExiting","style","timeout","TransitionComponent"],as={entering:{opacity:1},entered:{opacity:1}},os=t.forwardRef((function(e,n){const r=Dl(),a={enter:r.transitions.duration.enteringScreen,exit:r.transitions.duration.leavingScreen},{addEndListener:o,appear:i=!0,children:l,easing:s,in:u,onEnter:c,onEntered:d,onEntering:p,onExit:f,onExited:m,onExiting:h,style:A,timeout:g=a,TransitionComponent:y=$l}=e,v=(0,Ir.A)(e,rs),b=t.useRef(null),x=(0,Ur.A)(b,l.ref,n),E=e=>t=>{if(e){const n=b.current;void 0===t?e(n):e(n,t)}},C=E(p),w=E(((e,t)=>{Wl(e);const n=Ul({style:A,timeout:g,easing:s},{mode:"enter"});e.style.webkitTransition=r.transitions.create("opacity",n),e.style.transition=r.transitions.create("opacity",n),c&&c(e,t)})),k=E(d),S=E(h),_=E((e=>{const t=Ul({style:A,timeout:g,easing:s},{mode:"exit"});e.style.webkitTransition=r.transitions.create("opacity",t),e.style.transition=r.transitions.create("opacity",t),f&&f(e)})),B=E(m);return(0,vr.jsx)(y,(0,Lr.A)({appear:i,in:u,nodeRef:b,onEnter:w,onEntered:k,onEntering:C,onExit:_,onExited:B,onExiting:S,addEndListener:e=>{o&&o(b.current,e)},timeout:g},v,{children:(e,n)=>t.cloneElement(l,(0,Lr.A)({style:(0,Lr.A)({opacity:0,visibility:"exited"!==e||u?void 0:"hidden"},as[e],A,l.props.style),ref:x},n))}))})),is=os;function ls(e){return(0,ya.Ay)("MuiBackdrop",e)}(0,ra.A)("MuiBackdrop",["root","invisible"]);const ss=["children","className","component","components","componentsProps","invisible","open","slotProps","slots","TransitionComponent","transitionDuration"],us=(0,Dr.Ay)("div",{name:"MuiBackdrop",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,n.invisible&&t.invisible]}})((({ownerState:e})=>(0,Lr.A)({position:"fixed",display:"flex",alignItems:"center",justifyContent:"center",right:0,bottom:0,top:0,left:0,backgroundColor:"rgba(0, 0, 0, 0.5)",WebkitTapHighlightColor:"transparent"},e.invisible&&{backgroundColor:"transparent"}))),cs=t.forwardRef((function(e,t){var n,r,a;const o=(0,Wr.b)({props:e,name:"MuiBackdrop"}),{children:i,className:l,component:s="div",components:u={},componentsProps:c={},invisible:d=!1,open:p,slotProps:f={},slots:m={},TransitionComponent:h=is,transitionDuration:A}=o,g=(0,Ir.A)(o,ss),y=(0,Lr.A)({},o,{component:s,invisible:d}),v=(e=>{const{classes:t,invisible:n}=e,r={root:["root",n&&"invisible"]};return(0,$r.A)(r,ls,t)})(y),b=null!=(n=f.root)?n:c.root;return(0,vr.jsx)(h,(0,Lr.A)({in:p,timeout:A},g,{children:(0,vr.jsx)(us,(0,Lr.A)({"aria-hidden":!0},b,{as:null!=(r=null!=(a=m.root)?a:u.Root)?r:s,className:(0,Fr.A)(v.root,l,null==b?void 0:b.className),ownerState:(0,Lr.A)({},y,null==b?void 0:b.ownerState),classes:v,ref:t,children:i}))}))}));var ds=a(3183),ps=a(7605);function fs(e,t){t?e.setAttribute("aria-hidden","true"):e.removeAttribute("aria-hidden")}function ms(e){return parseInt((0,$o.A)(e).getComputedStyle(e).paddingRight,10)||0}function hs(e,t,n,r,a){const o=[t,n,...r];[].forEach.call(e.children,(e=>{const t=-1===o.indexOf(e),n=!function(e){const t=-1!==["TEMPLATE","SCRIPT","STYLE","LINK","MAP","META","NOSCRIPT","PICTURE","COL","COLGROUP","PARAM","SLOT","SOURCE","TRACK"].indexOf(e.tagName),n="INPUT"===e.tagName&&"hidden"===e.getAttribute("type");return t||n}(e);t&&n&&fs(e,a)}))}function As(e,t){let n=-1;return e.some(((e,r)=>!!t(e)&&(n=r,!0))),n}const gs=new class{constructor(){this.containers=void 0,this.modals=void 0,this.modals=[],this.containers=[]}add(e,t){let n=this.modals.indexOf(e);if(-1!==n)return n;n=this.modals.length,this.modals.push(e),e.modalRef&&fs(e.modalRef,!1);const r=function(e){const t=[];return[].forEach.call(e.children,(e=>{"true"===e.getAttribute("aria-hidden")&&t.push(e)})),t}(t);hs(t,e.mount,e.modalRef,r,!0);const a=As(this.containers,(e=>e.container===t));return-1!==a?(this.containers[a].modals.push(e),n):(this.containers.push({modals:[e],container:t,restore:null,hiddenSiblings:r}),n)}mount(e,t){const n=As(this.containers,(t=>-1!==t.modals.indexOf(e))),r=this.containers[n];r.restore||(r.restore=function(e,t){const n=[],r=e.container;if(!t.disableScrollLock){if(function(e){const t=(0,Xl.A)(e);return t.body===e?(0,$o.A)(e).innerWidth>t.documentElement.clientWidth:e.scrollHeight>e.clientHeight}(r)){const e=Cl((0,Xl.A)(r));n.push({value:r.style.paddingRight,property:"padding-right",el:r}),r.style.paddingRight=`${ms(r)+e}px`;const t=(0,Xl.A)(r).querySelectorAll(".mui-fixed");[].forEach.call(t,(t=>{n.push({value:t.style.paddingRight,property:"padding-right",el:t}),t.style.paddingRight=`${ms(t)+e}px`}))}let e;if(r.parentNode instanceof DocumentFragment)e=(0,Xl.A)(r).body;else{const t=r.parentElement,n=(0,$o.A)(r);e="HTML"===(null==t?void 0:t.nodeName)&&"scroll"===n.getComputedStyle(t).overflowY?t:r}n.push({value:e.style.overflow,property:"overflow",el:e},{value:e.style.overflowX,property:"overflow-x",el:e},{value:e.style.overflowY,property:"overflow-y",el:e}),e.style.overflow="hidden"}return()=>{n.forEach((({value:e,el:t,property:n})=>{e?t.style.setProperty(n,e):t.style.removeProperty(n)}))}}(r,t))}remove(e,t=!0){const n=this.modals.indexOf(e);if(-1===n)return n;const r=As(this.containers,(t=>-1!==t.modals.indexOf(e))),a=this.containers[r];if(a.modals.splice(a.modals.indexOf(e),1),this.modals.splice(n,1),0===a.modals.length)a.restore&&a.restore(),e.modalRef&&fs(e.modalRef,t),hs(a.container,e.mount,e.modalRef,a.hiddenSiblings,!1),this.containers.splice(r,1);else{const e=a.modals[a.modals.length-1];e.modalRef&&fs(e.modalRef,!1)}return n}isTopModal(e){return this.modals.length>0&&this.modals[this.modals.length-1]===e}};function ys(e){return(0,ya.Ay)("MuiModal",e)}(0,ra.A)("MuiModal",["root","hidden","backdrop"]);const vs=["BackdropComponent","BackdropProps","classes","className","closeAfterTransition","children","container","component","components","componentsProps","disableAutoFocus","disableEnforceFocus","disableEscapeKeyDown","disablePortal","disableRestoreFocus","disableScrollLock","hideBackdrop","keepMounted","onBackdropClick","onClose","onTransitionEnter","onTransitionExited","open","slotProps","slots","theme"],bs=(0,Dr.Ay)("div",{name:"MuiModal",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,!n.open&&n.exited&&t.hidden]}})((({theme:e,ownerState:t})=>(0,Lr.A)({position:"fixed",zIndex:(e.vars||e).zIndex.modal,right:0,bottom:0,top:0,left:0},!t.open&&t.exited&&{visibility:"hidden"}))),xs=(0,Dr.Ay)(cs,{name:"MuiModal",slot:"Backdrop",overridesResolver:(e,t)=>t.backdrop})({zIndex:-1}),Es=t.forwardRef((function(e,n){var r,a,o,i,l,s;const u=(0,Wr.b)({name:"MuiModal",props:e}),{BackdropComponent:c=xs,BackdropProps:d,className:p,closeAfterTransition:f=!1,children:m,container:h,component:A,components:g={},componentsProps:y={},disableAutoFocus:v=!1,disableEnforceFocus:b=!1,disableEscapeKeyDown:x=!1,disablePortal:E=!1,disableRestoreFocus:C=!1,disableScrollLock:w=!1,hideBackdrop:k=!1,keepMounted:S=!1,onBackdropClick:_,open:B,slotProps:T,slots:j}=u,N=(0,Ir.A)(u,vs),R=(0,Lr.A)({},u,{closeAfterTransition:f,disableAutoFocus:v,disableEnforceFocus:b,disableEscapeKeyDown:x,disablePortal:E,disableRestoreFocus:C,disableScrollLock:w,hideBackdrop:k,keepMounted:S}),{getRootProps:P,getBackdropProps:O,getTransitionProps:z,portalRef:M,isTopModal:I,exited:L,hasTransition:F}=function(e){const{container:n,disableEscapeKeyDown:r=!1,disableScrollLock:a=!1,manager:o=gs,closeAfterTransition:i=!1,onTransitionEnter:l,onTransitionExited:s,children:u,onClose:c,open:d,rootRef:p}=e,f=t.useRef({}),m=t.useRef(null),h=t.useRef(null),A=(0,Fo.A)(h,p),[g,y]=t.useState(!d),v=function(e){return!!e&&e.props.hasOwnProperty("in")}(u);let b=!0;"false"!==e["aria-hidden"]&&!1!==e["aria-hidden"]||(b=!1);const x=()=>(f.current.modalRef=h.current,f.current.mount=m.current,f.current),E=()=>{o.mount(x(),{disableScrollLock:a}),h.current&&(h.current.scrollTop=0)},C=(0,ds.A)((()=>{const e=function(e){return"function"==typeof e?e():e}(n)||(0,Xl.A)(m.current).body;o.add(x(),e),h.current&&E()})),w=t.useCallback((()=>o.isTopModal(x())),[o]),k=(0,ds.A)((e=>{m.current=e,e&&(d&&w()?E():h.current&&fs(h.current,b))})),S=t.useCallback((()=>{o.remove(x(),b)}),[b,o]);t.useEffect((()=>()=>{S()}),[S]),t.useEffect((()=>{d?C():v&&i||S()}),[d,S,v,i,C]);const _=e=>t=>{var n;null==(n=e.onKeyDown)||n.call(e,t),"Escape"===t.key&&229!==t.which&&w()&&(r||(t.stopPropagation(),c&&c(t,"escapeKeyDown")))},B=e=>t=>{var n;null==(n=e.onClick)||n.call(e,t),t.target===t.currentTarget&&c&&c(t,"backdropClick")};return{getRootProps:(t={})=>{const n=ml(e);delete n.onTransitionEnter,delete n.onTransitionExited;const r=(0,Lr.A)({},n,t);return(0,Lr.A)({role:"presentation"},r,{onKeyDown:_(r),ref:A})},getBackdropProps:(e={})=>{const t=e;return(0,Lr.A)({"aria-hidden":!0},t,{onClick:B(t),open:d})},getTransitionProps:()=>({onEnter:(0,ps.A)((()=>{y(!1),l&&l()}),null==u?void 0:u.props.onEnter),onExited:(0,ps.A)((()=>{y(!0),s&&s(),i&&S()}),null==u?void 0:u.props.onExited)}),rootRef:A,portalRef:k,isTopModal:w,exited:g,hasTransition:v}}((0,Lr.A)({},R,{rootRef:n})),$=(0,Lr.A)({},R,{exited:L}),D=(e=>{const{open:t,exited:n,classes:r}=e,a={root:["root",!t&&n&&"hidden"],backdrop:["backdrop"]};return(0,$r.A)(a,ys,r)})($),W={};if(void 0===m.props.tabIndex&&(W.tabIndex="-1"),F){const{onEnter:e,onExited:t}=z();W.onEnter=e,W.onExited=t}const U=null!=(r=null!=(a=null==j?void 0:j.root)?a:g.Root)?r:bs,V=null!=(o=null!=(i=null==j?void 0:j.backdrop)?i:g.Backdrop)?o:c,H=null!=(l=null==T?void 0:T.root)?l:y.root,Y=null!=(s=null==T?void 0:T.backdrop)?s:y.backdrop,G=gl({elementType:U,externalSlotProps:H,externalForwardedProps:N,getSlotProps:P,additionalProps:{ref:n,as:A},ownerState:$,className:(0,Fr.A)(p,null==H?void 0:H.className,null==D?void 0:D.root,!$.open&&$.exited&&(null==D?void 0:D.hidden))}),q=gl({elementType:V,externalSlotProps:Y,additionalProps:d,getSlotProps:e=>O((0,Lr.A)({},e,{onClick:t=>{_&&_(t),null!=e&&e.onClick&&e.onClick(t)}})),className:(0,Fr.A)(null==Y?void 0:Y.className,null==d?void 0:d.className,null==D?void 0:D.backdrop),ownerState:$});return S||B||F&&!L?(0,vr.jsx)(ns,{ref:M,container:h,disablePortal:E,children:(0,vr.jsxs)(U,(0,Lr.A)({},G,{children:[!k&&c?(0,vr.jsx)(V,(0,Lr.A)({},q)):null,(0,vr.jsx)(es,{disableEnforceFocus:b,disableAutoFocus:v,disableRestoreFocus:C,isEnabled:I,open:B,children:t.cloneElement(m,W)})]}))}):null})),Cs=Es;var ws=a(495);const ks=e=>{let t;return t=e<1?5.11916*e**2:4.5*Math.log(e+1)+2,(t/100).toFixed(2)};function Ss(e){return(0,ya.Ay)("MuiPaper",e)}(0,ra.A)("MuiPaper",["root","rounded","outlined","elevation","elevation0","elevation1","elevation2","elevation3","elevation4","elevation5","elevation6","elevation7","elevation8","elevation9","elevation10","elevation11","elevation12","elevation13","elevation14","elevation15","elevation16","elevation17","elevation18","elevation19","elevation20","elevation21","elevation22","elevation23","elevation24"]);const _s=["className","component","elevation","square","variant"],Bs=(0,Dr.Ay)("div",{name:"MuiPaper",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[n.variant],!n.square&&t.rounded,"elevation"===n.variant&&t[`elevation${n.elevation}`]]}})((({theme:e,ownerState:t})=>{var n;return(0,Lr.A)({backgroundColor:(e.vars||e).palette.background.paper,color:(e.vars||e).palette.text.primary,transition:e.transitions.create("box-shadow")},!t.square&&{borderRadius:e.shape.borderRadius},"outlined"===t.variant&&{border:`1px solid ${(e.vars||e).palette.divider}`},"elevation"===t.variant&&(0,Lr.A)({boxShadow:(e.vars||e).shadows[t.elevation]},!e.vars&&"dark"===e.palette.mode&&{backgroundImage:`linear-gradient(${(0,ws.X4)("#fff",ks(t.elevation))}, ${(0,ws.X4)("#fff",ks(t.elevation))})`},e.vars&&{backgroundImage:null==(n=e.vars.overlays)?void 0:n[t.elevation]}))})),Ts=t.forwardRef((function(e,t){const n=(0,Wr.b)({props:e,name:"MuiPaper"}),{className:r,component:a="div",elevation:o=1,square:i=!1,variant:l="elevation"}=n,s=(0,Ir.A)(n,_s),u=(0,Lr.A)({},n,{component:a,elevation:o,square:i,variant:l}),c=(e=>{const{square:t,elevation:n,variant:r,classes:a}=e,o={root:["root",r,!t&&"rounded","elevation"===r&&`elevation${n}`]};return(0,$r.A)(o,Ss,a)})(u);return(0,vr.jsx)(Bs,(0,Lr.A)({as:a,ownerState:u,className:(0,Fr.A)(c.root,r),ref:t},s))}));function js(e){return(0,ya.Ay)("MuiPopover",e)}(0,ra.A)("MuiPopover",["root","paper"]);const Ns=["onEntering"],Rs=["action","anchorEl","anchorOrigin","anchorPosition","anchorReference","children","className","container","elevation","marginThreshold","open","PaperProps","slots","slotProps","transformOrigin","TransitionComponent","transitionDuration","TransitionProps","disableScrollLock"],Ps=["slotProps"];function Os(e,t){let n=0;return"number"==typeof t?n=t:"center"===t?n=e.height/2:"bottom"===t&&(n=e.height),n}function zs(e,t){let n=0;return"number"==typeof t?n=t:"center"===t?n=e.width/2:"right"===t&&(n=e.width),n}function Ms(e){return[e.horizontal,e.vertical].map((e=>"number"==typeof e?`${e}px`:e)).join(" ")}function Is(e){return"function"==typeof e?e():e}const Ls=(0,Dr.Ay)(Cs,{name:"MuiPopover",slot:"Root",overridesResolver:(e,t)=>t.root})({}),Fs=(0,Dr.Ay)(Ts,{name:"MuiPopover",slot:"Paper",overridesResolver:(e,t)=>t.paper})({position:"absolute",overflowY:"auto",overflowX:"hidden",minWidth:16,minHeight:16,maxWidth:"calc(100% - 32px)",maxHeight:"calc(100% - 32px)",outline:0}),$s=t.forwardRef((function(e,n){var r,a,o;const i=(0,Wr.b)({props:e,name:"MuiPopover"}),{action:l,anchorEl:s,anchorOrigin:u={vertical:"top",horizontal:"left"},anchorPosition:c,anchorReference:d="anchorEl",children:p,className:f,container:m,elevation:h=8,marginThreshold:A=16,open:g,PaperProps:y={},slots:v,slotProps:b,transformOrigin:x={vertical:"top",horizontal:"left"},TransitionComponent:E=Kl,transitionDuration:C="auto",TransitionProps:{onEntering:w}={},disableScrollLock:k=!1}=i,S=(0,Ir.A)(i.TransitionProps,Ns),_=(0,Ir.A)(i,Rs),B=null!=(r=null==b?void 0:b.paper)?r:y,T=t.useRef(),j=(0,Ur.A)(T,B.ref),N=(0,Lr.A)({},i,{anchorOrigin:u,anchorReference:d,elevation:h,marginThreshold:A,externalPaperSlotProps:B,transformOrigin:x,TransitionComponent:E,transitionDuration:C,TransitionProps:S}),R=(e=>{const{classes:t}=e;return(0,$r.A)({root:["root"],paper:["paper"]},js,t)})(N),P=t.useCallback((()=>{if("anchorPosition"===d)return c;const e=Is(s),t=(e&&1===e.nodeType?e:(0,pl.A)(T.current).body).getBoundingClientRect();return{top:t.top+Os(t,u.vertical),left:t.left+zs(t,u.horizontal)}}),[s,u.horizontal,u.vertical,c,d]),O=t.useCallback((e=>({vertical:Os(e,x.vertical),horizontal:zs(e,x.horizontal)})),[x.horizontal,x.vertical]),z=t.useCallback((e=>{const t={width:e.offsetWidth,height:e.offsetHeight},n=O(t);if("none"===d)return{top:null,left:null,transformOrigin:Ms(n)};const r=P();let a=r.top-n.vertical,o=r.left-n.horizontal;const i=a+t.height,l=o+t.width,u=(0,Rl.A)(Is(s)),c=u.innerHeight-A,p=u.innerWidth-A;if(null!==A&&a<A){const e=a-A;a-=e,n.vertical+=e}else if(null!==A&&i>c){const e=i-c;a-=e,n.vertical+=e}if(null!==A&&o<A){const e=o-A;o-=e,n.horizontal+=e}else if(l>p){const e=l-p;o-=e,n.horizontal+=e}return{top:`${Math.round(a)}px`,left:`${Math.round(o)}px`,transformOrigin:Ms(n)}}),[s,d,P,O,A]),[M,I]=t.useState(g),L=t.useCallback((()=>{const e=T.current;if(!e)return;const t=z(e);null!==t.top&&(e.style.top=t.top),null!==t.left&&(e.style.left=t.left),e.style.transformOrigin=t.transformOrigin,I(!0)}),[z]);t.useEffect((()=>(k&&window.addEventListener("scroll",L),()=>window.removeEventListener("scroll",L))),[s,k,L]),t.useEffect((()=>{g&&L()})),t.useImperativeHandle(l,(()=>g?{updatePosition:()=>{L()}}:null),[g,L]),t.useEffect((()=>{if(!g)return;const e=(0,Nl.A)((()=>{L()})),t=(0,Rl.A)(s);return t.addEventListener("resize",e),()=>{e.clear(),t.removeEventListener("resize",e)}}),[s,g,L]);let F=C;"auto"!==C||E.muiSupportAuto||(F=void 0);const $=m||(s?(0,pl.A)(Is(s)).body:void 0),D=null!=(a=null==v?void 0:v.root)?a:Ls,W=null!=(o=null==v?void 0:v.paper)?o:Fs,U=gl({elementType:W,externalSlotProps:(0,Lr.A)({},B,{style:M?B.style:(0,Lr.A)({},B.style,{opacity:0})}),additionalProps:{elevation:h,ref:j},ownerState:N,className:(0,Fr.A)(R.paper,null==B?void 0:B.className)}),V=gl({elementType:D,externalSlotProps:(null==b?void 0:b.root)||{},externalForwardedProps:_,additionalProps:{ref:n,slotProps:{backdrop:{invisible:!0}},container:$,open:g},ownerState:N,className:(0,Fr.A)(R.root,f)}),{slotProps:H}=V,Y=(0,Ir.A)(V,Ps);return(0,vr.jsx)(D,(0,Lr.A)({},Y,!Lo(D)&&{slotProps:H,disableScrollLock:k},{children:(0,vr.jsx)(E,(0,Lr.A)({appear:!0,in:g,onEntering:(e,t)=>{w&&w(e,t),L()},onExited:()=>{I(!1)},timeout:F},S,{children:(0,vr.jsx)(W,(0,Lr.A)({},U,{children:p}))}))}))}));function Ds(e){return(0,ya.Ay)("MuiMenu",e)}(0,ra.A)("MuiMenu",["root","paper","list"]);const Ws=["onEntering"],Us=["autoFocus","children","className","disableAutoFocusItem","MenuListProps","onClose","open","PaperProps","PopoverClasses","transitionDuration","TransitionProps","variant","slots","slotProps"],Vs={vertical:"top",horizontal:"right"},Hs={vertical:"top",horizontal:"left"},Ys=(0,Dr.Ay)($s,{shouldForwardProp:e=>(0,_a.A)(e)||"classes"===e,name:"MuiMenu",slot:"Root",overridesResolver:(e,t)=>t.root})({}),Gs=(0,Dr.Ay)(Fs,{name:"MuiMenu",slot:"Paper",overridesResolver:(e,t)=>t.paper})({maxHeight:"calc(100% - 96px)",WebkitOverflowScrolling:"touch"}),qs=(0,Dr.Ay)(jl,{name:"MuiMenu",slot:"List",overridesResolver:(e,t)=>t.list})({outline:0}),Ks=t.forwardRef((function(e,n){var r,a;const o=(0,Wr.b)({props:e,name:"MuiMenu"}),{autoFocus:i=!0,children:l,className:s,disableAutoFocusItem:u=!1,MenuListProps:c={},onClose:d,open:p,PaperProps:f={},PopoverClasses:m,transitionDuration:h="auto",TransitionProps:{onEntering:A}={},variant:g="selectedMenu",slots:y={},slotProps:v={}}=o,b=(0,Ir.A)(o.TransitionProps,Ws),x=(0,Ir.A)(o,Us),E=(()=>{const e=t.useContext(fl);return null!=e&&e})(),C=(0,Lr.A)({},o,{autoFocus:i,disableAutoFocusItem:u,MenuListProps:c,onEntering:A,PaperProps:f,transitionDuration:h,TransitionProps:b,variant:g}),w=(e=>{const{classes:t}=e;return(0,$r.A)({root:["root"],paper:["paper"],list:["list"]},Ds,t)})(C),k=i&&!u&&p,S=t.useRef(null);let _=-1;t.Children.map(l,((e,n)=>{t.isValidElement(e)&&(e.props.disabled||("selectedMenu"===g&&e.props.selected||-1===_)&&(_=n))}));const B=null!=(r=y.paper)?r:Gs,T=null!=(a=v.paper)?a:f,j=gl({elementType:y.root,externalSlotProps:v.root,ownerState:C,className:[w.root,s]}),N=gl({elementType:B,externalSlotProps:T,ownerState:C,className:w.paper});return(0,vr.jsx)(Ys,(0,Lr.A)({onClose:d,anchorOrigin:{vertical:"bottom",horizontal:E?"right":"left"},transformOrigin:E?Vs:Hs,slots:{paper:B,root:y.root},slotProps:{root:j,paper:N},open:p,ref:n,transitionDuration:h,TransitionProps:(0,Lr.A)({onEntering:(e,t)=>{S.current&&S.current.adjustStyleForScrollbar(e,{direction:E?"rtl":"ltr"}),A&&A(e,t)}},b),ownerState:C},x,{classes:m,children:(0,vr.jsx)(qs,(0,Lr.A)({onKeyDown:e=>{"Tab"===e.key&&(e.preventDefault(),d&&d(e,"tabKeyDown"))},actions:S,autoFocus:i&&(-1===_||u),autoFocusItem:k,variant:g},c,{className:(0,Fr.A)(w.list,c.className),children:l}))}))}));function Xs(e){return(0,ya.Ay)("MuiNativeSelect",e)}const Qs=(0,ra.A)("MuiNativeSelect",["root","select","multiple","filled","outlined","standard","disabled","icon","iconOpen","iconFilled","iconOutlined","iconStandard","nativeInput","error"]),Js=["className","disabled","error","IconComponent","inputRef","variant"],Zs=({ownerState:e,theme:t})=>(0,Lr.A)({MozAppearance:"none",WebkitAppearance:"none",userSelect:"none",borderRadius:0,cursor:"pointer","&:focus":(0,Lr.A)({},t.vars?{backgroundColor:`rgba(${t.vars.palette.common.onBackgroundChannel} / 0.05)`}:{backgroundColor:"light"===t.palette.mode?"rgba(0, 0, 0, 0.05)":"rgba(255, 255, 255, 0.05)"},{borderRadius:0}),"&::-ms-expand":{display:"none"},[`&.${Qs.disabled}`]:{cursor:"default"},"&[multiple]":{height:"auto"},"&:not([multiple]) option, &:not([multiple]) optgroup":{backgroundColor:(t.vars||t).palette.background.paper},"&&&":{paddingRight:24,minWidth:16}},"filled"===e.variant&&{"&&&":{paddingRight:32}},"outlined"===e.variant&&{borderRadius:(t.vars||t).shape.borderRadius,"&:focus":{borderRadius:(t.vars||t).shape.borderRadius},"&&&":{paddingRight:32}}),eu=(0,Dr.Ay)("select",{name:"MuiNativeSelect",slot:"Select",shouldForwardProp:_a.A,overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.select,t[n.variant],n.error&&t.error,{[`&.${Qs.multiple}`]:t.multiple}]}})(Zs),tu=({ownerState:e,theme:t})=>(0,Lr.A)({position:"absolute",right:0,top:"calc(50% - .5em)",pointerEvents:"none",color:(t.vars||t).palette.action.active,[`&.${Qs.disabled}`]:{color:(t.vars||t).palette.action.disabled}},e.open&&{transform:"rotate(180deg)"},"filled"===e.variant&&{right:7},"outlined"===e.variant&&{right:7}),nu=(0,Dr.Ay)("svg",{name:"MuiNativeSelect",slot:"Icon",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.icon,n.variant&&t[`icon${(0,wa.A)(n.variant)}`],n.open&&t.iconOpen]}})(tu),ru=t.forwardRef((function(e,n){const{className:r,disabled:a,error:o,IconComponent:i,inputRef:l,variant:s="standard"}=e,u=(0,Ir.A)(e,Js),c=(0,Lr.A)({},e,{disabled:a,variant:s,error:o}),d=(e=>{const{classes:t,variant:n,disabled:r,multiple:a,open:o,error:i}=e,l={select:["select",n,r&&"disabled",a&&"multiple",i&&"error"],icon:["icon",`icon${(0,wa.A)(n)}`,o&&"iconOpen",r&&"disabled"]};return(0,$r.A)(l,Xs,t)})(c);return(0,vr.jsxs)(t.Fragment,{children:[(0,vr.jsx)(eu,(0,Lr.A)({ownerState:c,className:(0,Fr.A)(d.select,r),disabled:a,ref:l||n},u)),e.multiple?null:(0,vr.jsx)(nu,{as:i,ownerState:c,className:d.icon})]})}));var au=a(4738),ou=a(1681);function iu(e){return(0,ya.Ay)("MuiSelect",e)}const lu=(0,ra.A)("MuiSelect",["root","select","multiple","filled","outlined","standard","disabled","focused","icon","iconOpen","iconFilled","iconOutlined","iconStandard","nativeInput","error"]);var su;const uu=["aria-describedby","aria-label","autoFocus","autoWidth","children","className","defaultOpen","defaultValue","disabled","displayEmpty","error","IconComponent","inputRef","labelId","MenuProps","multiple","name","onBlur","onChange","onClose","onFocus","onOpen","open","readOnly","renderValue","SelectDisplayProps","tabIndex","type","value","variant"],cu=(0,Dr.Ay)("div",{name:"MuiSelect",slot:"Select",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[{[`&.${lu.select}`]:t.select},{[`&.${lu.select}`]:t[n.variant]},{[`&.${lu.error}`]:t.error},{[`&.${lu.multiple}`]:t.multiple}]}})(Zs,{[`&.${lu.select}`]:{height:"auto",minHeight:"1.4375em",textOverflow:"ellipsis",whiteSpace:"nowrap",overflow:"hidden"}}),du=(0,Dr.Ay)("svg",{name:"MuiSelect",slot:"Icon",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.icon,n.variant&&t[`icon${(0,wa.A)(n.variant)}`],n.open&&t.iconOpen]}})(tu),pu=(0,Dr.Ay)("input",{shouldForwardProp:e=>(0,au.A)(e)&&"classes"!==e,name:"MuiSelect",slot:"NativeInput",overridesResolver:(e,t)=>t.nativeInput})({bottom:0,left:0,position:"absolute",opacity:0,pointerEvents:"none",width:"100%",boxSizing:"border-box"});function fu(e,t){return"object"==typeof t&&null!==t?e===t:String(e)===String(t)}function mu(e){return null==e||"string"==typeof e&&!e.trim()}const hu=t.forwardRef((function(e,n){var r;const{"aria-describedby":a,"aria-label":o,autoFocus:i,autoWidth:l,children:s,className:u,defaultOpen:c,defaultValue:d,disabled:p,displayEmpty:f,error:m=!1,IconComponent:h,inputRef:A,labelId:g,MenuProps:y={},multiple:v,name:b,onBlur:x,onChange:E,onClose:C,onFocus:w,onOpen:k,open:S,readOnly:_,renderValue:B,SelectDisplayProps:T={},tabIndex:j,value:N,variant:R="standard"}=e,P=(0,Ir.A)(e,uu),[O,z]=(0,ou.A)({controlled:N,default:d,name:"Select"}),[M,I]=(0,ou.A)({controlled:S,default:c,name:"Select"}),L=t.useRef(null),F=t.useRef(null),[$,D]=t.useState(null),{current:W}=t.useRef(null!=S),[U,V]=t.useState(),H=(0,Ur.A)(n,A),Y=t.useCallback((e=>{F.current=e,e&&D(e)}),[]),G=null==$?void 0:$.parentNode;t.useImperativeHandle(H,(()=>({focus:()=>{F.current.focus()},node:L.current,value:O})),[O]),t.useEffect((()=>{c&&M&&$&&!W&&(V(l?null:G.clientWidth),F.current.focus())}),[$,l]),t.useEffect((()=>{i&&F.current.focus()}),[i]),t.useEffect((()=>{if(!g)return;const e=(0,pl.A)(F.current).getElementById(g);if(e){const t=()=>{getSelection().isCollapsed&&F.current.focus()};return e.addEventListener("click",t),()=>{e.removeEventListener("click",t)}}}),[g]);const q=(e,t)=>{e?k&&k(t):C&&C(t),W||(V(l?null:G.clientWidth),I(e))},K=t.Children.toArray(s),X=e=>t=>{let n;if(t.currentTarget.hasAttribute("tabindex")){if(v){n=Array.isArray(O)?O.slice():[];const t=O.indexOf(e.props.value);-1===t?n.push(e.props.value):n.splice(t,1)}else n=e.props.value;if(e.props.onClick&&e.props.onClick(t),O!==n&&(z(n),E)){const r=t.nativeEvent||t,a=new r.constructor(r.type,r);Object.defineProperty(a,"target",{writable:!0,value:{value:n,name:b}}),E(a,e)}v||q(!1,t)}},Q=null!==$&&M;let J,Z;delete P["aria-invalid"];const ee=[];let te=!1,ne=!1;(si({value:O})||f)&&(B?J=B(O):te=!0);const re=K.map((e=>{if(!t.isValidElement(e))return null;let n;if(v){if(!Array.isArray(O))throw new Error((0,Io.A)(2));n=O.some((t=>fu(t,e.props.value))),n&&te&&ee.push(e.props.children)}else n=fu(O,e.props.value),n&&te&&(Z=e.props.children);return n&&(ne=!0),t.cloneElement(e,{"aria-selected":n?"true":"false",onClick:X(e),onKeyUp:t=>{" "===t.key&&t.preventDefault(),e.props.onKeyUp&&e.props.onKeyUp(t)},role:"option",selected:n,value:void 0,"data-value":e.props.value})}));te&&(J=v?0===ee.length?null:ee.reduce(((e,t,n)=>(e.push(t),n<ee.length-1&&e.push(", "),e)),[]):Z);let ae,oe=U;!l&&W&&$&&(oe=G.clientWidth),ae=void 0!==j?j:p?null:0;const ie=T.id||(b?`mui-component-select-${b}`:void 0),le=(0,Lr.A)({},e,{variant:R,value:O,open:Q,error:m}),se=(e=>{const{classes:t,variant:n,disabled:r,multiple:a,open:o,error:i}=e,l={select:["select",n,r&&"disabled",a&&"multiple",i&&"error"],icon:["icon",`icon${(0,wa.A)(n)}`,o&&"iconOpen",r&&"disabled"],nativeInput:["nativeInput"]};return(0,$r.A)(l,iu,t)})(le),ue=(0,Lr.A)({},y.PaperProps,null==(r=y.slotProps)?void 0:r.paper),ce=(0,zo.A)();return(0,vr.jsxs)(t.Fragment,{children:[(0,vr.jsx)(cu,(0,Lr.A)({ref:Y,tabIndex:ae,role:"combobox","aria-controls":ce,"aria-disabled":p?"true":void 0,"aria-expanded":Q?"true":"false","aria-haspopup":"listbox","aria-label":o,"aria-labelledby":[g,ie].filter(Boolean).join(" ")||void 0,"aria-describedby":a,onKeyDown:e=>{_||-1!==[" ","ArrowUp","ArrowDown","Enter"].indexOf(e.key)&&(e.preventDefault(),q(!0,e))},onMouseDown:p||_?null:e=>{0===e.button&&(e.preventDefault(),F.current.focus(),q(!0,e))},onBlur:e=>{!Q&&x&&(Object.defineProperty(e,"target",{writable:!0,value:{value:O,name:b}}),x(e))},onFocus:w},T,{ownerState:le,className:(0,Fr.A)(T.className,se.select,u),id:ie,children:mu(J)?su||(su=(0,vr.jsx)("span",{className:"notranslate",children:"​"})):J})),(0,vr.jsx)(pu,(0,Lr.A)({"aria-invalid":m,value:Array.isArray(O)?O.join(","):O,name:b,ref:L,"aria-hidden":!0,onChange:e=>{const t=K.find((t=>t.props.value===e.target.value));void 0!==t&&(z(t.props.value),E&&E(e,t))},tabIndex:-1,disabled:p,className:se.nativeInput,autoFocus:i,ownerState:le},P)),(0,vr.jsx)(du,{as:h,className:se.icon,ownerState:le}),(0,vr.jsx)(Ks,(0,Lr.A)({id:`menu-${b||""}`,anchorEl:G,open:Q,onClose:e=>{q(!1,e)},anchorOrigin:{vertical:"bottom",horizontal:"center"},transformOrigin:{vertical:"top",horizontal:"center"}},y,{MenuListProps:(0,Lr.A)({"aria-labelledby":g,role:"listbox","aria-multiselectable":v?"true":void 0,disableListWrap:!0,id:ce},y.MenuListProps),slotProps:(0,Lr.A)({},y.slotProps,{paper:(0,Lr.A)({},ue,{style:(0,Lr.A)({minWidth:oe},null!=ue?ue.style:null)})}),children:re}))]})})),Au=hu,gu=(0,Po.A)((0,vr.jsx)("path",{d:"M7 10l5 5 5-5z"}),"ArrowDropDown"),yu=["autoWidth","children","classes","className","defaultOpen","displayEmpty","IconComponent","id","input","inputProps","label","labelId","MenuProps","multiple","native","onClose","onOpen","open","renderValue","SelectDisplayProps","variant"],vu=["root"],bu={name:"MuiSelect",overridesResolver:(e,t)=>t.root,shouldForwardProp:e=>(0,_a.A)(e)&&"variant"!==e,slot:"Root"},xu=(0,Dr.Ay)(ki,bu)(""),Eu=(0,Dr.Ay)(Vi,bu)(""),Cu=(0,Dr.Ay)(Ri,bu)(""),wu=t.forwardRef((function(e,n){const r=(0,Wr.b)({name:"MuiSelect",props:e}),{autoWidth:a=!1,children:o,classes:i={},className:l,defaultOpen:s=!1,displayEmpty:u=!1,IconComponent:c=gu,id:d,input:p,inputProps:f,label:m,labelId:h,MenuProps:A,multiple:g=!1,native:y=!1,onClose:v,onOpen:b,open:x,renderValue:E,SelectDisplayProps:C,variant:w="outlined"}=r,k=(0,Ir.A)(r,yu),S=y?ru:Au,_=qo({props:r,muiFormControl:Xo(),states:["variant","error"]}),B=_.variant||w,T=(0,Lr.A)({},r,{variant:B,classes:i}),j=(e=>{const{classes:t}=e;return t})(T),N=(0,Ir.A)(j,vu),R=p||{standard:(0,vr.jsx)(xu,{ownerState:T}),outlined:(0,vr.jsx)(Eu,{label:m,ownerState:T}),filled:(0,vr.jsx)(Cu,{ownerState:T})}[B],P=(0,Ur.A)(n,R.ref);return(0,vr.jsx)(t.Fragment,{children:t.cloneElement(R,(0,Lr.A)({inputComponent:S,inputProps:(0,Lr.A)({children:o,error:_.error,IconComponent:c,variant:B,type:void 0,multiple:g},y?{id:d}:{autoWidth:a,defaultOpen:s,displayEmpty:u,labelId:h,MenuProps:A,onClose:v,onOpen:b,open:x,renderValue:E,SelectDisplayProps:(0,Lr.A)({id:d},C)},f,{classes:f?(0,Mo.A)(N,f.classes):N},p?p.props.inputProps:{})},(g&&y||u)&&"outlined"===B?{notched:!0}:{},{ref:P,className:(0,Fr.A)(R.props.className,l,j.root)},!p&&{variant:B},k))})}));wu.muiName="Select";const ku=wu;function Su(e){return(0,ya.Ay)("MuiTextField",e)}(0,ra.A)("MuiTextField",["root"]);const _u=["autoComplete","autoFocus","children","className","color","defaultValue","disabled","error","FormHelperTextProps","fullWidth","helperText","id","InputLabelProps","inputProps","InputProps","inputRef","label","maxRows","minRows","multiline","name","onBlur","onChange","onFocus","placeholder","required","rows","select","SelectProps","type","value","variant"],Bu={standard:ki,filled:Ri,outlined:Vi},Tu=(0,Dr.Ay)(ol,{name:"MuiTextField",slot:"Root",overridesResolver:(e,t)=>t.root})({}),ju=t.forwardRef((function(e,t){const n=(0,Wr.b)({props:e,name:"MuiTextField"}),{autoComplete:r,autoFocus:a=!1,children:o,className:i,color:l="primary",defaultValue:s,disabled:u=!1,error:c=!1,FormHelperTextProps:d,fullWidth:p=!1,helperText:f,id:m,InputLabelProps:h,inputProps:A,InputProps:g,inputRef:y,label:v,maxRows:b,minRows:x,multiline:E=!1,name:C,onBlur:w,onChange:k,onFocus:S,placeholder:_,required:B=!1,rows:T,select:j=!1,SelectProps:N,type:R,value:P,variant:O="outlined"}=n,z=(0,Ir.A)(n,_u),M=(0,Lr.A)({},n,{autoFocus:a,color:l,disabled:u,error:c,fullWidth:p,multiline:E,required:B,select:j,variant:O}),I=(e=>{const{classes:t}=e;return(0,$r.A)({root:["root"]},Su,t)})(M),L={};"outlined"===O&&(h&&void 0!==h.shrink&&(L.notched=h.shrink),L.label=v),j&&(N&&N.native||(L.id=void 0),L["aria-describedby"]=void 0);const F=(0,zo.A)(m),$=f&&F?`${F}-helper-text`:void 0,D=v&&F?`${F}-label`:void 0,W=Bu[O],U=(0,vr.jsx)(W,(0,Lr.A)({"aria-describedby":$,autoComplete:r,autoFocus:a,defaultValue:s,fullWidth:p,multiline:E,name:C,rows:T,maxRows:b,minRows:x,type:R,value:P,id:F,inputRef:y,onBlur:w,onChange:k,onFocus:S,placeholder:_,inputProps:A},L,g));return(0,vr.jsxs)(Tu,(0,Lr.A)({className:(0,Fr.A)(I.root,i),disabled:u,error:c,fullWidth:p,ref:t,required:B,color:l,variant:O,ownerState:M},z,{children:[null!=v&&""!==v&&(0,vr.jsx)(el,(0,Lr.A)({htmlFor:F,id:D},h,{children:v})),j?(0,vr.jsx)(ku,(0,Lr.A)({"aria-describedby":$,id:F,labelId:D,value:P,input:U},N,{children:o})):U,f&&(0,vr.jsx)(dl,(0,Lr.A)({id:$},d,{children:f}))]}))}));var Nu=a(523);function Ru(e){return(0,ya.Ay)("MuiTypography",e)}(0,ra.A)("MuiTypography",["root","h1","h2","h3","h4","h5","h6","subtitle1","subtitle2","body1","body2","inherit","button","caption","overline","alignLeft","alignRight","alignCenter","alignJustify","noWrap","gutterBottom","paragraph"]);const Pu=["align","className","component","gutterBottom","noWrap","paragraph","variant","variantMapping"],Ou=(0,Dr.Ay)("span",{name:"MuiTypography",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,n.variant&&t[n.variant],"inherit"!==n.align&&t[`align${(0,wa.A)(n.align)}`],n.noWrap&&t.noWrap,n.gutterBottom&&t.gutterBottom,n.paragraph&&t.paragraph]}})((({theme:e,ownerState:t})=>(0,Lr.A)({margin:0},"inherit"===t.variant&&{font:"inherit"},"inherit"!==t.variant&&e.typography[t.variant],"inherit"!==t.align&&{textAlign:t.align},t.noWrap&&{overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap"},t.gutterBottom&&{marginBottom:"0.35em"},t.paragraph&&{marginBottom:16}))),zu={h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",subtitle1:"h6",subtitle2:"h6",body1:"p",body2:"p",inherit:"p"},Mu={primary:"primary.main",textPrimary:"text.primary",secondary:"secondary.main",textSecondary:"text.secondary",error:"error.main"},Iu=t.forwardRef((function(e,t){const n=(0,Wr.b)({props:e,name:"MuiTypography"}),r=(e=>Mu[e]||e)(n.color),a=(0,Nu.A)((0,Lr.A)({},n,{color:r})),{align:o="inherit",className:i,component:l,gutterBottom:s=!1,noWrap:u=!1,paragraph:c=!1,variant:d="body1",variantMapping:p=zu}=a,f=(0,Ir.A)(a,Pu),m=(0,Lr.A)({},a,{align:o,color:r,className:i,component:l,gutterBottom:s,noWrap:u,paragraph:c,variant:d,variantMapping:p}),h=l||(c?"p":p[d]||zu[d])||"span",A=(e=>{const{align:t,gutterBottom:n,noWrap:r,paragraph:a,variant:o,classes:i}=e,l={root:["root",o,"inherit"!==e.align&&`align${(0,wa.A)(t)}`,n&&"gutterBottom",r&&"noWrap",a&&"paragraph"]};return(0,$r.A)(l,Ru,i)})(m);return(0,vr.jsx)(Ou,(0,Lr.A)({as:h,ref:t,ownerState:m,className:(0,Fr.A)(A.root,i)},f))}));function Lu(e){return(0,ya.Ay)("MuiInputAdornment",e)}const Fu=(0,ra.A)("MuiInputAdornment",["root","filled","standard","outlined","positionStart","positionEnd","disablePointerEvents","hiddenLabel","sizeSmall"]);var $u;const Du=["children","className","component","disablePointerEvents","disableTypography","position","variant"],Wu=(0,Dr.Ay)("div",{name:"MuiInputAdornment",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[`position${(0,wa.A)(n.position)}`],!0===n.disablePointerEvents&&t.disablePointerEvents,t[n.variant]]}})((({theme:e,ownerState:t})=>(0,Lr.A)({display:"flex",height:"0.01em",maxHeight:"2em",alignItems:"center",whiteSpace:"nowrap",color:(e.vars||e).palette.action.active},"filled"===t.variant&&{[`&.${Fu.positionStart}&:not(.${Fu.hiddenLabel})`]:{marginTop:16}},"start"===t.position&&{marginRight:8},"end"===t.position&&{marginLeft:8},!0===t.disablePointerEvents&&{pointerEvents:"none"}))),Uu=t.forwardRef((function(e,n){const r=(0,Wr.b)({props:e,name:"MuiInputAdornment"}),{children:a,className:o,component:i="div",disablePointerEvents:l=!1,disableTypography:s=!1,position:u,variant:c}=r,d=(0,Ir.A)(r,Du),p=Xo()||{};let f=c;c&&p.variant,p&&!f&&(f=p.variant);const m=(0,Lr.A)({},r,{hiddenLabel:p.hiddenLabel,size:p.size,disablePointerEvents:l,position:u,variant:f}),h=(e=>{const{classes:t,disablePointerEvents:n,hiddenLabel:r,position:a,size:o,variant:i}=e,l={root:["root",n&&"disablePointerEvents",a&&`position${(0,wa.A)(a)}`,i,r&&"hiddenLabel",o&&`size${(0,wa.A)(o)}`]};return(0,$r.A)(l,Lu,t)})(m);return(0,vr.jsx)(Ko.Provider,{value:null,children:(0,vr.jsx)(Wu,(0,Lr.A)({as:i,ownerState:m,className:(0,Fr.A)(h.root,o),ref:n},d,{children:"string"!=typeof a||s?(0,vr.jsxs)(t.Fragment,{children:["start"===u?$u||($u=(0,vr.jsx)("span",{className:"notranslate",children:"​"})):null,a]}):(0,vr.jsx)(Iu,{color:"text.secondary",children:a})}))})}));var Vu=a(1889),Hu={};Hu.styleTagTransform=Ar(),Hu.setAttributes=pr(),Hu.insert=cr().bind(null,"head"),Hu.domAPI=sr(),Hu.insertStyleElement=mr(),ir()(Vu.A,Hu);const Yu=Vu.A&&Vu.A.locals?Vu.A.locals:void 0;function Gu({onSubmit:e,className:n=""}){const[r,a]=(0,t.useState)(""),o={handleSearch:t=>{t.preventDefault(),e(r)}};return(0,vr.jsx)("form",{className:`${Yu.searchForm} ${n}`,action:"submit",onSubmit:o.handleSearch,children:(0,vr.jsx)(ju,{variant:"standard",InputProps:{endAdornment:(0,vr.jsx)(Uu,{position:"start",children:(0,vr.jsx)(Oo,{})})},name:"search",placeholder:"search",value:r,onChange:e=>{a(e.target.value)}})})}var qu=a(6046),Ku={};Ku.styleTagTransform=Ar(),Ku.setAttributes=pr(),Ku.insert=cr().bind(null,"head"),Ku.domAPI=sr(),Ku.insertStyleElement=mr(),ir()(qu.A,Ku);const Xu=qu.A&&qu.A.locals?qu.A.locals:void 0,Qu=({className:e="",items:t})=>{if(0===t.length)return null;const n={onClick:e=>{const t=e.target,n=t.nextElementSibling;n.style.maxHeight=t.classList.contains(Xu.active)?"0":`${n.scrollHeight}px`,t.classList.toggle(Xu.active)}};return(0,vr.jsx)("div",{className:e,children:t.map((t=>(0,vr.jsxs)("div",{className:`${e}__item`,children:[(0,vr.jsx)("button",{className:`${Xu.accordion} ${t.initiallyOpened?Xu.active:""}`,onClick:n.onClick,children:t.title}),(0,vr.jsx)("div",{className:Xu.panel,children:t.content})]},t.title)))})},Ju=({items:e,changeHandler:t,selected:n,name:r,className:a=""})=>(0,vr.jsx)("select",{className:a,name:r,onChange:e=>{const n=e.target;t(n.value)},value:n,children:e.map((e=>(0,vr.jsx)("option",{value:e,children:e},e)))});var Zu=a(4753),ec={};ec.styleTagTransform=Ar(),ec.setAttributes=pr(),ec.insert=cr().bind(null,"head"),ec.domAPI=sr(),ec.insertStyleElement=mr(),ir()(Zu.A,ec);const tc=Zu.A&&Zu.A.locals?Zu.A.locals:void 0;function nc({controlsTitle:e,views:n,activeView:r="year",setActiveView:a,onGoToRelative:o,onToday:i,onSearch:l}){const s={prevHandler:()=>{o("prev",r)},nextHandler:()=>{o("next",r)},handleSearch:(0,t.useCallback)((e=>{l(e)}),[r])};return(0,vr.jsxs)("div",{className:tc.controls,children:[(0,vr.jsx)(Ro,{className:`${tc.btn} ${tc.btnToday}`,title:"Today",onClick:i}),(0,vr.jsxs)("div",{className:tc.btnGroup,children:[(0,vr.jsx)(Ro,{className:`${tc.btn} ${tc.btnPrev}`,imageType:"prevArrow",onClick:s.prevHandler}),(0,vr.jsx)(Ro,{className:`${tc.btn} ${tc.btnNext}`,imageType:"nextArrow",onClick:s.nextHandler})]}),(0,vr.jsx)("div",{className:tc.textContent,children:e}),(0,vr.jsx)(Ju,{name:"select-view",className:"calendar__select-view",items:n,changeHandler:a,selected:r}),(0,vr.jsx)("div",{className:tc.separator}),(0,vr.jsx)(Gu,{onSubmit:s.handleSearch})]})}var rc=a(9301),ac={};ac.styleTagTransform=Ar(),ac.setAttributes=pr(),ac.insert=cr().bind(null,"head"),ac.domAPI=sr(),ac.insertStyleElement=mr(),ir()(rc.A,ac);const oc=rc.A&&rc.A.locals?rc.A.locals:void 0,ic=({onFilter:e,filter:n})=>{const r=(0,t.useRef)(null),a={resetHandler:()=>{r.current?.reset(),e({})},submitHandler:t=>{t.preventDefault();const n={},a=(r.current?.elements.namedItem("text")).value;a&&(n.text=a);const o=(r.current?.elements.namedItem("tagText")).value;o&&(n.tagText=o);const i=(r.current?.elements.namedItem("dateFrom")).value;i&&(n.dateFrom=Oa(i));const l=(r.current?.elements.namedItem("dateTo")).value;l&&(n.dateTo=Oa(l));const s=(r.current?.elements.namedItem("status")).value;""!==s&&(n.status=Boolean(+s)),e(n)}};return(0,vr.jsx)("form",{ref:r,id:"filter-controls",className:oc.filterControls,onSubmit:a.submitHandler,children:(0,vr.jsxs)("fieldset",{className:oc.filter__fieldset,children:[(0,vr.jsx)("legend",{children:"Filter"}),(0,vr.jsxs)("div",{className:oc.dateFromGroup,children:[(0,vr.jsx)("label",{htmlFor:"dateFrom",children:"From date:"}),(0,vr.jsx)("input",{className:"filter__date-from",id:"dateFrom",name:"dateFrom",type:"date",defaultValue:Pa(n.dateFrom)})]}),(0,vr.jsxs)("div",{className:oc.dateToGroup,children:[(0,vr.jsx)("label",{htmlFor:"dateTo",children:"To date:"}),(0,vr.jsx)("input",{className:"filter__date-to",name:"dateTo",id:"dateTo",type:"date",defaultValue:Pa(n.dateTo)})]}),(0,vr.jsxs)("div",{className:oc.textGroup,children:[(0,vr.jsx)("label",{htmlFor:"text",children:"By text content:"}),(0,vr.jsx)("input",{className:"filter__text",name:"text",id:"text",type:"text",placeholder:"Search",defaultValue:n.text||""})]}),(0,vr.jsxs)("div",{className:oc.statusGroup,children:[(0,vr.jsx)("label",{htmlFor:"status",children:"By status:"}),(0,vr.jsxs)("select",{className:"filter__status",name:"status",id:"status",defaultValue:void 0===n.status?"":+n.status,children:[(0,vr.jsx)("option",{value:"",children:"All"}),(0,vr.jsx)("option",{value:"0",children:"Todo"}),(0,vr.jsx)("option",{value:"1",children:"Done"})]})]}),(0,vr.jsxs)("div",{className:oc.tagsGroup,children:[(0,vr.jsx)("label",{htmlFor:"tagText",children:"By tag:"}),(0,vr.jsx)("input",{className:"filter__tags",name:"tagText",id:"tagText",type:"text",placeholder:"Tags",defaultValue:n.tagText||""})]}),(0,vr.jsxs)("div",{className:oc.btnGroup,children:[(0,vr.jsx)("button",{type:"submit",className:oc.btn,children:"Filter"}),(0,vr.jsx)("button",{type:"reset",className:oc.btn,onClick:a.resetHandler,children:"Clear"})]})]})})};var lc=a(2215);function sc(e){return(0,ya.Ay)("MuiButton",e)}const uc=(0,ra.A)("MuiButton",["root","text","textInherit","textPrimary","textSecondary","textSuccess","textError","textInfo","textWarning","outlined","outlinedInherit","outlinedPrimary","outlinedSecondary","outlinedSuccess","outlinedError","outlinedInfo","outlinedWarning","contained","containedInherit","containedPrimary","containedSecondary","containedSuccess","containedError","containedInfo","containedWarning","disableElevation","focusVisible","disabled","colorInherit","colorPrimary","colorSecondary","colorSuccess","colorError","colorInfo","colorWarning","textSizeSmall","textSizeMedium","textSizeLarge","outlinedSizeSmall","outlinedSizeMedium","outlinedSizeLarge","containedSizeSmall","containedSizeMedium","containedSizeLarge","sizeMedium","sizeSmall","sizeLarge","fullWidth","startIcon","endIcon","icon","iconSizeSmall","iconSizeMedium","iconSizeLarge"]),cc=t.createContext({}),dc=t.createContext(void 0),pc=["children","color","component","className","disabled","disableElevation","disableFocusRipple","endIcon","focusVisibleClassName","fullWidth","size","startIcon","type","variant"],fc=e=>(0,Lr.A)({},"small"===e.size&&{"& > *:nth-of-type(1)":{fontSize:18}},"medium"===e.size&&{"& > *:nth-of-type(1)":{fontSize:20}},"large"===e.size&&{"& > *:nth-of-type(1)":{fontSize:22}}),mc=(0,Dr.Ay)(Ca,{shouldForwardProp:e=>(0,_a.A)(e)||"classes"===e,name:"MuiButton",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[n.variant],t[`${n.variant}${(0,wa.A)(n.color)}`],t[`size${(0,wa.A)(n.size)}`],t[`${n.variant}Size${(0,wa.A)(n.size)}`],"inherit"===n.color&&t.colorInherit,n.disableElevation&&t.disableElevation,n.fullWidth&&t.fullWidth]}})((({theme:e,ownerState:t})=>{var n,r;const a="light"===e.palette.mode?e.palette.grey[300]:e.palette.grey[800],o="light"===e.palette.mode?e.palette.grey.A100:e.palette.grey[700];return(0,Lr.A)({},e.typography.button,{minWidth:64,padding:"6px 16px",borderRadius:(e.vars||e).shape.borderRadius,transition:e.transitions.create(["background-color","box-shadow","border-color","color"],{duration:e.transitions.duration.short}),"&:hover":(0,Lr.A)({textDecoration:"none",backgroundColor:e.vars?`rgba(${e.vars.palette.text.primaryChannel} / ${e.vars.palette.action.hoverOpacity})`:(0,ws.X4)(e.palette.text.primary,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},"text"===t.variant&&"inherit"!==t.color&&{backgroundColor:e.vars?`rgba(${e.vars.palette[t.color].mainChannel} / ${e.vars.palette.action.hoverOpacity})`:(0,ws.X4)(e.palette[t.color].main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},"outlined"===t.variant&&"inherit"!==t.color&&{border:`1px solid ${(e.vars||e).palette[t.color].main}`,backgroundColor:e.vars?`rgba(${e.vars.palette[t.color].mainChannel} / ${e.vars.palette.action.hoverOpacity})`:(0,ws.X4)(e.palette[t.color].main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},"contained"===t.variant&&{backgroundColor:e.vars?e.vars.palette.Button.inheritContainedHoverBg:o,boxShadow:(e.vars||e).shadows[4],"@media (hover: none)":{boxShadow:(e.vars||e).shadows[2],backgroundColor:(e.vars||e).palette.grey[300]}},"contained"===t.variant&&"inherit"!==t.color&&{backgroundColor:(e.vars||e).palette[t.color].dark,"@media (hover: none)":{backgroundColor:(e.vars||e).palette[t.color].main}}),"&:active":(0,Lr.A)({},"contained"===t.variant&&{boxShadow:(e.vars||e).shadows[8]}),[`&.${uc.focusVisible}`]:(0,Lr.A)({},"contained"===t.variant&&{boxShadow:(e.vars||e).shadows[6]}),[`&.${uc.disabled}`]:(0,Lr.A)({color:(e.vars||e).palette.action.disabled},"outlined"===t.variant&&{border:`1px solid ${(e.vars||e).palette.action.disabledBackground}`},"contained"===t.variant&&{color:(e.vars||e).palette.action.disabled,boxShadow:(e.vars||e).shadows[0],backgroundColor:(e.vars||e).palette.action.disabledBackground})},"text"===t.variant&&{padding:"6px 8px"},"text"===t.variant&&"inherit"!==t.color&&{color:(e.vars||e).palette[t.color].main},"outlined"===t.variant&&{padding:"5px 15px",border:"1px solid currentColor"},"outlined"===t.variant&&"inherit"!==t.color&&{color:(e.vars||e).palette[t.color].main,border:e.vars?`1px solid rgba(${e.vars.palette[t.color].mainChannel} / 0.5)`:`1px solid ${(0,ws.X4)(e.palette[t.color].main,.5)}`},"contained"===t.variant&&{color:e.vars?e.vars.palette.text.primary:null==(n=(r=e.palette).getContrastText)?void 0:n.call(r,e.palette.grey[300]),backgroundColor:e.vars?e.vars.palette.Button.inheritContainedBg:a,boxShadow:(e.vars||e).shadows[2]},"contained"===t.variant&&"inherit"!==t.color&&{color:(e.vars||e).palette[t.color].contrastText,backgroundColor:(e.vars||e).palette[t.color].main},"inherit"===t.color&&{color:"inherit",borderColor:"currentColor"},"small"===t.size&&"text"===t.variant&&{padding:"4px 5px",fontSize:e.typography.pxToRem(13)},"large"===t.size&&"text"===t.variant&&{padding:"8px 11px",fontSize:e.typography.pxToRem(15)},"small"===t.size&&"outlined"===t.variant&&{padding:"3px 9px",fontSize:e.typography.pxToRem(13)},"large"===t.size&&"outlined"===t.variant&&{padding:"7px 21px",fontSize:e.typography.pxToRem(15)},"small"===t.size&&"contained"===t.variant&&{padding:"4px 10px",fontSize:e.typography.pxToRem(13)},"large"===t.size&&"contained"===t.variant&&{padding:"8px 22px",fontSize:e.typography.pxToRem(15)},t.fullWidth&&{width:"100%"})}),(({ownerState:e})=>e.disableElevation&&{boxShadow:"none","&:hover":{boxShadow:"none"},[`&.${uc.focusVisible}`]:{boxShadow:"none"},"&:active":{boxShadow:"none"},[`&.${uc.disabled}`]:{boxShadow:"none"}})),hc=(0,Dr.Ay)("span",{name:"MuiButton",slot:"StartIcon",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.startIcon,t[`iconSize${(0,wa.A)(n.size)}`]]}})((({ownerState:e})=>(0,Lr.A)({display:"inherit",marginRight:8,marginLeft:-4},"small"===e.size&&{marginLeft:-2},fc(e)))),Ac=(0,Dr.Ay)("span",{name:"MuiButton",slot:"EndIcon",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.endIcon,t[`iconSize${(0,wa.A)(n.size)}`]]}})((({ownerState:e})=>(0,Lr.A)({display:"inherit",marginRight:-4,marginLeft:8},"small"===e.size&&{marginRight:-2},fc(e)))),gc=t.forwardRef((function(e,n){const r=t.useContext(cc),a=t.useContext(dc),o=(0,lc.A)(r,e),i=(0,Wr.b)({props:o,name:"MuiButton"}),{children:l,color:s="primary",component:u="button",className:c,disabled:d=!1,disableElevation:p=!1,disableFocusRipple:f=!1,endIcon:m,focusVisibleClassName:h,fullWidth:A=!1,size:g="medium",startIcon:y,type:v,variant:b="text"}=i,x=(0,Ir.A)(i,pc),E=(0,Lr.A)({},i,{color:s,component:u,disabled:d,disableElevation:p,disableFocusRipple:f,fullWidth:A,size:g,type:v,variant:b}),C=(e=>{const{color:t,disableElevation:n,fullWidth:r,size:a,variant:o,classes:i}=e,l={root:["root",o,`${o}${(0,wa.A)(t)}`,`size${(0,wa.A)(a)}`,`${o}Size${(0,wa.A)(a)}`,`color${(0,wa.A)(t)}`,n&&"disableElevation",r&&"fullWidth"],label:["label"],startIcon:["icon","startIcon",`iconSize${(0,wa.A)(a)}`],endIcon:["icon","endIcon",`iconSize${(0,wa.A)(a)}`]},s=(0,$r.A)(l,sc,i);return(0,Lr.A)({},i,s)})(E),w=y&&(0,vr.jsx)(hc,{className:C.startIcon,ownerState:E,children:y}),k=m&&(0,vr.jsx)(Ac,{className:C.endIcon,ownerState:E,children:m}),S=a||"";return(0,vr.jsxs)(mc,(0,Lr.A)({ownerState:E,className:(0,Fr.A)(r.className,C.root,c,S),component:u,disabled:d,focusRipple:!f,focusVisibleClassName:(0,Fr.A)(C.focusVisible,h),ref:n,type:v},x,{classes:C,children:[w,l,k]}))}));var yc=a(2913),vc={};function bc(){const e=k();return(0,vr.jsx)("form",{id:"task-add-form",className:"task-add",onSubmit:t=>{t.preventDefault();const n=t.target;if(n.checkValidity()){const t=e=>n.elements[e],r=t("taskTitle"),a=t("description"),o=t("startDate"),i=t("tags"),l=new Date(o.value).valueOf();e(Qn({creationDate:Date.now(),status:!1,taskTitle:r.value,description:a.value,startDate:l,tags:i.value})),n.reset()}},children:(0,vr.jsxs)("fieldset",{className:"task-add__fieldset",children:[(0,vr.jsx)("legend",{children:"Add task"}),(0,vr.jsxs)("div",{className:"task-add__group",children:[(0,vr.jsx)("label",{className:"task-add__label",htmlFor:"taskTitle",children:"Title:"}),(0,vr.jsx)(ju,{type:"text",name:"taskTitle",id:"taskTitle",className:"task-add__input-title",placeholder:"Enter task title...",required:!0})]}),(0,vr.jsxs)("div",{className:"task-add__group",children:[(0,vr.jsx)("label",{className:"task-add__label",htmlFor:"description",children:"Task description:"}),(0,vr.jsx)(Go,{name:"description",id:"description",minRows:2,className:"task-add__input-description",placeholder:"Enter task description..."})]}),(0,vr.jsxs)("div",{className:"task-add__group",children:[(0,vr.jsx)("label",{className:"task-add__label",htmlFor:"startDate",children:"Event date and time:"}),(0,vr.jsx)(ju,{type:"datetime-local",name:"startDate",id:"startDate",className:"task-add__input-date",required:!0})]}),(0,vr.jsxs)("div",{className:"task-add__group",children:[(0,vr.jsx)("label",{className:"task-add__label",htmlFor:"tags",children:"Tags:"}),(0,vr.jsx)(ju,{type:"text",name:"tags",id:"tags",className:"task-add__input-tags",placeholder:"Enter comma separated tags"})]}),(0,vr.jsx)("div",{className:"task-add__group",children:(0,vr.jsx)(gc,{type:"submit",className:"task-add__btn-add",variant:"contained",children:"Add"})})]})})}vc.styleTagTransform=Ar(),vc.setAttributes=pr(),vc.insert=cr().bind(null,"head"),vc.domAPI=sr(),vc.insertStyleElement=mr(),ir()(yc.A,vc),yc.A&&yc.A.locals&&yc.A.locals;var xc=a(9142),Ec={};Ec.styleTagTransform=Ar(),Ec.setAttributes=pr(),Ec.insert=cr().bind(null,"head"),Ec.domAPI=sr(),Ec.insertStyleElement=mr(),ir()(xc.A,Ec);const Cc=xc.A&&xc.A.locals?xc.A.locals:void 0,wc=({onFilter:e,subfilter:t,className:n})=>{const r=[{title:"Add task",initiallyOpened:!0,content:(0,vr.jsx)(bc,{})},{title:"Filter",initiallyOpened:!0,content:(0,vr.jsx)(ic,{onFilter:e,filter:t})}];return(0,vr.jsxs)("aside",{className:`${Cc.sidebar} ${n}`,children:[(0,vr.jsx)("div",{className:Cc.header,children:(0,vr.jsx)("h2",{className:Cc.title,children:"Calendar"})}),(0,vr.jsx)("div",{className:Cc.content,children:(0,vr.jsx)(Qu,{className:"accordion",items:r})})]})},kc=["year","month","week","date","list"];function Sc({newView:e,year:t,month:n,date:r,week:a,id:o}){return{year:`/calendar/${e}?year=${t}`,month:`/calendar/${e}?year=${t}&month=${n}`,date:`/calendar/${e}?year=${t}&month=${n}&date=${r}`,week:`/calendar/${e}?year=${t}&week=${a||Xa(new Date(t,n,r).getTime())[1]}`,list:`/calendar/${e}?year=${t}&month=${n}&date=${r}`,task:`/../${e}/view?id=${o}`}[e]}var _c=a(6130),Bc={};function Tc(){const[e,n]=(0,t.useState)(""),[r,a]=Ke(),[o,i]=(0,t.useState)({}),l=k(),s=h(wr),{items:u}=s,c=ye(),{view:d}=ve(),p=Object.fromEntries(new URLSearchParams(r)),f=function(){const e=new Date;return{year:e.getFullYear(),month:e.getMonth(),date:e.getDate(),hours:e.getHours(),minutes:e.getMinutes(),seconds:e.getSeconds()}}();let{year:m,month:A,date:g}=f,y=-1;const v=p.id;p.year&&(m=Number(p.year)),p.month&&(A=Number(p.month)),p.date&&(g=Number(p.date)),p.week&&(y=Number(p.week)),y=-1===y?Xa(new Date(m,A,g).getTime())[1]:y,(0,t.useLayoutEffect)((()=>{if(d)if(p.filter){const e=JSON.parse(p.filter);try{i(e)}catch(e){console.error(e)}l(Xn(e))}else l(Xn(function({newView:e,year:t,month:n,date:r,week:a}){switch(e){case"year":return{dateFrom:new Date(t,0,1).setHours(0,0,0,0).valueOf(),dateTo:new Date(t,11,31).setHours(0,0,0,0).valueOf()};case"month":return{dateFrom:new Date(t,n,1).setHours(0,0,0,0).valueOf(),dateTo:new Date(t,n+1,0).setHours(0,0,0,0).valueOf()};case"date":return{dateFrom:new Date(t,n,r).setHours(0,0,0,0).valueOf(),dateTo:new Date(t,n,r+1).setHours(0,0,0,0).valueOf()};case"list":return{dateFrom:(new Date).setHours(0,0,0,0).valueOf()};case"week":return{dateFrom:Ka(`${t}-W${a}`),dateTo:Ka(`${t}-W${a+1}`)-1};default:return{}}}({newView:d,year:m,month:A,date:g,week:y}))),i({});else c("/calendar/year",{replace:!0})}),[d,m,A,g,y,p.filter]);const b={activeViewhandler:(0,t.useCallback)((e=>{i({}),c(Sc({newView:e,year:m,month:A,date:g,week:y,id:v}))}),[m,A,g,y]),goToRelative:(0,t.useCallback)(((e,t)=>{const n={newView:t,year:m,month:A,date:g,week:y};"next"===e?n[t]+=1:n[t]-=1,c(Sc(n))}),[d,m,A,g,y]),onToday:(0,t.useCallback)((()=>{const e={newView:d||"year",year:f.year,month:f.month,date:f.date,week:Xa(Ra())[1]};c(Sc(e))}),[d,m,A,g,y]),onEdit:(0,t.useCallback)((e=>{c(`../task/edit?id=${e}`)}),[]),onCheck:(0,t.useCallback)(((e,t)=>{l(Jn({id:e,status:t}))}),[]),onFilter:(0,t.useCallback)((e=>{const t=function(e){const t=e;return Object.keys(t).forEach((e=>{null!==t[e]&&void 0!==t[e]&&""!==t[e]||delete t[e]})),t}(e);0!==Object.entries(t).length?a({filter:JSON.stringify({...t})}):a("")}),[d]),onSearch:(0,t.useCallback)((e=>{a({filter:JSON.stringify({text:e})})}),[d])},x=s.isLoading?"loading":"";return(0,vr.jsxs)("main",{className:`page__calendar ${x}`,children:[(0,vr.jsx)(wc,{className:"calendar__sidebar",onFilter:b.onFilter,subfilter:o}),(0,vr.jsx)(nc,{controlsTitle:e,activeView:d,views:kc,setActiveView:b.activeViewhandler,onGoToRelative:b.goToRelative,onToday:b.onToday,onSearch:b.onSearch}),d&&!x&&(0,vr.jsx)(No,{view:d,setViewTitle:n,onEdit:b.onEdit,onCheck:b.onCheck,year:m,month:A,date:g,week:y,items:u}),(0,vr.jsx)(ja,{sx:{margin:0,top:"auto",right:100,bottom:100,left:"auto",position:"fixed"},color:"primary","aria-label":"add",onClick:()=>alert("add"),children:(0,vr.jsx)(Mr.A,{})})]})}Bc.styleTagTransform=Ar(),Bc.setAttributes=pr(),Bc.insert=cr().bind(null,"head"),Bc.domAPI=sr(),Bc.insertStyleElement=mr(),ir()(_c.A,Bc),_c.A&&_c.A.locals&&_c.A.locals;var jc=a(35),Nc={};Nc.styleTagTransform=Ar(),Nc.setAttributes=pr(),Nc.insert=cr().bind(null,"head"),Nc.domAPI=sr(),Nc.insertStyleElement=mr(),ir()(jc.A,Nc),jc.A&&jc.A.locals&&jc.A.locals;const Rc=a.p+"dbbd86e8db2033e920d8.jpg";function Pc(){return(0,vr.jsx)("main",{className:"page__home",children:(0,vr.jsx)("div",{className:"container home__wrapper",children:(0,vr.jsxs)("div",{className:"content-frame",children:[(0,vr.jsx)("h1",{children:"Календарь"}),(0,vr.jsx)("img",{src:Rc,alt:"",width:"800",height:"500"}),(0,vr.jsx)("p",{children:"Приложение поддерживает регистрацию новых пользователей по email и паролю"})]})})})}var Oc=a(3040),zc={};zc.styleTagTransform=Ar(),zc.setAttributes=pr(),zc.insert=cr().bind(null,"head"),zc.domAPI=sr(),zc.insertStyleElement=mr(),ir()(Oc.A,zc);const Mc=Oc.A&&Oc.A.locals?Oc.A.locals:void 0;function Ic(){const e=k(),n=h(Cr);return(0,t.useEffect)((()=>{e(tr())}),[]),(0,vr.jsx)(vr.Fragment,{children:!n.isLoading&&(0,vr.jsx)("main",{className:Mc.page__profile,children:(0,vr.jsxs)("div",{className:"container",children:[(0,vr.jsx)("h1",{children:"Profile"}),(0,vr.jsx)("div",{children:(0,vr.jsxs)("form",{className:Mc.form,onSubmit:t=>{t.preventDefault();const n=t.target.elements.namedItem("email").value;e(qn({newEmail:n})),e(Hn())},children:[(0,vr.jsxs)("div",{className:Mc.inputGroup,children:[(0,vr.jsx)("label",{htmlFor:"email",children:"email:"}),(0,vr.jsx)("input",{type:"email",name:"email",id:"email",defaultValue:n.user?.email||""})]}),(0,vr.jsx)("p",{children:"INFO: You will be signed out after email change"}),(0,vr.jsx)("button",{className:Mc.btn,type:"submit",children:"Change email"})]})})]})})})}const Lc=function(){sessionStorage.getItem("token");const e=h(Er),{isLoading:n,isAuthenticated:r}=e,a=k();(0,t.useLayoutEffect)((()=>{a(Un())}),[]);const o={onSignOut(){a(Hn())}};return!n&&(0,vr.jsxs)(vr.Fragment,{children:[(0,vr.jsx)(br,{onSignOut:o.onSignOut,isAuthenticated:r}),(0,vr.jsxs)(Pe,{children:[(0,vr.jsx)(Ne,{path:"/",element:(0,vr.jsx)(Pc,{})}),(0,vr.jsx)(Ne,{path:"calendar/:view?",element:(0,vr.jsx)(xr,{isAuthenticated:r,children:(0,vr.jsx)(Tc,{})})}),(0,vr.jsx)(Ne,{path:"auth/:action",element:(0,vr.jsx)(zr,{})}),(0,vr.jsx)(Ne,{path:"/task/:action?",element:(0,vr.jsx)(qa,{})}),(0,vr.jsx)(Ne,{path:"/about",element:(0,vr.jsx)(_r,{})}),(0,vr.jsx)(Ne,{path:"profile",element:(0,vr.jsx)(xr,{isAuthenticated:r,children:(0,vr.jsx)(Ic,{})})}),(0,vr.jsx)(Ne,{path:"*",element:(0,vr.jsx)(Pc,{})})]})]})},Fc=()=>(0,vr.jsx)(b,{store:ar,children:(0,vr.jsx)(We,{basename:"/calendar/",children:(0,vr.jsx)(Lc,{})})});var $c=a(2791),Dc={};Dc.styleTagTransform=Ar(),Dc.setAttributes=pr(),Dc.insert=cr().bind(null,"head"),Dc.domAPI=sr(),Dc.insertStyleElement=mr(),ir()($c.A,Dc),$c.A&&$c.A.locals&&$c.A.locals;const Wc=document.createElement("div");Wc.id="root",Wc.className="page",document.body.append(Wc),(0,e.H)(Wc).render((0,vr.jsx)(Fc,{}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,